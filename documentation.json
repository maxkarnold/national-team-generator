{
    "pipes": [
        {
            "name": "MemoizerPipe",
            "id": "pipe-MemoizerPipe-497dae9cd5fe24c8d02446739d40e024e097397cce6f03281b77cd4ba4eecbf5f6602ec388c58ed9da29b3fe8ffd6f8622e13607bea0d7617a9b7460627def4f",
            "file": "src/app/shared/pipes/memoizer.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-html\">CAUTION: Methods needs to be defined an ARROW FUNCTION inside component classes\nThis is because the memoizerPipe cannot apply the proper context (uses null) when invoking the function. As such,\nwe need to pre-bind it to the component so that we can use the proper &quot;this&quot; reference when invoked via the memoizerPipe.</code></pre></div>",
            "rawdescription": "\n\n```html\nCAUTION: Methods needs to be defined an ARROW FUNCTION inside component classes\nThis is because the memoizerPipe cannot apply the proper context (uses null) when invoking the function. As such,\nwe need to pre-bind it to the component so that we can use the proper \"this\" reference when invoked via the memoizerPipe.\n```",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "templateValue",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "fnReference",
                            "type": "Function",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "fnArguments",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "templateValue",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "fnReference",
                            "type": "Function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "fnArguments",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "standalone": false,
            "pure": true,
            "ngname": "memoizer",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n/**\r\n * @description This pipe is designed to be used in a template to access a component method:\r\n * @example In a template: {{ valueA | memoizerPipe : componentMethodRef : valueB }}\r\n * @implements {PipeTransform}\r\n * CAUTION: Methods needs to be defined an ARROW FUNCTION inside component classes\r\n * This is because the memoizerPipe cannot apply the proper context (uses null) when invoking the function. As such,\r\n * we need to pre-bind it to the component so that we can use the proper \"this\" reference when invoked via the memoizerPipe.\r\n */\r\n\r\n@Pipe({\r\n  name: 'memoizer',\r\n  pure: true,\r\n})\r\nexport class MemoizerPipe implements PipeTransform {\r\n  transform(templateValue: any, fnReference: Function, ...fnArguments: any[]): any {\r\n    // Due to the way pipes receive arguments, we may have inputs on both sides of\r\n    // the function reference. As such, let's join the two input sets.\r\n    fnArguments.unshift(templateValue);\r\n\r\n    // CAUTION: The function reference will NOT BE INVOKED IN THE COMPONENT CONTEXT.\r\n    // As such, a component must bind the reference if it needs to use the \"this\"\r\n    // scope within the function body.\r\n    return fnReference.apply(null, fnArguments);\r\n  }\r\n}\r\n"
        }
    ],
    "interfaces": [
        {
            "name": "AllRolesTierList",
            "id": "interface-AllRolesTierList-dd4b6cc36a00c48ef7afc5890a71303cefaac696b94090a365755c09225758590aa7c83352e024328b11e4860d88645fc0e5cc73c22ab1a2f6aa5a395999c1ee",
            "file": "src/app/moba/draft/draft.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Champion } from '../champion/champion.model';\nimport { Role } from '../player/player.model';\n\nexport interface DraftChampion extends Champion {\n  metaStrength: [number, number, number, number, number];\n  playerMastery: [number, number, number, number, number];\n  opponentMastery: [number, number, number, number, number];\n  currentSynergy: {\n    player?: number;\n    opp?: number;\n  };\n  currentCounter: {\n    player: {\n      top: number;\n      jungle: number;\n      mid: number;\n      adc: number;\n      support: number;\n    };\n    opp: {\n      top: number;\n      jungle: number;\n      mid: number;\n      adc: number;\n      support: number;\n    };\n  };\n  currentScore: {\n    player?: number;\n    opp?: number;\n  };\n  selectedRole: Role;\n  isPlaceholder: boolean;\n  adviceTags: {\n    player: ChampionAdvice;\n    opp: ChampionAdvice;\n  };\n}\n\nexport interface DraftPlayer {\n  mainRole: Role;\n  championMastery: TierListRankings;\n}\n\nexport interface TierListRankings {\n  s: number[];\n  a: number[];\n  b: number[];\n  c: number[];\n  d: number[];\n}\n\nexport interface AllRolesTierList {\n  top: TierListRankings;\n  jungle: TierListRankings;\n  mid: TierListRankings;\n  adc: TierListRankings;\n  support: TierListRankings;\n}\n\nexport interface CompStyleStats {\n  engage: number;\n  pick: number;\n  protect: number;\n  siege: number;\n  split: number;\n}\n\nexport interface CompStyleData {\n  name: CompStyle;\n  primary: string[];\n  secondary: string[];\n}\n\nexport interface DraftFormData {\n  userIsRedSide: boolean;\n  patchVersion: PatchVersion;\n  useAiOpponent: boolean;\n  difficulty: DraftDifficulty;\n  useRandomTeam: boolean;\n}\n\nexport interface PatchData {\n  name: PatchName;\n  version: PatchVersion;\n  excludedChamps: number[];\n  patchTierList: AllRolesTierList;\n  // counters?: AllRolesTierList;\n  // synergies?: AllRolesTierList;\n}\n\nexport interface ChampionAdvice {\n  top: DraftAdviceTag[];\n  jungle: DraftAdviceTag[];\n  mid: DraftAdviceTag[];\n  adc: DraftAdviceTag[];\n  support: DraftAdviceTag[];\n}\n\nexport type CompStyle = 'engage' | 'pick' | 'protect' | 'siege' | 'split';\nexport type PatchName = 'MSI 24';\nexport type PatchVersion = 14.8;\nexport type DraftSortHeader = 'name' | 'mastery' | 'meta' | 'synergy' | 'counter';\nexport type DraftDifficulty = 'easy' | 'medium' | 'hard';\nexport type DraftAdviceTag = 'Counters Banned' | 'Recommended' | 'Counter Pick' | 'Not Recommended' | 'High Synergy';\n\nexport type LetterRank = 'S' | 'A' | 'B' | 'C' | 'D' | 'F' | 'N/A' | 'S+' | 'S-' | 'A+' | 'A-' | 'B+' | 'B-' | 'C+' | 'C-' | 'D+' | 'D-';\nexport type DraftPhase =\n  | 'Blue Ban 1'\n  | 'Blue Ban 2'\n  | 'Blue Ban 3'\n  | 'Blue Ban 4'\n  | 'Blue Ban 5'\n  | 'Blue Pick 1'\n  | 'Blue Pick 2'\n  | 'Blue Pick 3'\n  | 'Blue Pick 4'\n  | 'Blue Pick 5'\n  | 'Red Ban 1'\n  | 'Red Ban 2'\n  | 'Red Ban 3'\n  | 'Red Ban 4'\n  | 'Red Ban 5'\n  | 'Red Pick 1'\n  | 'Red Pick 2'\n  | 'Red Pick 3'\n  | 'Red Pick 4'\n  | 'Red Pick 5'\n  | 'Draft Complete';\n\nexport function getRoleFromFilter(role: Role | 'all' | undefined): Role | undefined {\n  return role === 'all' ? undefined : role;\n}\n\nexport enum TierValue {\n  S = 20,\n  A = 16,\n  B = 12,\n  C = 8,\n  D = 4,\n  F = 0,\n}\n\nexport const tierValues: { [key: string]: TierValue } = {\n  s: TierValue.S,\n  a: TierValue.A,\n  b: TierValue.B,\n  c: TierValue.C,\n  d: TierValue.D,\n  f: TierValue.F,\n};\n\nexport const redSidePickRounds = [8, 9, 12, 17, 20];\nexport const blueSidePickRounds = [7, 10, 11, 18, 19];\nexport const redSideBanRounds = [2, 4, 6, 13, 15];\nexport const blueSideBanRounds = [1, 3, 5, 14, 16];\n\nexport const emptyDraftBans: Partial<DraftChampion>[] = [\n  {\n    isPlaceholder: true,\n    name: '1',\n  },\n  {\n    isPlaceholder: true,\n    name: '2',\n  },\n  {\n    isPlaceholder: true,\n    name: '3',\n  },\n  {\n    isPlaceholder: true,\n    name: '4',\n  },\n  {\n    isPlaceholder: true,\n    name: '5',\n  },\n];\n\nexport const compStyleReqs: CompStyleData[] = [\n  {\n    name: 'engage',\n    primary: ['mobility.engage', 'dmg.aoe', 'crowdControl.impact', 'crowdControl.aoe'],\n    secondary: ['dmg.burst', 'crowdControl.singleTarget', 'defense.mitigation', 'defense.sustain'],\n  },\n  {\n    name: 'pick',\n    primary: ['dmg.burst', 'dmg.singleTarget', 'crowdControl.singleTarget', 'dmg.skirmish'],\n    secondary: ['crowdControl.range', 'mobility.engage', 'mobility.reposition', 'crowdControl.impact'],\n  },\n  {\n    name: 'protect',\n    primary: ['dmg.dps', 'support.peel', 'support.utility', 'support.zoneControl'],\n    secondary: ['dmg.singleTarget', 'dmg.aoe', 'defense.sustain', 'defense.mitigation'],\n  },\n  {\n    name: 'siege',\n    primary: ['dmg.poke', 'dmg.siege', 'support.zoneControl', 'support.peel'],\n    secondary: ['dmg.waveClear', 'support.utility', 'dmg.dps', 'dmg.aoe'],\n  },\n  {\n    name: 'split',\n    primary: ['dmg.splitPush', 'dmg.skirmish', 'dmg.waveClear', 'support.peel'],\n    secondary: ['support.zoneControl', 'mobility.reposition', 'dmg.siege', 'dmg.singleTarget'],\n  },\n];\n\nexport const emptyDraftPicks: Partial<DraftChampion>[] = [\n  {\n    isPlaceholder: true,\n    name: 'Top',\n  },\n  {\n    isPlaceholder: true,\n    name: 'Jungle',\n  },\n  {\n    isPlaceholder: true,\n    name: 'Mid',\n  },\n  {\n    isPlaceholder: true,\n    name: 'ADC',\n  },\n  {\n    isPlaceholder: true,\n    name: 'Support',\n  },\n];\n\nexport const defaultPlayerMasteries: DraftPlayer[] = [\n  {\n    mainRole: 'top',\n    championMastery: {\n      s: [47, 44],\n      a: [45, 46, 0],\n      b: [1, 2],\n      c: [],\n      d: [],\n    },\n  },\n  {\n    mainRole: 'jungle',\n    championMastery: {\n      s: [2, 8],\n      a: [9, 10],\n      b: [11, 12],\n      c: [13],\n      d: [],\n    },\n  },\n  {\n    mainRole: 'mid',\n    championMastery: {\n      s: [18, 17],\n      a: [20, 19],\n      b: [21, 22],\n      c: [28],\n      d: [],\n    },\n  },\n  {\n    mainRole: 'adc',\n    championMastery: {\n      s: [29, 30, 31],\n      a: [32],\n      b: [33, 34],\n      c: [],\n      d: [],\n    },\n  },\n  {\n    mainRole: 'support',\n    championMastery: {\n      s: [36, 37],\n      a: [38, 39],\n      b: [40, 41],\n      c: [53],\n      d: [],\n    },\n  },\n];\nexport const defaultOpponentMasteries: DraftPlayer[] = [\n  {\n    mainRole: 'top',\n    championMastery: {\n      s: [1, 2],\n      a: [45, 46, 0],\n      b: [47, 44],\n      c: [],\n      d: [],\n    },\n  },\n  {\n    mainRole: 'jungle',\n    championMastery: {\n      s: [9, 10],\n      a: [11],\n      b: [12],\n      c: [13, 2, 8],\n      d: [],\n    },\n  },\n  {\n    mainRole: 'mid',\n    championMastery: {\n      s: [21, 22],\n      a: [20, 19],\n      b: [18, 17],\n      c: [],\n      d: [],\n    },\n  },\n  {\n    mainRole: 'adc',\n    championMastery: {\n      s: [33, 34, 35],\n      a: [32],\n      b: [29, 30, 31],\n      c: [],\n      d: [],\n    },\n  },\n  {\n    mainRole: 'support',\n    championMastery: {\n      s: [53],\n      a: [39, 40],\n      b: [40, 38],\n      c: [36, 37],\n      d: [],\n    },\n  },\n];\n",
            "properties": [
                {
                    "name": "adc",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TierListRankings",
                    "optional": false,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "jungle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TierListRankings",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "mid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TierListRankings",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "support",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TierListRankings",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "top",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TierListRankings",
                    "optional": false,
                    "description": "",
                    "line": 54
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "AppearanceStats",
            "id": "interface-AppearanceStats-864f5230a055c715e78820c083f48ae78658929e7b94faa98c2b1cad6c32d7e569189e6bca7a073c9c5183c26569d84bbd06c58b2f7865c361c63f86de27a221",
            "file": "src/app/career/player/player.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Club } from 'app/models/club.model';\r\nimport { Nation } from 'app/models/nation.model';\r\nimport { ClubStats, LeagueDifficulty, TransferOption } from '../club/club.model';\r\n\r\nexport interface PlayerCareer {\r\n  // current\r\n  age: number;\r\n  currentAbility: number;\r\n  potentialAbility: number;\r\n  playingTime: PlayingTime;\r\n  wage: number;\r\n  recentTransferFee: number;\r\n  seasonStats: {\r\n    league: CompetitionStats;\r\n    cup: CompetitionStats;\r\n    continental: CompetitionStats;\r\n  };\r\n  currentClub?: Club;\r\n  position?: string;\r\n  // career/total\r\n  careerOverview: CareerOverview;\r\n}\r\n\r\nexport type PlayingTime =\r\n  | 'breakthrough prospect'\r\n  | 'fringe player'\r\n  | 'impact sub'\r\n  | 'squad player'\r\n  | 'regular starter'\r\n  | 'important player'\r\n  | 'star player';\r\n\r\nexport interface CareerOverview {\r\n  seasons: string;\r\n  yearsActive: number;\r\n  totalStats: SeasonStats;\r\n  totalEarnings: number;\r\n  score: CareerScore;\r\n  peakAbility: number;\r\n  peakClubAbility: number;\r\n  avgLeagueAbility: number;\r\n  totalPossibleApps: number;\r\n  clubStats: ClubStats[];\r\n  nationality: Nation | Partial<Nation>;\r\n  longestServedClub?: ClubStats;\r\n}\r\n\r\nexport interface CareerScore {\r\n  totalScore: number;\r\n  abilityScore: number;\r\n  peakClubScore: number;\r\n  avgLeagueScore: number;\r\n  availabilityScore: number;\r\n  goalScore: number;\r\n}\r\n\r\nexport interface Season {\r\n  id: number;\r\n  year: string;\r\n  age: number;\r\n  stats: SeasonStats;\r\n  leagueDifficulty: LeagueDifficulty;\r\n  currentAbility: number;\r\n  potentialAbility: number;\r\n  currentClub?: TransferOption;\r\n}\r\n\r\nexport interface SeasonStats {\r\n  allComps: CompetitionStats;\r\n  league: CompetitionStats;\r\n  cup: CompetitionStats;\r\n  continental: CompetitionStats;\r\n}\r\n\r\nexport interface AppearanceStats {\r\n  appearances: {\r\n    starts: number;\r\n    sub: number;\r\n    total: number;\r\n  };\r\n}\r\n\r\nexport interface CompetitionStats extends AppearanceStats {\r\n  goals: number;\r\n  assists: number;\r\n  avgRating: number;\r\n  aggRating: number;\r\n}\r\n\r\nexport const defaultCompStats: CompetitionStats = {\r\n  appearances: {\r\n    starts: 0,\r\n    sub: 0,\r\n    total: 0,\r\n  },\r\n  goals: 0,\r\n  assists: 0,\r\n  avgRating: 6.0,\r\n  aggRating: 0,\r\n};\r\n\r\nexport const defaultSeasonStats: SeasonStats = {\r\n  allComps: { ...defaultCompStats },\r\n  league: { ...defaultCompStats },\r\n  cup: { ...defaultCompStats },\r\n  continental: { ...defaultCompStats },\r\n};\r\n",
            "properties": [
                {
                    "name": "appearances",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 76
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Buff",
            "id": "interface-Buff-5ac8536a854afa9cbb3a98589f451d95abf162e467ddb4aae45abed0651ef1a1f5bfd2236dbf3ed21c2b29a1369062ef32e18374308faaa4091d46d26ac26b47",
            "file": "src/app/models/nation.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Match, RegionName } from 'app/simulation/simulation.model';\r\nimport { Person } from './player.model';\r\nimport { getRandFloat } from '@shared/utils';\r\nimport * as nationsJson from 'assets/json/nations.json';\r\n\r\nexport const allNations = () => {\r\n  const newArr = nationsJson;\r\n  const nations: Nation[] = [];\r\n\r\n  Object.values(newArr).forEach(t => {\r\n    if (t.nations) {\r\n      nations.push(...(t.nations as Nation[]));\r\n    }\r\n  });\r\n\r\n  return nations;\r\n};\r\n\r\nexport interface Nation {\r\n  name: string;\r\n  logo: string;\r\n  region: RegionName;\r\n  firstNameUsages: string[];\r\n  lastNameUsages: string[];\r\n  mainLeagues: string[];\r\n  secondLeagues: string[];\r\n  thirdLeagues: string[];\r\n  rareLeagues: string[];\r\n  excludeLeagues: string[];\r\n  nationTier: string;\r\n  abbreviation: string;\r\n  canSoloHost32: boolean;\r\n  canSoloHost48: boolean;\r\n  cohosts32: string[];\r\n  cohosts48: string[];\r\n  triHosts48: string[];\r\n  quadHosts48: string[];\r\n  emoji: string;\r\n}\r\n\r\nexport interface GroupTeam {\r\n  name: string;\r\n  logo: string;\r\n  abbreviation: string;\r\n  region: RegionName;\r\n  matchesPlayed: number;\r\n  points: number;\r\n  gDiff: number;\r\n  gFor: number;\r\n  gOpp: number;\r\n  tier: string;\r\n  nationTier: string;\r\n  startingRating: {\r\n    att: number;\r\n    mid: number;\r\n    def: number;\r\n    pen: number;\r\n  };\r\n  dynamicRating: {\r\n    att: number;\r\n    mid: number;\r\n    def: number;\r\n    pen: number;\r\n  };\r\n  isBuffed: {\r\n    att: boolean;\r\n    mid: boolean;\r\n    def: boolean;\r\n    pen: boolean;\r\n  };\r\n  isDebuffed: {\r\n    att: boolean;\r\n    mid: boolean;\r\n    def: boolean;\r\n    pen: boolean;\r\n  };\r\n  currentBuffs: {\r\n    att: Buff[];\r\n    mid: Buff[];\r\n    def: Buff[];\r\n    pen: Buff[];\r\n  };\r\n  matchHistory: {\r\n    qualifiers: {\r\n      match: Match;\r\n      opp: GroupTeam;\r\n    }[];\r\n    group: {\r\n      match: Match;\r\n      opp: GroupTeam;\r\n    }[];\r\n    bracket: {\r\n      match: Match;\r\n      opp: GroupTeam;\r\n    }[];\r\n  };\r\n  rating: number;\r\n  ranking: number;\r\n  attRanking: number;\r\n  midRanking: number;\r\n  defRanking: number;\r\n  reportCard: {\r\n    grade: string | null;\r\n    tournamentFinish: string | null;\r\n    gradeStyle: string | null;\r\n    gradeSummary: string | null;\r\n  };\r\n  emoji: string;\r\n  homeTeam: boolean;\r\n  canSoloHost32: boolean;\r\n  canSoloHost48: boolean;\r\n  cohosts32: string[];\r\n  cohosts48: string[];\r\n  triHosts48: string[];\r\n  quadHosts48: string[];\r\n  coach?: Person;\r\n  pot?: number;\r\n  groupFinish?: string;\r\n}\r\n\r\nexport interface Buff {\r\n  numOfGames: number;\r\n  value: number;\r\n}\r\n\r\nexport function isNation(value: unknown): value is Nation {\r\n  return (<Nation>value).abbreviation !== undefined;\r\n}\r\n\r\nexport const baseTeam = (hostNations: GroupTeam[], nation: Nation): GroupTeam => {\r\n  // random nation values\r\n  let min = 0;\r\n  let max = 0;\r\n\r\n  switch (nation.nationTier) {\r\n    case 's':\r\n      min = 80;\r\n      max = 100;\r\n      break;\r\n    case 'a':\r\n      min = 70;\r\n      max = 95;\r\n      break;\r\n    case 'b':\r\n      min = 65;\r\n      max = 88;\r\n      break;\r\n    case 'c':\r\n      min = 60;\r\n      max = 88;\r\n      break;\r\n    case 'd':\r\n      min = 55;\r\n      max = 80;\r\n      break;\r\n    case 'e':\r\n      min = 40;\r\n      max = 78;\r\n      break;\r\n    case 'f':\r\n      min = 30;\r\n      max = 70;\r\n      break;\r\n    case 'g':\r\n      min = 25;\r\n      max = 55;\r\n      break;\r\n    default:\r\n      min = 25;\r\n      max = 55;\r\n      break;\r\n  }\r\n  const attRating = getRandFloat(min, max);\r\n  const midRating = getRandFloat(min, max);\r\n  const defRating = getRandFloat(min, max);\r\n  const penRating = getRandFloat(min, max);\r\n  return {\r\n    ...nation,\r\n    gDiff: 0,\r\n    gFor: 0,\r\n    gOpp: 0,\r\n    points: 0,\r\n    matchesPlayed: 0,\r\n    tier: nation.nationTier,\r\n    startingRating: {\r\n      att: attRating,\r\n      mid: midRating,\r\n      def: defRating,\r\n      pen: penRating,\r\n    },\r\n    dynamicRating: {\r\n      att: attRating,\r\n      mid: midRating,\r\n      def: defRating,\r\n      pen: penRating,\r\n    },\r\n    isBuffed: {\r\n      att: false,\r\n      mid: false,\r\n      def: false,\r\n      pen: false,\r\n    },\r\n    isDebuffed: {\r\n      att: false,\r\n      mid: false,\r\n      def: false,\r\n      pen: false,\r\n    },\r\n    currentBuffs: {\r\n      att: [],\r\n      mid: [],\r\n      def: [],\r\n      pen: [],\r\n    },\r\n    rating: (attRating + midRating + defRating) / 3,\r\n    ranking: 0,\r\n    attRanking: 0,\r\n    midRanking: 0,\r\n    defRanking: 0,\r\n    matchHistory: {\r\n      qualifiers: [],\r\n      group: [],\r\n      bracket: [],\r\n    },\r\n    reportCard: {\r\n      grade: null,\r\n      gradeStyle: null,\r\n      gradeSummary: null,\r\n      tournamentFinish: null,\r\n    },\r\n    homeTeam: hostNations.map(t => t.name).includes(nation.name) ? true : false,\r\n    region: nation.region as RegionName,\r\n  };\r\n};\r\n\r\nexport const defaultHost32: GroupTeam = {\r\n  name: 'Qatar',\r\n  abbreviation: 'qat',\r\n  logo: 'https://fmdataba.com/images/n/QAT.svg',\r\n  emoji: '🇶🇦',\r\n  region: RegionName.afc,\r\n  points: 0,\r\n  gDiff: 0,\r\n  gFor: 0,\r\n  gOpp: 0,\r\n  tier: 'j',\r\n  nationTier: 'e',\r\n  startingRating: {\r\n    att: 0,\r\n    mid: 0,\r\n    def: 0,\r\n    pen: 0,\r\n  },\r\n  dynamicRating: {\r\n    att: 0,\r\n    mid: 0,\r\n    def: 0,\r\n    pen: 0,\r\n  },\r\n  isBuffed: {\r\n    att: false,\r\n    mid: false,\r\n    def: false,\r\n    pen: false,\r\n  },\r\n  isDebuffed: {\r\n    att: false,\r\n    mid: false,\r\n    def: false,\r\n    pen: false,\r\n  },\r\n  currentBuffs: {\r\n    att: [],\r\n    mid: [],\r\n    def: [],\r\n    pen: [],\r\n  },\r\n  rating: 0,\r\n  matchesPlayed: 0,\r\n  matchHistory: {\r\n    qualifiers: [],\r\n    group: [],\r\n    bracket: [],\r\n  },\r\n  reportCard: {\r\n    grade: null,\r\n    gradeStyle: null,\r\n    gradeSummary: null,\r\n    tournamentFinish: null,\r\n  },\r\n  ranking: 0,\r\n  attRanking: 0,\r\n  midRanking: 0,\r\n  defRanking: 0,\r\n  homeTeam: true,\r\n  canSoloHost32: true,\r\n  canSoloHost48: false,\r\n  cohosts32: [],\r\n  cohosts48: [],\r\n  triHosts48: [],\r\n  quadHosts48: [],\r\n};\r\n\r\nexport const defaultHosts48: GroupTeam[] = [\r\n  {\r\n    name: 'Mexico',\r\n    abbreviation: 'mex',\r\n    logo: 'https://fmdataba.com/images/n/MEX.svg',\r\n    emoji: '🇲🇽',\r\n    region: RegionName.concacaf,\r\n    points: 0,\r\n    gDiff: 0,\r\n    gFor: 0,\r\n    gOpp: 0,\r\n    tier: 'b',\r\n    nationTier: 'b',\r\n    startingRating: {\r\n      att: 0,\r\n      mid: 0,\r\n      def: 0,\r\n      pen: 0,\r\n    },\r\n    dynamicRating: {\r\n      att: 0,\r\n      mid: 0,\r\n      def: 0,\r\n      pen: 0,\r\n    },\r\n    isBuffed: {\r\n      att: false,\r\n      mid: false,\r\n      def: false,\r\n      pen: false,\r\n    },\r\n    isDebuffed: {\r\n      att: false,\r\n      mid: false,\r\n      def: false,\r\n      pen: false,\r\n    },\r\n    currentBuffs: {\r\n      att: [],\r\n      mid: [],\r\n      def: [],\r\n      pen: [],\r\n    },\r\n    rating: 0,\r\n    matchesPlayed: 0,\r\n    matchHistory: {\r\n      qualifiers: [],\r\n      group: [],\r\n      bracket: [],\r\n    },\r\n    reportCard: {\r\n      grade: null,\r\n      gradeStyle: null,\r\n      gradeSummary: null,\r\n      tournamentFinish: null,\r\n    },\r\n    ranking: 0,\r\n    attRanking: 0,\r\n    midRanking: 0,\r\n    defRanking: 0,\r\n    homeTeam: true,\r\n    canSoloHost32: true,\r\n    cohosts32: ['United States'],\r\n    cohosts48: ['United States'],\r\n    canSoloHost48: false,\r\n    triHosts48: ['United States', 'Canada'],\r\n    quadHosts48: [],\r\n  },\r\n  {\r\n    name: 'United States',\r\n    abbreviation: 'usa',\r\n    logo: 'https://fmdataba.com/images/n/USA.svg',\r\n    emoji: '🇺🇸',\r\n    region: RegionName.concacaf,\r\n    points: 0,\r\n    gDiff: 0,\r\n    gFor: 0,\r\n    gOpp: 0,\r\n    tier: 'b',\r\n    nationTier: 'b',\r\n    startingRating: {\r\n      att: 0,\r\n      mid: 0,\r\n      def: 0,\r\n      pen: 0,\r\n    },\r\n    dynamicRating: {\r\n      att: 0,\r\n      mid: 0,\r\n      def: 0,\r\n      pen: 0,\r\n    },\r\n    isBuffed: {\r\n      att: false,\r\n      mid: false,\r\n      def: false,\r\n      pen: false,\r\n    },\r\n    isDebuffed: {\r\n      att: false,\r\n      mid: false,\r\n      def: false,\r\n      pen: false,\r\n    },\r\n    currentBuffs: {\r\n      att: [],\r\n      mid: [],\r\n      def: [],\r\n      pen: [],\r\n    },\r\n    rating: 0,\r\n    matchesPlayed: 0,\r\n    matchHistory: {\r\n      qualifiers: [],\r\n      group: [],\r\n      bracket: [],\r\n    },\r\n    reportCard: {\r\n      grade: null,\r\n      gradeStyle: null,\r\n      gradeSummary: null,\r\n      tournamentFinish: null,\r\n    },\r\n    ranking: 0,\r\n    attRanking: 0,\r\n    midRanking: 0,\r\n    defRanking: 0,\r\n    homeTeam: true,\r\n    canSoloHost32: true,\r\n    cohosts32: ['Canada', 'Mexico'],\r\n    cohosts48: ['Mexico'],\r\n    canSoloHost48: false,\r\n    triHosts48: ['Canada', 'Mexico'],\r\n    quadHosts48: [],\r\n  },\r\n  {\r\n    name: 'Canada',\r\n    abbreviation: 'can',\r\n    logo: 'https://fmdataba.com/images/n/CAN.svg',\r\n    emoji: '🇨🇦',\r\n    region: RegionName.concacaf,\r\n    points: 0,\r\n    gDiff: 0,\r\n    gFor: 0,\r\n    gOpp: 0,\r\n    tier: 'd',\r\n    nationTier: 'd',\r\n    startingRating: {\r\n      att: 0,\r\n      mid: 0,\r\n      def: 0,\r\n      pen: 0,\r\n    },\r\n    dynamicRating: {\r\n      att: 0,\r\n      mid: 0,\r\n      def: 0,\r\n      pen: 0,\r\n    },\r\n    isBuffed: {\r\n      att: false,\r\n      mid: false,\r\n      def: false,\r\n      pen: false,\r\n    },\r\n    isDebuffed: {\r\n      att: false,\r\n      mid: false,\r\n      def: false,\r\n      pen: false,\r\n    },\r\n    currentBuffs: {\r\n      att: [],\r\n      mid: [],\r\n      def: [],\r\n      pen: [],\r\n    },\r\n    rating: 0,\r\n    matchesPlayed: 0,\r\n    matchHistory: {\r\n      qualifiers: [],\r\n      group: [],\r\n      bracket: [],\r\n    },\r\n    reportCard: {\r\n      grade: null,\r\n      gradeStyle: null,\r\n      gradeSummary: null,\r\n      tournamentFinish: null,\r\n    },\r\n    ranking: 0,\r\n    attRanking: 0,\r\n    midRanking: 0,\r\n    defRanking: 0,\r\n    homeTeam: true,\r\n    canSoloHost32: true,\r\n    cohosts32: ['United States'],\r\n    cohosts48: [],\r\n    canSoloHost48: false,\r\n    triHosts48: ['Mexico', 'United States'],\r\n    quadHosts48: [],\r\n  },\r\n];\r\n",
            "properties": [
                {
                    "name": "numOfGames",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 122
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 123
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "CareerOverview",
            "id": "interface-CareerOverview-864f5230a055c715e78820c083f48ae78658929e7b94faa98c2b1cad6c32d7e569189e6bca7a073c9c5183c26569d84bbd06c58b2f7865c361c63f86de27a221",
            "file": "src/app/career/player/player.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Club } from 'app/models/club.model';\r\nimport { Nation } from 'app/models/nation.model';\r\nimport { ClubStats, LeagueDifficulty, TransferOption } from '../club/club.model';\r\n\r\nexport interface PlayerCareer {\r\n  // current\r\n  age: number;\r\n  currentAbility: number;\r\n  potentialAbility: number;\r\n  playingTime: PlayingTime;\r\n  wage: number;\r\n  recentTransferFee: number;\r\n  seasonStats: {\r\n    league: CompetitionStats;\r\n    cup: CompetitionStats;\r\n    continental: CompetitionStats;\r\n  };\r\n  currentClub?: Club;\r\n  position?: string;\r\n  // career/total\r\n  careerOverview: CareerOverview;\r\n}\r\n\r\nexport type PlayingTime =\r\n  | 'breakthrough prospect'\r\n  | 'fringe player'\r\n  | 'impact sub'\r\n  | 'squad player'\r\n  | 'regular starter'\r\n  | 'important player'\r\n  | 'star player';\r\n\r\nexport interface CareerOverview {\r\n  seasons: string;\r\n  yearsActive: number;\r\n  totalStats: SeasonStats;\r\n  totalEarnings: number;\r\n  score: CareerScore;\r\n  peakAbility: number;\r\n  peakClubAbility: number;\r\n  avgLeagueAbility: number;\r\n  totalPossibleApps: number;\r\n  clubStats: ClubStats[];\r\n  nationality: Nation | Partial<Nation>;\r\n  longestServedClub?: ClubStats;\r\n}\r\n\r\nexport interface CareerScore {\r\n  totalScore: number;\r\n  abilityScore: number;\r\n  peakClubScore: number;\r\n  avgLeagueScore: number;\r\n  availabilityScore: number;\r\n  goalScore: number;\r\n}\r\n\r\nexport interface Season {\r\n  id: number;\r\n  year: string;\r\n  age: number;\r\n  stats: SeasonStats;\r\n  leagueDifficulty: LeagueDifficulty;\r\n  currentAbility: number;\r\n  potentialAbility: number;\r\n  currentClub?: TransferOption;\r\n}\r\n\r\nexport interface SeasonStats {\r\n  allComps: CompetitionStats;\r\n  league: CompetitionStats;\r\n  cup: CompetitionStats;\r\n  continental: CompetitionStats;\r\n}\r\n\r\nexport interface AppearanceStats {\r\n  appearances: {\r\n    starts: number;\r\n    sub: number;\r\n    total: number;\r\n  };\r\n}\r\n\r\nexport interface CompetitionStats extends AppearanceStats {\r\n  goals: number;\r\n  assists: number;\r\n  avgRating: number;\r\n  aggRating: number;\r\n}\r\n\r\nexport const defaultCompStats: CompetitionStats = {\r\n  appearances: {\r\n    starts: 0,\r\n    sub: 0,\r\n    total: 0,\r\n  },\r\n  goals: 0,\r\n  assists: 0,\r\n  avgRating: 6.0,\r\n  aggRating: 0,\r\n};\r\n\r\nexport const defaultSeasonStats: SeasonStats = {\r\n  allComps: { ...defaultCompStats },\r\n  league: { ...defaultCompStats },\r\n  cup: { ...defaultCompStats },\r\n  continental: { ...defaultCompStats },\r\n};\r\n",
            "properties": [
                {
                    "name": "avgLeagueAbility",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "clubStats",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ClubStats[]",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "longestServedClub",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ClubStats",
                    "optional": true,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "nationality",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Nation | Partial<Nation>",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "peakAbility",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "peakClubAbility",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "score",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CareerScore",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "seasons",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "totalEarnings",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "totalPossibleApps",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "totalStats",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SeasonStats",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "yearsActive",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 35
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "CareerScore",
            "id": "interface-CareerScore-864f5230a055c715e78820c083f48ae78658929e7b94faa98c2b1cad6c32d7e569189e6bca7a073c9c5183c26569d84bbd06c58b2f7865c361c63f86de27a221",
            "file": "src/app/career/player/player.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Club } from 'app/models/club.model';\r\nimport { Nation } from 'app/models/nation.model';\r\nimport { ClubStats, LeagueDifficulty, TransferOption } from '../club/club.model';\r\n\r\nexport interface PlayerCareer {\r\n  // current\r\n  age: number;\r\n  currentAbility: number;\r\n  potentialAbility: number;\r\n  playingTime: PlayingTime;\r\n  wage: number;\r\n  recentTransferFee: number;\r\n  seasonStats: {\r\n    league: CompetitionStats;\r\n    cup: CompetitionStats;\r\n    continental: CompetitionStats;\r\n  };\r\n  currentClub?: Club;\r\n  position?: string;\r\n  // career/total\r\n  careerOverview: CareerOverview;\r\n}\r\n\r\nexport type PlayingTime =\r\n  | 'breakthrough prospect'\r\n  | 'fringe player'\r\n  | 'impact sub'\r\n  | 'squad player'\r\n  | 'regular starter'\r\n  | 'important player'\r\n  | 'star player';\r\n\r\nexport interface CareerOverview {\r\n  seasons: string;\r\n  yearsActive: number;\r\n  totalStats: SeasonStats;\r\n  totalEarnings: number;\r\n  score: CareerScore;\r\n  peakAbility: number;\r\n  peakClubAbility: number;\r\n  avgLeagueAbility: number;\r\n  totalPossibleApps: number;\r\n  clubStats: ClubStats[];\r\n  nationality: Nation | Partial<Nation>;\r\n  longestServedClub?: ClubStats;\r\n}\r\n\r\nexport interface CareerScore {\r\n  totalScore: number;\r\n  abilityScore: number;\r\n  peakClubScore: number;\r\n  avgLeagueScore: number;\r\n  availabilityScore: number;\r\n  goalScore: number;\r\n}\r\n\r\nexport interface Season {\r\n  id: number;\r\n  year: string;\r\n  age: number;\r\n  stats: SeasonStats;\r\n  leagueDifficulty: LeagueDifficulty;\r\n  currentAbility: number;\r\n  potentialAbility: number;\r\n  currentClub?: TransferOption;\r\n}\r\n\r\nexport interface SeasonStats {\r\n  allComps: CompetitionStats;\r\n  league: CompetitionStats;\r\n  cup: CompetitionStats;\r\n  continental: CompetitionStats;\r\n}\r\n\r\nexport interface AppearanceStats {\r\n  appearances: {\r\n    starts: number;\r\n    sub: number;\r\n    total: number;\r\n  };\r\n}\r\n\r\nexport interface CompetitionStats extends AppearanceStats {\r\n  goals: number;\r\n  assists: number;\r\n  avgRating: number;\r\n  aggRating: number;\r\n}\r\n\r\nexport const defaultCompStats: CompetitionStats = {\r\n  appearances: {\r\n    starts: 0,\r\n    sub: 0,\r\n    total: 0,\r\n  },\r\n  goals: 0,\r\n  assists: 0,\r\n  avgRating: 6.0,\r\n  aggRating: 0,\r\n};\r\n\r\nexport const defaultSeasonStats: SeasonStats = {\r\n  allComps: { ...defaultCompStats },\r\n  league: { ...defaultCompStats },\r\n  cup: { ...defaultCompStats },\r\n  continental: { ...defaultCompStats },\r\n};\r\n",
            "properties": [
                {
                    "name": "abilityScore",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "availabilityScore",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "avgLeagueScore",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "goalScore",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "peakClubScore",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "totalScore",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 49
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Champion",
            "id": "interface-Champion-bc99c23e13a4e8424a4ccc0a30b2a969de5bbf59898b570aca806e26fa626f6a82d8b0498491dad5f98cb6f3bffacf45c017d0f00a74ef9873fe435098f0f6f4",
            "file": "src/app/moba/champion/champion.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { AllRolesTierList } from '../draft/draft.model';\r\nimport { Role } from '../player/player.model';\r\n\r\nexport interface Champion {\r\n  id: number;\r\n  name: string;\r\n  roles: Role[];\r\n  gameStateAttributes: GameStateAttributes;\r\n  img: string;\r\n  dmgType: DamageType;\r\n  attributes: TypeAttributes;\r\n  // Use champion ids for synergies and counters\r\n  synergies: AllRolesTierList;\r\n  counters: AllRolesTierList;\r\n}\r\n\r\nexport interface GameStateAttributes {\r\n  early: number;\r\n  mid: number;\r\n  late: number;\r\n}\r\n\r\nexport interface TypeAttributes {\r\n  mobility: {\r\n    engage: boolean;\r\n    reposition: boolean;\r\n  };\r\n  dmg: {\r\n    aoe: boolean;\r\n    burst: boolean;\r\n    singleTarget: boolean;\r\n    skirmish: boolean;\r\n    dps: boolean;\r\n    poke: boolean;\r\n    siege: boolean;\r\n    waveClear: boolean;\r\n    splitPush: boolean;\r\n  };\r\n  crowdControl: {\r\n    impact: boolean;\r\n    aoe: boolean;\r\n    singleTarget: boolean;\r\n    ranged: boolean;\r\n  };\r\n  defense: {\r\n    mitigation: boolean;\r\n    sustain: boolean;\r\n  };\r\n  support: {\r\n    peel: boolean;\r\n    utility: boolean;\r\n    zoneControl: boolean;\r\n  };\r\n}\r\n\r\nexport type DamageType = 'high ad' | 'high ap' | 'high mix' | 'low ad' | 'low ap' | 'low mix' | 'utility';\r\n\r\nexport type Archetype =\r\n  | 'bruiser'\r\n  | 'tank'\r\n  | 'mage'\r\n  | 'assassin'\r\n  | 'enchanter'\r\n  | 'fighter'\r\n  | 'crit-marksman'\r\n  | 'lethality-marksman'\r\n  | 'terrainAbuser'\r\n  | 'split-pusher'\r\n  | 'immobile'\r\n  | 'mobile'\r\n  | 'lane-bully'\r\n  | 'aoe'\r\n  | 'duelist';\r\n\r\nexport type CompRole = 'hard-engage' | 'engage' | 'poke' | 'isolator' | 'anti-engage' | 'team-fight-burst' | 'team-fight-sustain' | 'carry';\r\n",
            "properties": [
                {
                    "name": "attributes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TypeAttributes",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "counters",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AllRolesTierList",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "dmgType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DamageType",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "gameStateAttributes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GameStateAttributes",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "img",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "roles",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Role[]",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "synergies",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AllRolesTierList",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ChampionAdvice",
            "id": "interface-ChampionAdvice-dd4b6cc36a00c48ef7afc5890a71303cefaac696b94090a365755c09225758590aa7c83352e024328b11e4860d88645fc0e5cc73c22ab1a2f6aa5a395999c1ee",
            "file": "src/app/moba/draft/draft.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Champion } from '../champion/champion.model';\nimport { Role } from '../player/player.model';\n\nexport interface DraftChampion extends Champion {\n  metaStrength: [number, number, number, number, number];\n  playerMastery: [number, number, number, number, number];\n  opponentMastery: [number, number, number, number, number];\n  currentSynergy: {\n    player?: number;\n    opp?: number;\n  };\n  currentCounter: {\n    player: {\n      top: number;\n      jungle: number;\n      mid: number;\n      adc: number;\n      support: number;\n    };\n    opp: {\n      top: number;\n      jungle: number;\n      mid: number;\n      adc: number;\n      support: number;\n    };\n  };\n  currentScore: {\n    player?: number;\n    opp?: number;\n  };\n  selectedRole: Role;\n  isPlaceholder: boolean;\n  adviceTags: {\n    player: ChampionAdvice;\n    opp: ChampionAdvice;\n  };\n}\n\nexport interface DraftPlayer {\n  mainRole: Role;\n  championMastery: TierListRankings;\n}\n\nexport interface TierListRankings {\n  s: number[];\n  a: number[];\n  b: number[];\n  c: number[];\n  d: number[];\n}\n\nexport interface AllRolesTierList {\n  top: TierListRankings;\n  jungle: TierListRankings;\n  mid: TierListRankings;\n  adc: TierListRankings;\n  support: TierListRankings;\n}\n\nexport interface CompStyleStats {\n  engage: number;\n  pick: number;\n  protect: number;\n  siege: number;\n  split: number;\n}\n\nexport interface CompStyleData {\n  name: CompStyle;\n  primary: string[];\n  secondary: string[];\n}\n\nexport interface DraftFormData {\n  userIsRedSide: boolean;\n  patchVersion: PatchVersion;\n  useAiOpponent: boolean;\n  difficulty: DraftDifficulty;\n  useRandomTeam: boolean;\n}\n\nexport interface PatchData {\n  name: PatchName;\n  version: PatchVersion;\n  excludedChamps: number[];\n  patchTierList: AllRolesTierList;\n  // counters?: AllRolesTierList;\n  // synergies?: AllRolesTierList;\n}\n\nexport interface ChampionAdvice {\n  top: DraftAdviceTag[];\n  jungle: DraftAdviceTag[];\n  mid: DraftAdviceTag[];\n  adc: DraftAdviceTag[];\n  support: DraftAdviceTag[];\n}\n\nexport type CompStyle = 'engage' | 'pick' | 'protect' | 'siege' | 'split';\nexport type PatchName = 'MSI 24';\nexport type PatchVersion = 14.8;\nexport type DraftSortHeader = 'name' | 'mastery' | 'meta' | 'synergy' | 'counter';\nexport type DraftDifficulty = 'easy' | 'medium' | 'hard';\nexport type DraftAdviceTag = 'Counters Banned' | 'Recommended' | 'Counter Pick' | 'Not Recommended' | 'High Synergy';\n\nexport type LetterRank = 'S' | 'A' | 'B' | 'C' | 'D' | 'F' | 'N/A' | 'S+' | 'S-' | 'A+' | 'A-' | 'B+' | 'B-' | 'C+' | 'C-' | 'D+' | 'D-';\nexport type DraftPhase =\n  | 'Blue Ban 1'\n  | 'Blue Ban 2'\n  | 'Blue Ban 3'\n  | 'Blue Ban 4'\n  | 'Blue Ban 5'\n  | 'Blue Pick 1'\n  | 'Blue Pick 2'\n  | 'Blue Pick 3'\n  | 'Blue Pick 4'\n  | 'Blue Pick 5'\n  | 'Red Ban 1'\n  | 'Red Ban 2'\n  | 'Red Ban 3'\n  | 'Red Ban 4'\n  | 'Red Ban 5'\n  | 'Red Pick 1'\n  | 'Red Pick 2'\n  | 'Red Pick 3'\n  | 'Red Pick 4'\n  | 'Red Pick 5'\n  | 'Draft Complete';\n\nexport function getRoleFromFilter(role: Role | 'all' | undefined): Role | undefined {\n  return role === 'all' ? undefined : role;\n}\n\nexport enum TierValue {\n  S = 20,\n  A = 16,\n  B = 12,\n  C = 8,\n  D = 4,\n  F = 0,\n}\n\nexport const tierValues: { [key: string]: TierValue } = {\n  s: TierValue.S,\n  a: TierValue.A,\n  b: TierValue.B,\n  c: TierValue.C,\n  d: TierValue.D,\n  f: TierValue.F,\n};\n\nexport const redSidePickRounds = [8, 9, 12, 17, 20];\nexport const blueSidePickRounds = [7, 10, 11, 18, 19];\nexport const redSideBanRounds = [2, 4, 6, 13, 15];\nexport const blueSideBanRounds = [1, 3, 5, 14, 16];\n\nexport const emptyDraftBans: Partial<DraftChampion>[] = [\n  {\n    isPlaceholder: true,\n    name: '1',\n  },\n  {\n    isPlaceholder: true,\n    name: '2',\n  },\n  {\n    isPlaceholder: true,\n    name: '3',\n  },\n  {\n    isPlaceholder: true,\n    name: '4',\n  },\n  {\n    isPlaceholder: true,\n    name: '5',\n  },\n];\n\nexport const compStyleReqs: CompStyleData[] = [\n  {\n    name: 'engage',\n    primary: ['mobility.engage', 'dmg.aoe', 'crowdControl.impact', 'crowdControl.aoe'],\n    secondary: ['dmg.burst', 'crowdControl.singleTarget', 'defense.mitigation', 'defense.sustain'],\n  },\n  {\n    name: 'pick',\n    primary: ['dmg.burst', 'dmg.singleTarget', 'crowdControl.singleTarget', 'dmg.skirmish'],\n    secondary: ['crowdControl.range', 'mobility.engage', 'mobility.reposition', 'crowdControl.impact'],\n  },\n  {\n    name: 'protect',\n    primary: ['dmg.dps', 'support.peel', 'support.utility', 'support.zoneControl'],\n    secondary: ['dmg.singleTarget', 'dmg.aoe', 'defense.sustain', 'defense.mitigation'],\n  },\n  {\n    name: 'siege',\n    primary: ['dmg.poke', 'dmg.siege', 'support.zoneControl', 'support.peel'],\n    secondary: ['dmg.waveClear', 'support.utility', 'dmg.dps', 'dmg.aoe'],\n  },\n  {\n    name: 'split',\n    primary: ['dmg.splitPush', 'dmg.skirmish', 'dmg.waveClear', 'support.peel'],\n    secondary: ['support.zoneControl', 'mobility.reposition', 'dmg.siege', 'dmg.singleTarget'],\n  },\n];\n\nexport const emptyDraftPicks: Partial<DraftChampion>[] = [\n  {\n    isPlaceholder: true,\n    name: 'Top',\n  },\n  {\n    isPlaceholder: true,\n    name: 'Jungle',\n  },\n  {\n    isPlaceholder: true,\n    name: 'Mid',\n  },\n  {\n    isPlaceholder: true,\n    name: 'ADC',\n  },\n  {\n    isPlaceholder: true,\n    name: 'Support',\n  },\n];\n\nexport const defaultPlayerMasteries: DraftPlayer[] = [\n  {\n    mainRole: 'top',\n    championMastery: {\n      s: [47, 44],\n      a: [45, 46, 0],\n      b: [1, 2],\n      c: [],\n      d: [],\n    },\n  },\n  {\n    mainRole: 'jungle',\n    championMastery: {\n      s: [2, 8],\n      a: [9, 10],\n      b: [11, 12],\n      c: [13],\n      d: [],\n    },\n  },\n  {\n    mainRole: 'mid',\n    championMastery: {\n      s: [18, 17],\n      a: [20, 19],\n      b: [21, 22],\n      c: [28],\n      d: [],\n    },\n  },\n  {\n    mainRole: 'adc',\n    championMastery: {\n      s: [29, 30, 31],\n      a: [32],\n      b: [33, 34],\n      c: [],\n      d: [],\n    },\n  },\n  {\n    mainRole: 'support',\n    championMastery: {\n      s: [36, 37],\n      a: [38, 39],\n      b: [40, 41],\n      c: [53],\n      d: [],\n    },\n  },\n];\nexport const defaultOpponentMasteries: DraftPlayer[] = [\n  {\n    mainRole: 'top',\n    championMastery: {\n      s: [1, 2],\n      a: [45, 46, 0],\n      b: [47, 44],\n      c: [],\n      d: [],\n    },\n  },\n  {\n    mainRole: 'jungle',\n    championMastery: {\n      s: [9, 10],\n      a: [11],\n      b: [12],\n      c: [13, 2, 8],\n      d: [],\n    },\n  },\n  {\n    mainRole: 'mid',\n    championMastery: {\n      s: [21, 22],\n      a: [20, 19],\n      b: [18, 17],\n      c: [],\n      d: [],\n    },\n  },\n  {\n    mainRole: 'adc',\n    championMastery: {\n      s: [33, 34, 35],\n      a: [32],\n      b: [29, 30, 31],\n      c: [],\n      d: [],\n    },\n  },\n  {\n    mainRole: 'support',\n    championMastery: {\n      s: [53],\n      a: [39, 40],\n      b: [40, 38],\n      c: [36, 37],\n      d: [],\n    },\n  },\n];\n",
            "properties": [
                {
                    "name": "adc",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DraftAdviceTag[]",
                    "optional": false,
                    "description": "",
                    "line": 96
                },
                {
                    "name": "jungle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DraftAdviceTag[]",
                    "optional": false,
                    "description": "",
                    "line": 94
                },
                {
                    "name": "mid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DraftAdviceTag[]",
                    "optional": false,
                    "description": "",
                    "line": 95
                },
                {
                    "name": "support",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DraftAdviceTag[]",
                    "optional": false,
                    "description": "",
                    "line": 97
                },
                {
                    "name": "top",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DraftAdviceTag[]",
                    "optional": false,
                    "description": "",
                    "line": 93
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Club",
            "id": "interface-Club-9caebd51e9347612305620ade4c40ec404093ce296f2f51684485953833e918ab6a0bc703b0fbe7faa0400d4e2976680312d59d7b26c6e65643e0fb1d2c47a19",
            "file": "src/app/models/club.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Club {\r\n  id: number;\r\n  name: string;\r\n  logo: string;\r\n  league: string;\r\n  continent: Region;\r\n  abbreviation: string | null;\r\n  leagueDifficulty: number;\r\n  clubRating: number;\r\n  marketValue: number;\r\n  gamesInSeason: number;\r\n  leagueTeams: number;\r\n}\r\n\r\nexport enum Region {\r\n  UEFA = 'uefa',\r\n  CONMEBOL = 'conembol',\r\n  CONCACAF = 'concacaf',\r\n  CAF = 'caf',\r\n  AFC = 'afc',\r\n}\r\n",
            "properties": [
                {
                    "name": "abbreviation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "clubRating",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "continent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Region",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "gamesInSeason",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "league",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "leagueDifficulty",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "leagueTeams",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "logo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "marketValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ClubStats",
            "id": "interface-ClubStats-012f8e10c5972b2bbadeee4b0aff2508ecc3bc9fad8593b809936ca027563eacb2900e8b665b60bf78aa3911e5a77b2895c94a367790c3e7b033a3d017d9f36a",
            "file": "src/app/career/club/club.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Club } from 'app/models/club.model';\r\nimport { PlayingTime, SeasonStats } from '../player/player.model';\r\n\r\nexport interface ClubStats extends Club {\r\n  seasonId: number;\r\n  clubStats: SeasonStats;\r\n  isFirstClub: boolean;\r\n  totalSeasons: number;\r\n  currentClubStreak: number;\r\n  previousStandings: {\r\n    league: number;\r\n    cup: number;\r\n    continental: number;\r\n  };\r\n}\r\n\r\nexport interface TransferOption {\r\n  club: ClubStats | Club;\r\n  transferType: TransferType;\r\n  transferFee: number;\r\n  wage: number;\r\n  playingTime: PlayingTime;\r\n  parentClub?: TransferOption;\r\n}\r\n\r\nexport type LeagueDifficulty = 'easy' | 'mediumEasy' | 'medium' | 'mediumHard' | 'hard';\r\n\r\nexport type TransferType = 'loan' | 'transfer' | 'stay' | 'transfer/loan' | 're-sign' | 'sign';\r\n",
            "properties": [
                {
                    "name": "clubStats",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SeasonStats",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "currentClubStreak",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "isFirstClub",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "previousStandings",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "seasonId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "totalSeasons",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [
                "Club"
            ]
        },
        {
            "name": "CompetitionStats",
            "id": "interface-CompetitionStats-864f5230a055c715e78820c083f48ae78658929e7b94faa98c2b1cad6c32d7e569189e6bca7a073c9c5183c26569d84bbd06c58b2f7865c361c63f86de27a221",
            "file": "src/app/career/player/player.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Club } from 'app/models/club.model';\r\nimport { Nation } from 'app/models/nation.model';\r\nimport { ClubStats, LeagueDifficulty, TransferOption } from '../club/club.model';\r\n\r\nexport interface PlayerCareer {\r\n  // current\r\n  age: number;\r\n  currentAbility: number;\r\n  potentialAbility: number;\r\n  playingTime: PlayingTime;\r\n  wage: number;\r\n  recentTransferFee: number;\r\n  seasonStats: {\r\n    league: CompetitionStats;\r\n    cup: CompetitionStats;\r\n    continental: CompetitionStats;\r\n  };\r\n  currentClub?: Club;\r\n  position?: string;\r\n  // career/total\r\n  careerOverview: CareerOverview;\r\n}\r\n\r\nexport type PlayingTime =\r\n  | 'breakthrough prospect'\r\n  | 'fringe player'\r\n  | 'impact sub'\r\n  | 'squad player'\r\n  | 'regular starter'\r\n  | 'important player'\r\n  | 'star player';\r\n\r\nexport interface CareerOverview {\r\n  seasons: string;\r\n  yearsActive: number;\r\n  totalStats: SeasonStats;\r\n  totalEarnings: number;\r\n  score: CareerScore;\r\n  peakAbility: number;\r\n  peakClubAbility: number;\r\n  avgLeagueAbility: number;\r\n  totalPossibleApps: number;\r\n  clubStats: ClubStats[];\r\n  nationality: Nation | Partial<Nation>;\r\n  longestServedClub?: ClubStats;\r\n}\r\n\r\nexport interface CareerScore {\r\n  totalScore: number;\r\n  abilityScore: number;\r\n  peakClubScore: number;\r\n  avgLeagueScore: number;\r\n  availabilityScore: number;\r\n  goalScore: number;\r\n}\r\n\r\nexport interface Season {\r\n  id: number;\r\n  year: string;\r\n  age: number;\r\n  stats: SeasonStats;\r\n  leagueDifficulty: LeagueDifficulty;\r\n  currentAbility: number;\r\n  potentialAbility: number;\r\n  currentClub?: TransferOption;\r\n}\r\n\r\nexport interface SeasonStats {\r\n  allComps: CompetitionStats;\r\n  league: CompetitionStats;\r\n  cup: CompetitionStats;\r\n  continental: CompetitionStats;\r\n}\r\n\r\nexport interface AppearanceStats {\r\n  appearances: {\r\n    starts: number;\r\n    sub: number;\r\n    total: number;\r\n  };\r\n}\r\n\r\nexport interface CompetitionStats extends AppearanceStats {\r\n  goals: number;\r\n  assists: number;\r\n  avgRating: number;\r\n  aggRating: number;\r\n}\r\n\r\nexport const defaultCompStats: CompetitionStats = {\r\n  appearances: {\r\n    starts: 0,\r\n    sub: 0,\r\n    total: 0,\r\n  },\r\n  goals: 0,\r\n  assists: 0,\r\n  avgRating: 6.0,\r\n  aggRating: 0,\r\n};\r\n\r\nexport const defaultSeasonStats: SeasonStats = {\r\n  allComps: { ...defaultCompStats },\r\n  league: { ...defaultCompStats },\r\n  cup: { ...defaultCompStats },\r\n  continental: { ...defaultCompStats },\r\n};\r\n",
            "properties": [
                {
                    "name": "aggRating",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 87
                },
                {
                    "name": "assists",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 85
                },
                {
                    "name": "avgRating",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 86
                },
                {
                    "name": "goals",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 84
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [
                "AppearanceStats"
            ]
        },
        {
            "name": "CompStyleData",
            "id": "interface-CompStyleData-dd4b6cc36a00c48ef7afc5890a71303cefaac696b94090a365755c09225758590aa7c83352e024328b11e4860d88645fc0e5cc73c22ab1a2f6aa5a395999c1ee",
            "file": "src/app/moba/draft/draft.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Champion } from '../champion/champion.model';\nimport { Role } from '../player/player.model';\n\nexport interface DraftChampion extends Champion {\n  metaStrength: [number, number, number, number, number];\n  playerMastery: [number, number, number, number, number];\n  opponentMastery: [number, number, number, number, number];\n  currentSynergy: {\n    player?: number;\n    opp?: number;\n  };\n  currentCounter: {\n    player: {\n      top: number;\n      jungle: number;\n      mid: number;\n      adc: number;\n      support: number;\n    };\n    opp: {\n      top: number;\n      jungle: number;\n      mid: number;\n      adc: number;\n      support: number;\n    };\n  };\n  currentScore: {\n    player?: number;\n    opp?: number;\n  };\n  selectedRole: Role;\n  isPlaceholder: boolean;\n  adviceTags: {\n    player: ChampionAdvice;\n    opp: ChampionAdvice;\n  };\n}\n\nexport interface DraftPlayer {\n  mainRole: Role;\n  championMastery: TierListRankings;\n}\n\nexport interface TierListRankings {\n  s: number[];\n  a: number[];\n  b: number[];\n  c: number[];\n  d: number[];\n}\n\nexport interface AllRolesTierList {\n  top: TierListRankings;\n  jungle: TierListRankings;\n  mid: TierListRankings;\n  adc: TierListRankings;\n  support: TierListRankings;\n}\n\nexport interface CompStyleStats {\n  engage: number;\n  pick: number;\n  protect: number;\n  siege: number;\n  split: number;\n}\n\nexport interface CompStyleData {\n  name: CompStyle;\n  primary: string[];\n  secondary: string[];\n}\n\nexport interface DraftFormData {\n  userIsRedSide: boolean;\n  patchVersion: PatchVersion;\n  useAiOpponent: boolean;\n  difficulty: DraftDifficulty;\n  useRandomTeam: boolean;\n}\n\nexport interface PatchData {\n  name: PatchName;\n  version: PatchVersion;\n  excludedChamps: number[];\n  patchTierList: AllRolesTierList;\n  // counters?: AllRolesTierList;\n  // synergies?: AllRolesTierList;\n}\n\nexport interface ChampionAdvice {\n  top: DraftAdviceTag[];\n  jungle: DraftAdviceTag[];\n  mid: DraftAdviceTag[];\n  adc: DraftAdviceTag[];\n  support: DraftAdviceTag[];\n}\n\nexport type CompStyle = 'engage' | 'pick' | 'protect' | 'siege' | 'split';\nexport type PatchName = 'MSI 24';\nexport type PatchVersion = 14.8;\nexport type DraftSortHeader = 'name' | 'mastery' | 'meta' | 'synergy' | 'counter';\nexport type DraftDifficulty = 'easy' | 'medium' | 'hard';\nexport type DraftAdviceTag = 'Counters Banned' | 'Recommended' | 'Counter Pick' | 'Not Recommended' | 'High Synergy';\n\nexport type LetterRank = 'S' | 'A' | 'B' | 'C' | 'D' | 'F' | 'N/A' | 'S+' | 'S-' | 'A+' | 'A-' | 'B+' | 'B-' | 'C+' | 'C-' | 'D+' | 'D-';\nexport type DraftPhase =\n  | 'Blue Ban 1'\n  | 'Blue Ban 2'\n  | 'Blue Ban 3'\n  | 'Blue Ban 4'\n  | 'Blue Ban 5'\n  | 'Blue Pick 1'\n  | 'Blue Pick 2'\n  | 'Blue Pick 3'\n  | 'Blue Pick 4'\n  | 'Blue Pick 5'\n  | 'Red Ban 1'\n  | 'Red Ban 2'\n  | 'Red Ban 3'\n  | 'Red Ban 4'\n  | 'Red Ban 5'\n  | 'Red Pick 1'\n  | 'Red Pick 2'\n  | 'Red Pick 3'\n  | 'Red Pick 4'\n  | 'Red Pick 5'\n  | 'Draft Complete';\n\nexport function getRoleFromFilter(role: Role | 'all' | undefined): Role | undefined {\n  return role === 'all' ? undefined : role;\n}\n\nexport enum TierValue {\n  S = 20,\n  A = 16,\n  B = 12,\n  C = 8,\n  D = 4,\n  F = 0,\n}\n\nexport const tierValues: { [key: string]: TierValue } = {\n  s: TierValue.S,\n  a: TierValue.A,\n  b: TierValue.B,\n  c: TierValue.C,\n  d: TierValue.D,\n  f: TierValue.F,\n};\n\nexport const redSidePickRounds = [8, 9, 12, 17, 20];\nexport const blueSidePickRounds = [7, 10, 11, 18, 19];\nexport const redSideBanRounds = [2, 4, 6, 13, 15];\nexport const blueSideBanRounds = [1, 3, 5, 14, 16];\n\nexport const emptyDraftBans: Partial<DraftChampion>[] = [\n  {\n    isPlaceholder: true,\n    name: '1',\n  },\n  {\n    isPlaceholder: true,\n    name: '2',\n  },\n  {\n    isPlaceholder: true,\n    name: '3',\n  },\n  {\n    isPlaceholder: true,\n    name: '4',\n  },\n  {\n    isPlaceholder: true,\n    name: '5',\n  },\n];\n\nexport const compStyleReqs: CompStyleData[] = [\n  {\n    name: 'engage',\n    primary: ['mobility.engage', 'dmg.aoe', 'crowdControl.impact', 'crowdControl.aoe'],\n    secondary: ['dmg.burst', 'crowdControl.singleTarget', 'defense.mitigation', 'defense.sustain'],\n  },\n  {\n    name: 'pick',\n    primary: ['dmg.burst', 'dmg.singleTarget', 'crowdControl.singleTarget', 'dmg.skirmish'],\n    secondary: ['crowdControl.range', 'mobility.engage', 'mobility.reposition', 'crowdControl.impact'],\n  },\n  {\n    name: 'protect',\n    primary: ['dmg.dps', 'support.peel', 'support.utility', 'support.zoneControl'],\n    secondary: ['dmg.singleTarget', 'dmg.aoe', 'defense.sustain', 'defense.mitigation'],\n  },\n  {\n    name: 'siege',\n    primary: ['dmg.poke', 'dmg.siege', 'support.zoneControl', 'support.peel'],\n    secondary: ['dmg.waveClear', 'support.utility', 'dmg.dps', 'dmg.aoe'],\n  },\n  {\n    name: 'split',\n    primary: ['dmg.splitPush', 'dmg.skirmish', 'dmg.waveClear', 'support.peel'],\n    secondary: ['support.zoneControl', 'mobility.reposition', 'dmg.siege', 'dmg.singleTarget'],\n  },\n];\n\nexport const emptyDraftPicks: Partial<DraftChampion>[] = [\n  {\n    isPlaceholder: true,\n    name: 'Top',\n  },\n  {\n    isPlaceholder: true,\n    name: 'Jungle',\n  },\n  {\n    isPlaceholder: true,\n    name: 'Mid',\n  },\n  {\n    isPlaceholder: true,\n    name: 'ADC',\n  },\n  {\n    isPlaceholder: true,\n    name: 'Support',\n  },\n];\n\nexport const defaultPlayerMasteries: DraftPlayer[] = [\n  {\n    mainRole: 'top',\n    championMastery: {\n      s: [47, 44],\n      a: [45, 46, 0],\n      b: [1, 2],\n      c: [],\n      d: [],\n    },\n  },\n  {\n    mainRole: 'jungle',\n    championMastery: {\n      s: [2, 8],\n      a: [9, 10],\n      b: [11, 12],\n      c: [13],\n      d: [],\n    },\n  },\n  {\n    mainRole: 'mid',\n    championMastery: {\n      s: [18, 17],\n      a: [20, 19],\n      b: [21, 22],\n      c: [28],\n      d: [],\n    },\n  },\n  {\n    mainRole: 'adc',\n    championMastery: {\n      s: [29, 30, 31],\n      a: [32],\n      b: [33, 34],\n      c: [],\n      d: [],\n    },\n  },\n  {\n    mainRole: 'support',\n    championMastery: {\n      s: [36, 37],\n      a: [38, 39],\n      b: [40, 41],\n      c: [53],\n      d: [],\n    },\n  },\n];\nexport const defaultOpponentMasteries: DraftPlayer[] = [\n  {\n    mainRole: 'top',\n    championMastery: {\n      s: [1, 2],\n      a: [45, 46, 0],\n      b: [47, 44],\n      c: [],\n      d: [],\n    },\n  },\n  {\n    mainRole: 'jungle',\n    championMastery: {\n      s: [9, 10],\n      a: [11],\n      b: [12],\n      c: [13, 2, 8],\n      d: [],\n    },\n  },\n  {\n    mainRole: 'mid',\n    championMastery: {\n      s: [21, 22],\n      a: [20, 19],\n      b: [18, 17],\n      c: [],\n      d: [],\n    },\n  },\n  {\n    mainRole: 'adc',\n    championMastery: {\n      s: [33, 34, 35],\n      a: [32],\n      b: [29, 30, 31],\n      c: [],\n      d: [],\n    },\n  },\n  {\n    mainRole: 'support',\n    championMastery: {\n      s: [53],\n      a: [39, 40],\n      b: [40, 38],\n      c: [36, 37],\n      d: [],\n    },\n  },\n];\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CompStyle",
                    "optional": false,
                    "description": "",
                    "line": 70
                },
                {
                    "name": "primary",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 71
                },
                {
                    "name": "secondary",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 72
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "CompStyleStats",
            "id": "interface-CompStyleStats-dd4b6cc36a00c48ef7afc5890a71303cefaac696b94090a365755c09225758590aa7c83352e024328b11e4860d88645fc0e5cc73c22ab1a2f6aa5a395999c1ee",
            "file": "src/app/moba/draft/draft.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Champion } from '../champion/champion.model';\nimport { Role } from '../player/player.model';\n\nexport interface DraftChampion extends Champion {\n  metaStrength: [number, number, number, number, number];\n  playerMastery: [number, number, number, number, number];\n  opponentMastery: [number, number, number, number, number];\n  currentSynergy: {\n    player?: number;\n    opp?: number;\n  };\n  currentCounter: {\n    player: {\n      top: number;\n      jungle: number;\n      mid: number;\n      adc: number;\n      support: number;\n    };\n    opp: {\n      top: number;\n      jungle: number;\n      mid: number;\n      adc: number;\n      support: number;\n    };\n  };\n  currentScore: {\n    player?: number;\n    opp?: number;\n  };\n  selectedRole: Role;\n  isPlaceholder: boolean;\n  adviceTags: {\n    player: ChampionAdvice;\n    opp: ChampionAdvice;\n  };\n}\n\nexport interface DraftPlayer {\n  mainRole: Role;\n  championMastery: TierListRankings;\n}\n\nexport interface TierListRankings {\n  s: number[];\n  a: number[];\n  b: number[];\n  c: number[];\n  d: number[];\n}\n\nexport interface AllRolesTierList {\n  top: TierListRankings;\n  jungle: TierListRankings;\n  mid: TierListRankings;\n  adc: TierListRankings;\n  support: TierListRankings;\n}\n\nexport interface CompStyleStats {\n  engage: number;\n  pick: number;\n  protect: number;\n  siege: number;\n  split: number;\n}\n\nexport interface CompStyleData {\n  name: CompStyle;\n  primary: string[];\n  secondary: string[];\n}\n\nexport interface DraftFormData {\n  userIsRedSide: boolean;\n  patchVersion: PatchVersion;\n  useAiOpponent: boolean;\n  difficulty: DraftDifficulty;\n  useRandomTeam: boolean;\n}\n\nexport interface PatchData {\n  name: PatchName;\n  version: PatchVersion;\n  excludedChamps: number[];\n  patchTierList: AllRolesTierList;\n  // counters?: AllRolesTierList;\n  // synergies?: AllRolesTierList;\n}\n\nexport interface ChampionAdvice {\n  top: DraftAdviceTag[];\n  jungle: DraftAdviceTag[];\n  mid: DraftAdviceTag[];\n  adc: DraftAdviceTag[];\n  support: DraftAdviceTag[];\n}\n\nexport type CompStyle = 'engage' | 'pick' | 'protect' | 'siege' | 'split';\nexport type PatchName = 'MSI 24';\nexport type PatchVersion = 14.8;\nexport type DraftSortHeader = 'name' | 'mastery' | 'meta' | 'synergy' | 'counter';\nexport type DraftDifficulty = 'easy' | 'medium' | 'hard';\nexport type DraftAdviceTag = 'Counters Banned' | 'Recommended' | 'Counter Pick' | 'Not Recommended' | 'High Synergy';\n\nexport type LetterRank = 'S' | 'A' | 'B' | 'C' | 'D' | 'F' | 'N/A' | 'S+' | 'S-' | 'A+' | 'A-' | 'B+' | 'B-' | 'C+' | 'C-' | 'D+' | 'D-';\nexport type DraftPhase =\n  | 'Blue Ban 1'\n  | 'Blue Ban 2'\n  | 'Blue Ban 3'\n  | 'Blue Ban 4'\n  | 'Blue Ban 5'\n  | 'Blue Pick 1'\n  | 'Blue Pick 2'\n  | 'Blue Pick 3'\n  | 'Blue Pick 4'\n  | 'Blue Pick 5'\n  | 'Red Ban 1'\n  | 'Red Ban 2'\n  | 'Red Ban 3'\n  | 'Red Ban 4'\n  | 'Red Ban 5'\n  | 'Red Pick 1'\n  | 'Red Pick 2'\n  | 'Red Pick 3'\n  | 'Red Pick 4'\n  | 'Red Pick 5'\n  | 'Draft Complete';\n\nexport function getRoleFromFilter(role: Role | 'all' | undefined): Role | undefined {\n  return role === 'all' ? undefined : role;\n}\n\nexport enum TierValue {\n  S = 20,\n  A = 16,\n  B = 12,\n  C = 8,\n  D = 4,\n  F = 0,\n}\n\nexport const tierValues: { [key: string]: TierValue } = {\n  s: TierValue.S,\n  a: TierValue.A,\n  b: TierValue.B,\n  c: TierValue.C,\n  d: TierValue.D,\n  f: TierValue.F,\n};\n\nexport const redSidePickRounds = [8, 9, 12, 17, 20];\nexport const blueSidePickRounds = [7, 10, 11, 18, 19];\nexport const redSideBanRounds = [2, 4, 6, 13, 15];\nexport const blueSideBanRounds = [1, 3, 5, 14, 16];\n\nexport const emptyDraftBans: Partial<DraftChampion>[] = [\n  {\n    isPlaceholder: true,\n    name: '1',\n  },\n  {\n    isPlaceholder: true,\n    name: '2',\n  },\n  {\n    isPlaceholder: true,\n    name: '3',\n  },\n  {\n    isPlaceholder: true,\n    name: '4',\n  },\n  {\n    isPlaceholder: true,\n    name: '5',\n  },\n];\n\nexport const compStyleReqs: CompStyleData[] = [\n  {\n    name: 'engage',\n    primary: ['mobility.engage', 'dmg.aoe', 'crowdControl.impact', 'crowdControl.aoe'],\n    secondary: ['dmg.burst', 'crowdControl.singleTarget', 'defense.mitigation', 'defense.sustain'],\n  },\n  {\n    name: 'pick',\n    primary: ['dmg.burst', 'dmg.singleTarget', 'crowdControl.singleTarget', 'dmg.skirmish'],\n    secondary: ['crowdControl.range', 'mobility.engage', 'mobility.reposition', 'crowdControl.impact'],\n  },\n  {\n    name: 'protect',\n    primary: ['dmg.dps', 'support.peel', 'support.utility', 'support.zoneControl'],\n    secondary: ['dmg.singleTarget', 'dmg.aoe', 'defense.sustain', 'defense.mitigation'],\n  },\n  {\n    name: 'siege',\n    primary: ['dmg.poke', 'dmg.siege', 'support.zoneControl', 'support.peel'],\n    secondary: ['dmg.waveClear', 'support.utility', 'dmg.dps', 'dmg.aoe'],\n  },\n  {\n    name: 'split',\n    primary: ['dmg.splitPush', 'dmg.skirmish', 'dmg.waveClear', 'support.peel'],\n    secondary: ['support.zoneControl', 'mobility.reposition', 'dmg.siege', 'dmg.singleTarget'],\n  },\n];\n\nexport const emptyDraftPicks: Partial<DraftChampion>[] = [\n  {\n    isPlaceholder: true,\n    name: 'Top',\n  },\n  {\n    isPlaceholder: true,\n    name: 'Jungle',\n  },\n  {\n    isPlaceholder: true,\n    name: 'Mid',\n  },\n  {\n    isPlaceholder: true,\n    name: 'ADC',\n  },\n  {\n    isPlaceholder: true,\n    name: 'Support',\n  },\n];\n\nexport const defaultPlayerMasteries: DraftPlayer[] = [\n  {\n    mainRole: 'top',\n    championMastery: {\n      s: [47, 44],\n      a: [45, 46, 0],\n      b: [1, 2],\n      c: [],\n      d: [],\n    },\n  },\n  {\n    mainRole: 'jungle',\n    championMastery: {\n      s: [2, 8],\n      a: [9, 10],\n      b: [11, 12],\n      c: [13],\n      d: [],\n    },\n  },\n  {\n    mainRole: 'mid',\n    championMastery: {\n      s: [18, 17],\n      a: [20, 19],\n      b: [21, 22],\n      c: [28],\n      d: [],\n    },\n  },\n  {\n    mainRole: 'adc',\n    championMastery: {\n      s: [29, 30, 31],\n      a: [32],\n      b: [33, 34],\n      c: [],\n      d: [],\n    },\n  },\n  {\n    mainRole: 'support',\n    championMastery: {\n      s: [36, 37],\n      a: [38, 39],\n      b: [40, 41],\n      c: [53],\n      d: [],\n    },\n  },\n];\nexport const defaultOpponentMasteries: DraftPlayer[] = [\n  {\n    mainRole: 'top',\n    championMastery: {\n      s: [1, 2],\n      a: [45, 46, 0],\n      b: [47, 44],\n      c: [],\n      d: [],\n    },\n  },\n  {\n    mainRole: 'jungle',\n    championMastery: {\n      s: [9, 10],\n      a: [11],\n      b: [12],\n      c: [13, 2, 8],\n      d: [],\n    },\n  },\n  {\n    mainRole: 'mid',\n    championMastery: {\n      s: [21, 22],\n      a: [20, 19],\n      b: [18, 17],\n      c: [],\n      d: [],\n    },\n  },\n  {\n    mainRole: 'adc',\n    championMastery: {\n      s: [33, 34, 35],\n      a: [32],\n      b: [29, 30, 31],\n      c: [],\n      d: [],\n    },\n  },\n  {\n    mainRole: 'support',\n    championMastery: {\n      s: [53],\n      a: [39, 40],\n      b: [40, 38],\n      c: [36, 37],\n      d: [],\n    },\n  },\n];\n",
            "properties": [
                {
                    "name": "engage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "pick",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 63
                },
                {
                    "name": "protect",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "siege",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 65
                },
                {
                    "name": "split",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 66
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "DraftChampion",
            "id": "interface-DraftChampion-dd4b6cc36a00c48ef7afc5890a71303cefaac696b94090a365755c09225758590aa7c83352e024328b11e4860d88645fc0e5cc73c22ab1a2f6aa5a395999c1ee",
            "file": "src/app/moba/draft/draft.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Champion } from '../champion/champion.model';\nimport { Role } from '../player/player.model';\n\nexport interface DraftChampion extends Champion {\n  metaStrength: [number, number, number, number, number];\n  playerMastery: [number, number, number, number, number];\n  opponentMastery: [number, number, number, number, number];\n  currentSynergy: {\n    player?: number;\n    opp?: number;\n  };\n  currentCounter: {\n    player: {\n      top: number;\n      jungle: number;\n      mid: number;\n      adc: number;\n      support: number;\n    };\n    opp: {\n      top: number;\n      jungle: number;\n      mid: number;\n      adc: number;\n      support: number;\n    };\n  };\n  currentScore: {\n    player?: number;\n    opp?: number;\n  };\n  selectedRole: Role;\n  isPlaceholder: boolean;\n  adviceTags: {\n    player: ChampionAdvice;\n    opp: ChampionAdvice;\n  };\n}\n\nexport interface DraftPlayer {\n  mainRole: Role;\n  championMastery: TierListRankings;\n}\n\nexport interface TierListRankings {\n  s: number[];\n  a: number[];\n  b: number[];\n  c: number[];\n  d: number[];\n}\n\nexport interface AllRolesTierList {\n  top: TierListRankings;\n  jungle: TierListRankings;\n  mid: TierListRankings;\n  adc: TierListRankings;\n  support: TierListRankings;\n}\n\nexport interface CompStyleStats {\n  engage: number;\n  pick: number;\n  protect: number;\n  siege: number;\n  split: number;\n}\n\nexport interface CompStyleData {\n  name: CompStyle;\n  primary: string[];\n  secondary: string[];\n}\n\nexport interface DraftFormData {\n  userIsRedSide: boolean;\n  patchVersion: PatchVersion;\n  useAiOpponent: boolean;\n  difficulty: DraftDifficulty;\n  useRandomTeam: boolean;\n}\n\nexport interface PatchData {\n  name: PatchName;\n  version: PatchVersion;\n  excludedChamps: number[];\n  patchTierList: AllRolesTierList;\n  // counters?: AllRolesTierList;\n  // synergies?: AllRolesTierList;\n}\n\nexport interface ChampionAdvice {\n  top: DraftAdviceTag[];\n  jungle: DraftAdviceTag[];\n  mid: DraftAdviceTag[];\n  adc: DraftAdviceTag[];\n  support: DraftAdviceTag[];\n}\n\nexport type CompStyle = 'engage' | 'pick' | 'protect' | 'siege' | 'split';\nexport type PatchName = 'MSI 24';\nexport type PatchVersion = 14.8;\nexport type DraftSortHeader = 'name' | 'mastery' | 'meta' | 'synergy' | 'counter';\nexport type DraftDifficulty = 'easy' | 'medium' | 'hard';\nexport type DraftAdviceTag = 'Counters Banned' | 'Recommended' | 'Counter Pick' | 'Not Recommended' | 'High Synergy';\n\nexport type LetterRank = 'S' | 'A' | 'B' | 'C' | 'D' | 'F' | 'N/A' | 'S+' | 'S-' | 'A+' | 'A-' | 'B+' | 'B-' | 'C+' | 'C-' | 'D+' | 'D-';\nexport type DraftPhase =\n  | 'Blue Ban 1'\n  | 'Blue Ban 2'\n  | 'Blue Ban 3'\n  | 'Blue Ban 4'\n  | 'Blue Ban 5'\n  | 'Blue Pick 1'\n  | 'Blue Pick 2'\n  | 'Blue Pick 3'\n  | 'Blue Pick 4'\n  | 'Blue Pick 5'\n  | 'Red Ban 1'\n  | 'Red Ban 2'\n  | 'Red Ban 3'\n  | 'Red Ban 4'\n  | 'Red Ban 5'\n  | 'Red Pick 1'\n  | 'Red Pick 2'\n  | 'Red Pick 3'\n  | 'Red Pick 4'\n  | 'Red Pick 5'\n  | 'Draft Complete';\n\nexport function getRoleFromFilter(role: Role | 'all' | undefined): Role | undefined {\n  return role === 'all' ? undefined : role;\n}\n\nexport enum TierValue {\n  S = 20,\n  A = 16,\n  B = 12,\n  C = 8,\n  D = 4,\n  F = 0,\n}\n\nexport const tierValues: { [key: string]: TierValue } = {\n  s: TierValue.S,\n  a: TierValue.A,\n  b: TierValue.B,\n  c: TierValue.C,\n  d: TierValue.D,\n  f: TierValue.F,\n};\n\nexport const redSidePickRounds = [8, 9, 12, 17, 20];\nexport const blueSidePickRounds = [7, 10, 11, 18, 19];\nexport const redSideBanRounds = [2, 4, 6, 13, 15];\nexport const blueSideBanRounds = [1, 3, 5, 14, 16];\n\nexport const emptyDraftBans: Partial<DraftChampion>[] = [\n  {\n    isPlaceholder: true,\n    name: '1',\n  },\n  {\n    isPlaceholder: true,\n    name: '2',\n  },\n  {\n    isPlaceholder: true,\n    name: '3',\n  },\n  {\n    isPlaceholder: true,\n    name: '4',\n  },\n  {\n    isPlaceholder: true,\n    name: '5',\n  },\n];\n\nexport const compStyleReqs: CompStyleData[] = [\n  {\n    name: 'engage',\n    primary: ['mobility.engage', 'dmg.aoe', 'crowdControl.impact', 'crowdControl.aoe'],\n    secondary: ['dmg.burst', 'crowdControl.singleTarget', 'defense.mitigation', 'defense.sustain'],\n  },\n  {\n    name: 'pick',\n    primary: ['dmg.burst', 'dmg.singleTarget', 'crowdControl.singleTarget', 'dmg.skirmish'],\n    secondary: ['crowdControl.range', 'mobility.engage', 'mobility.reposition', 'crowdControl.impact'],\n  },\n  {\n    name: 'protect',\n    primary: ['dmg.dps', 'support.peel', 'support.utility', 'support.zoneControl'],\n    secondary: ['dmg.singleTarget', 'dmg.aoe', 'defense.sustain', 'defense.mitigation'],\n  },\n  {\n    name: 'siege',\n    primary: ['dmg.poke', 'dmg.siege', 'support.zoneControl', 'support.peel'],\n    secondary: ['dmg.waveClear', 'support.utility', 'dmg.dps', 'dmg.aoe'],\n  },\n  {\n    name: 'split',\n    primary: ['dmg.splitPush', 'dmg.skirmish', 'dmg.waveClear', 'support.peel'],\n    secondary: ['support.zoneControl', 'mobility.reposition', 'dmg.siege', 'dmg.singleTarget'],\n  },\n];\n\nexport const emptyDraftPicks: Partial<DraftChampion>[] = [\n  {\n    isPlaceholder: true,\n    name: 'Top',\n  },\n  {\n    isPlaceholder: true,\n    name: 'Jungle',\n  },\n  {\n    isPlaceholder: true,\n    name: 'Mid',\n  },\n  {\n    isPlaceholder: true,\n    name: 'ADC',\n  },\n  {\n    isPlaceholder: true,\n    name: 'Support',\n  },\n];\n\nexport const defaultPlayerMasteries: DraftPlayer[] = [\n  {\n    mainRole: 'top',\n    championMastery: {\n      s: [47, 44],\n      a: [45, 46, 0],\n      b: [1, 2],\n      c: [],\n      d: [],\n    },\n  },\n  {\n    mainRole: 'jungle',\n    championMastery: {\n      s: [2, 8],\n      a: [9, 10],\n      b: [11, 12],\n      c: [13],\n      d: [],\n    },\n  },\n  {\n    mainRole: 'mid',\n    championMastery: {\n      s: [18, 17],\n      a: [20, 19],\n      b: [21, 22],\n      c: [28],\n      d: [],\n    },\n  },\n  {\n    mainRole: 'adc',\n    championMastery: {\n      s: [29, 30, 31],\n      a: [32],\n      b: [33, 34],\n      c: [],\n      d: [],\n    },\n  },\n  {\n    mainRole: 'support',\n    championMastery: {\n      s: [36, 37],\n      a: [38, 39],\n      b: [40, 41],\n      c: [53],\n      d: [],\n    },\n  },\n];\nexport const defaultOpponentMasteries: DraftPlayer[] = [\n  {\n    mainRole: 'top',\n    championMastery: {\n      s: [1, 2],\n      a: [45, 46, 0],\n      b: [47, 44],\n      c: [],\n      d: [],\n    },\n  },\n  {\n    mainRole: 'jungle',\n    championMastery: {\n      s: [9, 10],\n      a: [11],\n      b: [12],\n      c: [13, 2, 8],\n      d: [],\n    },\n  },\n  {\n    mainRole: 'mid',\n    championMastery: {\n      s: [21, 22],\n      a: [20, 19],\n      b: [18, 17],\n      c: [],\n      d: [],\n    },\n  },\n  {\n    mainRole: 'adc',\n    championMastery: {\n      s: [33, 34, 35],\n      a: [32],\n      b: [29, 30, 31],\n      c: [],\n      d: [],\n    },\n  },\n  {\n    mainRole: 'support',\n    championMastery: {\n      s: [53],\n      a: [39, 40],\n      b: [40, 38],\n      c: [36, 37],\n      d: [],\n    },\n  },\n];\n",
            "properties": [
                {
                    "name": "adviceTags",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "currentCounter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "currentScore",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "currentSynergy",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "isPlaceholder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "metaStrength",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[number, number, number, number, number]",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "opponentMastery",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[number, number, number, number, number]",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "playerMastery",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[number, number, number, number, number]",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "selectedRole",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Role",
                    "optional": false,
                    "description": "",
                    "line": 32
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [
                "Champion"
            ]
        },
        {
            "name": "DraftFormData",
            "id": "interface-DraftFormData-dd4b6cc36a00c48ef7afc5890a71303cefaac696b94090a365755c09225758590aa7c83352e024328b11e4860d88645fc0e5cc73c22ab1a2f6aa5a395999c1ee",
            "file": "src/app/moba/draft/draft.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Champion } from '../champion/champion.model';\nimport { Role } from '../player/player.model';\n\nexport interface DraftChampion extends Champion {\n  metaStrength: [number, number, number, number, number];\n  playerMastery: [number, number, number, number, number];\n  opponentMastery: [number, number, number, number, number];\n  currentSynergy: {\n    player?: number;\n    opp?: number;\n  };\n  currentCounter: {\n    player: {\n      top: number;\n      jungle: number;\n      mid: number;\n      adc: number;\n      support: number;\n    };\n    opp: {\n      top: number;\n      jungle: number;\n      mid: number;\n      adc: number;\n      support: number;\n    };\n  };\n  currentScore: {\n    player?: number;\n    opp?: number;\n  };\n  selectedRole: Role;\n  isPlaceholder: boolean;\n  adviceTags: {\n    player: ChampionAdvice;\n    opp: ChampionAdvice;\n  };\n}\n\nexport interface DraftPlayer {\n  mainRole: Role;\n  championMastery: TierListRankings;\n}\n\nexport interface TierListRankings {\n  s: number[];\n  a: number[];\n  b: number[];\n  c: number[];\n  d: number[];\n}\n\nexport interface AllRolesTierList {\n  top: TierListRankings;\n  jungle: TierListRankings;\n  mid: TierListRankings;\n  adc: TierListRankings;\n  support: TierListRankings;\n}\n\nexport interface CompStyleStats {\n  engage: number;\n  pick: number;\n  protect: number;\n  siege: number;\n  split: number;\n}\n\nexport interface CompStyleData {\n  name: CompStyle;\n  primary: string[];\n  secondary: string[];\n}\n\nexport interface DraftFormData {\n  userIsRedSide: boolean;\n  patchVersion: PatchVersion;\n  useAiOpponent: boolean;\n  difficulty: DraftDifficulty;\n  useRandomTeam: boolean;\n}\n\nexport interface PatchData {\n  name: PatchName;\n  version: PatchVersion;\n  excludedChamps: number[];\n  patchTierList: AllRolesTierList;\n  // counters?: AllRolesTierList;\n  // synergies?: AllRolesTierList;\n}\n\nexport interface ChampionAdvice {\n  top: DraftAdviceTag[];\n  jungle: DraftAdviceTag[];\n  mid: DraftAdviceTag[];\n  adc: DraftAdviceTag[];\n  support: DraftAdviceTag[];\n}\n\nexport type CompStyle = 'engage' | 'pick' | 'protect' | 'siege' | 'split';\nexport type PatchName = 'MSI 24';\nexport type PatchVersion = 14.8;\nexport type DraftSortHeader = 'name' | 'mastery' | 'meta' | 'synergy' | 'counter';\nexport type DraftDifficulty = 'easy' | 'medium' | 'hard';\nexport type DraftAdviceTag = 'Counters Banned' | 'Recommended' | 'Counter Pick' | 'Not Recommended' | 'High Synergy';\n\nexport type LetterRank = 'S' | 'A' | 'B' | 'C' | 'D' | 'F' | 'N/A' | 'S+' | 'S-' | 'A+' | 'A-' | 'B+' | 'B-' | 'C+' | 'C-' | 'D+' | 'D-';\nexport type DraftPhase =\n  | 'Blue Ban 1'\n  | 'Blue Ban 2'\n  | 'Blue Ban 3'\n  | 'Blue Ban 4'\n  | 'Blue Ban 5'\n  | 'Blue Pick 1'\n  | 'Blue Pick 2'\n  | 'Blue Pick 3'\n  | 'Blue Pick 4'\n  | 'Blue Pick 5'\n  | 'Red Ban 1'\n  | 'Red Ban 2'\n  | 'Red Ban 3'\n  | 'Red Ban 4'\n  | 'Red Ban 5'\n  | 'Red Pick 1'\n  | 'Red Pick 2'\n  | 'Red Pick 3'\n  | 'Red Pick 4'\n  | 'Red Pick 5'\n  | 'Draft Complete';\n\nexport function getRoleFromFilter(role: Role | 'all' | undefined): Role | undefined {\n  return role === 'all' ? undefined : role;\n}\n\nexport enum TierValue {\n  S = 20,\n  A = 16,\n  B = 12,\n  C = 8,\n  D = 4,\n  F = 0,\n}\n\nexport const tierValues: { [key: string]: TierValue } = {\n  s: TierValue.S,\n  a: TierValue.A,\n  b: TierValue.B,\n  c: TierValue.C,\n  d: TierValue.D,\n  f: TierValue.F,\n};\n\nexport const redSidePickRounds = [8, 9, 12, 17, 20];\nexport const blueSidePickRounds = [7, 10, 11, 18, 19];\nexport const redSideBanRounds = [2, 4, 6, 13, 15];\nexport const blueSideBanRounds = [1, 3, 5, 14, 16];\n\nexport const emptyDraftBans: Partial<DraftChampion>[] = [\n  {\n    isPlaceholder: true,\n    name: '1',\n  },\n  {\n    isPlaceholder: true,\n    name: '2',\n  },\n  {\n    isPlaceholder: true,\n    name: '3',\n  },\n  {\n    isPlaceholder: true,\n    name: '4',\n  },\n  {\n    isPlaceholder: true,\n    name: '5',\n  },\n];\n\nexport const compStyleReqs: CompStyleData[] = [\n  {\n    name: 'engage',\n    primary: ['mobility.engage', 'dmg.aoe', 'crowdControl.impact', 'crowdControl.aoe'],\n    secondary: ['dmg.burst', 'crowdControl.singleTarget', 'defense.mitigation', 'defense.sustain'],\n  },\n  {\n    name: 'pick',\n    primary: ['dmg.burst', 'dmg.singleTarget', 'crowdControl.singleTarget', 'dmg.skirmish'],\n    secondary: ['crowdControl.range', 'mobility.engage', 'mobility.reposition', 'crowdControl.impact'],\n  },\n  {\n    name: 'protect',\n    primary: ['dmg.dps', 'support.peel', 'support.utility', 'support.zoneControl'],\n    secondary: ['dmg.singleTarget', 'dmg.aoe', 'defense.sustain', 'defense.mitigation'],\n  },\n  {\n    name: 'siege',\n    primary: ['dmg.poke', 'dmg.siege', 'support.zoneControl', 'support.peel'],\n    secondary: ['dmg.waveClear', 'support.utility', 'dmg.dps', 'dmg.aoe'],\n  },\n  {\n    name: 'split',\n    primary: ['dmg.splitPush', 'dmg.skirmish', 'dmg.waveClear', 'support.peel'],\n    secondary: ['support.zoneControl', 'mobility.reposition', 'dmg.siege', 'dmg.singleTarget'],\n  },\n];\n\nexport const emptyDraftPicks: Partial<DraftChampion>[] = [\n  {\n    isPlaceholder: true,\n    name: 'Top',\n  },\n  {\n    isPlaceholder: true,\n    name: 'Jungle',\n  },\n  {\n    isPlaceholder: true,\n    name: 'Mid',\n  },\n  {\n    isPlaceholder: true,\n    name: 'ADC',\n  },\n  {\n    isPlaceholder: true,\n    name: 'Support',\n  },\n];\n\nexport const defaultPlayerMasteries: DraftPlayer[] = [\n  {\n    mainRole: 'top',\n    championMastery: {\n      s: [47, 44],\n      a: [45, 46, 0],\n      b: [1, 2],\n      c: [],\n      d: [],\n    },\n  },\n  {\n    mainRole: 'jungle',\n    championMastery: {\n      s: [2, 8],\n      a: [9, 10],\n      b: [11, 12],\n      c: [13],\n      d: [],\n    },\n  },\n  {\n    mainRole: 'mid',\n    championMastery: {\n      s: [18, 17],\n      a: [20, 19],\n      b: [21, 22],\n      c: [28],\n      d: [],\n    },\n  },\n  {\n    mainRole: 'adc',\n    championMastery: {\n      s: [29, 30, 31],\n      a: [32],\n      b: [33, 34],\n      c: [],\n      d: [],\n    },\n  },\n  {\n    mainRole: 'support',\n    championMastery: {\n      s: [36, 37],\n      a: [38, 39],\n      b: [40, 41],\n      c: [53],\n      d: [],\n    },\n  },\n];\nexport const defaultOpponentMasteries: DraftPlayer[] = [\n  {\n    mainRole: 'top',\n    championMastery: {\n      s: [1, 2],\n      a: [45, 46, 0],\n      b: [47, 44],\n      c: [],\n      d: [],\n    },\n  },\n  {\n    mainRole: 'jungle',\n    championMastery: {\n      s: [9, 10],\n      a: [11],\n      b: [12],\n      c: [13, 2, 8],\n      d: [],\n    },\n  },\n  {\n    mainRole: 'mid',\n    championMastery: {\n      s: [21, 22],\n      a: [20, 19],\n      b: [18, 17],\n      c: [],\n      d: [],\n    },\n  },\n  {\n    mainRole: 'adc',\n    championMastery: {\n      s: [33, 34, 35],\n      a: [32],\n      b: [29, 30, 31],\n      c: [],\n      d: [],\n    },\n  },\n  {\n    mainRole: 'support',\n    championMastery: {\n      s: [53],\n      a: [39, 40],\n      b: [40, 38],\n      c: [36, 37],\n      d: [],\n    },\n  },\n];\n",
            "properties": [
                {
                    "name": "difficulty",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DraftDifficulty",
                    "optional": false,
                    "description": "",
                    "line": 79
                },
                {
                    "name": "patchVersion",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PatchVersion",
                    "optional": false,
                    "description": "",
                    "line": 77
                },
                {
                    "name": "useAiOpponent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 78
                },
                {
                    "name": "useRandomTeam",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 80
                },
                {
                    "name": "userIsRedSide",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 76
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "DraftPlayer",
            "id": "interface-DraftPlayer-dd4b6cc36a00c48ef7afc5890a71303cefaac696b94090a365755c09225758590aa7c83352e024328b11e4860d88645fc0e5cc73c22ab1a2f6aa5a395999c1ee",
            "file": "src/app/moba/draft/draft.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Champion } from '../champion/champion.model';\nimport { Role } from '../player/player.model';\n\nexport interface DraftChampion extends Champion {\n  metaStrength: [number, number, number, number, number];\n  playerMastery: [number, number, number, number, number];\n  opponentMastery: [number, number, number, number, number];\n  currentSynergy: {\n    player?: number;\n    opp?: number;\n  };\n  currentCounter: {\n    player: {\n      top: number;\n      jungle: number;\n      mid: number;\n      adc: number;\n      support: number;\n    };\n    opp: {\n      top: number;\n      jungle: number;\n      mid: number;\n      adc: number;\n      support: number;\n    };\n  };\n  currentScore: {\n    player?: number;\n    opp?: number;\n  };\n  selectedRole: Role;\n  isPlaceholder: boolean;\n  adviceTags: {\n    player: ChampionAdvice;\n    opp: ChampionAdvice;\n  };\n}\n\nexport interface DraftPlayer {\n  mainRole: Role;\n  championMastery: TierListRankings;\n}\n\nexport interface TierListRankings {\n  s: number[];\n  a: number[];\n  b: number[];\n  c: number[];\n  d: number[];\n}\n\nexport interface AllRolesTierList {\n  top: TierListRankings;\n  jungle: TierListRankings;\n  mid: TierListRankings;\n  adc: TierListRankings;\n  support: TierListRankings;\n}\n\nexport interface CompStyleStats {\n  engage: number;\n  pick: number;\n  protect: number;\n  siege: number;\n  split: number;\n}\n\nexport interface CompStyleData {\n  name: CompStyle;\n  primary: string[];\n  secondary: string[];\n}\n\nexport interface DraftFormData {\n  userIsRedSide: boolean;\n  patchVersion: PatchVersion;\n  useAiOpponent: boolean;\n  difficulty: DraftDifficulty;\n  useRandomTeam: boolean;\n}\n\nexport interface PatchData {\n  name: PatchName;\n  version: PatchVersion;\n  excludedChamps: number[];\n  patchTierList: AllRolesTierList;\n  // counters?: AllRolesTierList;\n  // synergies?: AllRolesTierList;\n}\n\nexport interface ChampionAdvice {\n  top: DraftAdviceTag[];\n  jungle: DraftAdviceTag[];\n  mid: DraftAdviceTag[];\n  adc: DraftAdviceTag[];\n  support: DraftAdviceTag[];\n}\n\nexport type CompStyle = 'engage' | 'pick' | 'protect' | 'siege' | 'split';\nexport type PatchName = 'MSI 24';\nexport type PatchVersion = 14.8;\nexport type DraftSortHeader = 'name' | 'mastery' | 'meta' | 'synergy' | 'counter';\nexport type DraftDifficulty = 'easy' | 'medium' | 'hard';\nexport type DraftAdviceTag = 'Counters Banned' | 'Recommended' | 'Counter Pick' | 'Not Recommended' | 'High Synergy';\n\nexport type LetterRank = 'S' | 'A' | 'B' | 'C' | 'D' | 'F' | 'N/A' | 'S+' | 'S-' | 'A+' | 'A-' | 'B+' | 'B-' | 'C+' | 'C-' | 'D+' | 'D-';\nexport type DraftPhase =\n  | 'Blue Ban 1'\n  | 'Blue Ban 2'\n  | 'Blue Ban 3'\n  | 'Blue Ban 4'\n  | 'Blue Ban 5'\n  | 'Blue Pick 1'\n  | 'Blue Pick 2'\n  | 'Blue Pick 3'\n  | 'Blue Pick 4'\n  | 'Blue Pick 5'\n  | 'Red Ban 1'\n  | 'Red Ban 2'\n  | 'Red Ban 3'\n  | 'Red Ban 4'\n  | 'Red Ban 5'\n  | 'Red Pick 1'\n  | 'Red Pick 2'\n  | 'Red Pick 3'\n  | 'Red Pick 4'\n  | 'Red Pick 5'\n  | 'Draft Complete';\n\nexport function getRoleFromFilter(role: Role | 'all' | undefined): Role | undefined {\n  return role === 'all' ? undefined : role;\n}\n\nexport enum TierValue {\n  S = 20,\n  A = 16,\n  B = 12,\n  C = 8,\n  D = 4,\n  F = 0,\n}\n\nexport const tierValues: { [key: string]: TierValue } = {\n  s: TierValue.S,\n  a: TierValue.A,\n  b: TierValue.B,\n  c: TierValue.C,\n  d: TierValue.D,\n  f: TierValue.F,\n};\n\nexport const redSidePickRounds = [8, 9, 12, 17, 20];\nexport const blueSidePickRounds = [7, 10, 11, 18, 19];\nexport const redSideBanRounds = [2, 4, 6, 13, 15];\nexport const blueSideBanRounds = [1, 3, 5, 14, 16];\n\nexport const emptyDraftBans: Partial<DraftChampion>[] = [\n  {\n    isPlaceholder: true,\n    name: '1',\n  },\n  {\n    isPlaceholder: true,\n    name: '2',\n  },\n  {\n    isPlaceholder: true,\n    name: '3',\n  },\n  {\n    isPlaceholder: true,\n    name: '4',\n  },\n  {\n    isPlaceholder: true,\n    name: '5',\n  },\n];\n\nexport const compStyleReqs: CompStyleData[] = [\n  {\n    name: 'engage',\n    primary: ['mobility.engage', 'dmg.aoe', 'crowdControl.impact', 'crowdControl.aoe'],\n    secondary: ['dmg.burst', 'crowdControl.singleTarget', 'defense.mitigation', 'defense.sustain'],\n  },\n  {\n    name: 'pick',\n    primary: ['dmg.burst', 'dmg.singleTarget', 'crowdControl.singleTarget', 'dmg.skirmish'],\n    secondary: ['crowdControl.range', 'mobility.engage', 'mobility.reposition', 'crowdControl.impact'],\n  },\n  {\n    name: 'protect',\n    primary: ['dmg.dps', 'support.peel', 'support.utility', 'support.zoneControl'],\n    secondary: ['dmg.singleTarget', 'dmg.aoe', 'defense.sustain', 'defense.mitigation'],\n  },\n  {\n    name: 'siege',\n    primary: ['dmg.poke', 'dmg.siege', 'support.zoneControl', 'support.peel'],\n    secondary: ['dmg.waveClear', 'support.utility', 'dmg.dps', 'dmg.aoe'],\n  },\n  {\n    name: 'split',\n    primary: ['dmg.splitPush', 'dmg.skirmish', 'dmg.waveClear', 'support.peel'],\n    secondary: ['support.zoneControl', 'mobility.reposition', 'dmg.siege', 'dmg.singleTarget'],\n  },\n];\n\nexport const emptyDraftPicks: Partial<DraftChampion>[] = [\n  {\n    isPlaceholder: true,\n    name: 'Top',\n  },\n  {\n    isPlaceholder: true,\n    name: 'Jungle',\n  },\n  {\n    isPlaceholder: true,\n    name: 'Mid',\n  },\n  {\n    isPlaceholder: true,\n    name: 'ADC',\n  },\n  {\n    isPlaceholder: true,\n    name: 'Support',\n  },\n];\n\nexport const defaultPlayerMasteries: DraftPlayer[] = [\n  {\n    mainRole: 'top',\n    championMastery: {\n      s: [47, 44],\n      a: [45, 46, 0],\n      b: [1, 2],\n      c: [],\n      d: [],\n    },\n  },\n  {\n    mainRole: 'jungle',\n    championMastery: {\n      s: [2, 8],\n      a: [9, 10],\n      b: [11, 12],\n      c: [13],\n      d: [],\n    },\n  },\n  {\n    mainRole: 'mid',\n    championMastery: {\n      s: [18, 17],\n      a: [20, 19],\n      b: [21, 22],\n      c: [28],\n      d: [],\n    },\n  },\n  {\n    mainRole: 'adc',\n    championMastery: {\n      s: [29, 30, 31],\n      a: [32],\n      b: [33, 34],\n      c: [],\n      d: [],\n    },\n  },\n  {\n    mainRole: 'support',\n    championMastery: {\n      s: [36, 37],\n      a: [38, 39],\n      b: [40, 41],\n      c: [53],\n      d: [],\n    },\n  },\n];\nexport const defaultOpponentMasteries: DraftPlayer[] = [\n  {\n    mainRole: 'top',\n    championMastery: {\n      s: [1, 2],\n      a: [45, 46, 0],\n      b: [47, 44],\n      c: [],\n      d: [],\n    },\n  },\n  {\n    mainRole: 'jungle',\n    championMastery: {\n      s: [9, 10],\n      a: [11],\n      b: [12],\n      c: [13, 2, 8],\n      d: [],\n    },\n  },\n  {\n    mainRole: 'mid',\n    championMastery: {\n      s: [21, 22],\n      a: [20, 19],\n      b: [18, 17],\n      c: [],\n      d: [],\n    },\n  },\n  {\n    mainRole: 'adc',\n    championMastery: {\n      s: [33, 34, 35],\n      a: [32],\n      b: [29, 30, 31],\n      c: [],\n      d: [],\n    },\n  },\n  {\n    mainRole: 'support',\n    championMastery: {\n      s: [53],\n      a: [39, 40],\n      b: [40, 38],\n      c: [36, 37],\n      d: [],\n    },\n  },\n];\n",
            "properties": [
                {
                    "name": "championMastery",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TierListRankings",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "mainRole",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Role",
                    "optional": false,
                    "description": "",
                    "line": 41
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "FirstName",
            "id": "interface-FirstName-7700061184915780794ed43a36a51c21eb649c545ebc8e4ac01d709e68d3c28ff7eaf96e80b8fe8f10e60edac810bcae1aaf8df7eb85d3def293f21eeed0a32b",
            "file": "src/app/core/services/firestore.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Timestamp } from '@firebase/firestore-types';\r\nimport { Roster } from '../../models/roster.model';\r\n\r\nexport interface User {\r\n  uid: string;\r\n  email: string | null;\r\n  displayName?: string | null;\r\n  savedRosters?: Roster[];\r\n  submittedRosters?: Roster[];\r\n}\r\n\r\nexport interface FirstName {\r\n  name: string;\r\n  duplicate: boolean;\r\n  randomNum: {\r\n    1: number;\r\n    2: number;\r\n    3: number;\r\n    4: number;\r\n    5: number;\r\n  };\r\n  timestamp: Timestamp;\r\n  usages: string[];\r\n  gender: string;\r\n}\r\n\r\nexport interface LastName {\r\n  name: string;\r\n  duplicate: boolean;\r\n  randomNum: {\r\n    1: number;\r\n    2: number;\r\n    3: number;\r\n    4: number;\r\n    5: number;\r\n  };\r\n  timestamp: Timestamp;\r\n  usages: string[];\r\n  alphabeticalId: number;\r\n}\r\n\r\nexport type Name = FirstName | LastName;\r\n\r\nexport function isFirstName(x: FirstName): x is FirstName {\r\n  return (x as FirstName).gender !== undefined;\r\n}\r\n",
            "properties": [
                {
                    "name": "duplicate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "gender",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "randomNum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "timestamp",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Timestamp",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "usages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "GamerTag",
            "id": "interface-GamerTag-c4eacd75df6cffebda8578af56486186acf2da81c1e5fad3cf4f6d89380a4a74f0e46d5d76723772b4ec81f67c981743fee3294763633bb82fd59d543106977b",
            "file": "src/app/moba/player/player.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Nation } from 'app/models/nation.model';\r\nimport { Champion } from '../champion/champion.model';\r\n\r\nexport interface Player {\r\n  id: number;\r\n  age: number;\r\n  gamerTag: GamerTag;\r\n  mainRole: Role;\r\n  offRoles: Role[];\r\n  gameStateStrength: GameState;\r\n  playStyle: PlayStyle;\r\n  nationality: Nation;\r\n  currentRoleRating: number;\r\n  attributes: MobaAttributes;\r\n  champMains: Champion[];\r\n  currentRole?: Role;\r\n}\r\n\r\nexport interface MobaAttributes {\r\n  mechanics: MechanicAttributes;\r\n  intangible: IntangibleAttributes;\r\n  macro: MacroAttributes;\r\n}\r\n\r\nexport interface MechanicAttributes {\r\n  farming: number;\r\n  apm: number;\r\n  dueling: number;\r\n  team_fighting: number;\r\n}\r\n\r\nexport interface IntangibleAttributes {\r\n  flexibility: number;\r\n  winning: number;\r\n  composure: number;\r\n  consistency: number;\r\n  in_game_leader: number;\r\n  game_knowledge: number;\r\n}\r\n\r\nexport interface MacroAttributes {\r\n  pathing: number;\r\n  vision_control: number;\r\n  map_positioning: number;\r\n  neutral_control: number;\r\n}\r\n\r\nexport interface GamerTag {\r\n  id: number;\r\n  name: string;\r\n  nationality: string;\r\n}\r\n\r\nexport const rolePriority: { [key: string]: number } = {\r\n  top: 1,\r\n  jungle: 2,\r\n  mid: 3,\r\n  adc: 4,\r\n  support: 5,\r\n};\r\n\r\nexport const sortByMainRole = (players: Player[]): Player[] => {\r\n  return players.sort((a, b) => {\r\n    const aRolePriority = rolePriority[a.mainRole] || Infinity;\r\n    const bRolePriority = rolePriority[b.mainRole] || Infinity;\r\n\r\n    return aRolePriority - bRolePriority;\r\n  });\r\n};\r\n\r\nexport type Role = 'top' | 'jungle' | 'mid' | 'adc' | 'support';\r\nexport enum RoleIndex {\r\n  TOP,\r\n  JUNGLE,\r\n  MID,\r\n  ADC,\r\n  SUPPORT,\r\n}\r\nexport type FilterRole = Role | 'all';\r\nexport type GameState = 'early-game' | 'mid-game' | 'late-game';\r\nexport type PlayStyle =\r\n  | 'scaler'\r\n  | 'mechanical god'\r\n  | 'split-pusher'\r\n  | 'team-fighter'\r\n  | 'closer'\r\n  | 'flex god'\r\n  | 'macro-player'\r\n  | 'leader'\r\n  | 'baron stealer'\r\n  | 'prodigy'\r\n  | 'journeyman'\r\n  | 'specialist';\r\n\r\nexport const AllUniquePlayStyles: PlayStyle[] = [\r\n  'scaler',\r\n  'mechanical god',\r\n  'split-pusher',\r\n  'team-fighter',\r\n  'flex god',\r\n  'macro-player',\r\n  'leader',\r\n  'closer',\r\n  'baron stealer',\r\n];\r\nexport const AllRoles: Role[] = ['top', 'jungle', 'mid', 'adc', 'support'];\r\nexport function isRole(value: unknown): value is Role {\r\n  return typeof value === 'string' && AllRoles.includes(value as Role);\r\n}\r\nexport const AllGameStates: GameState[] = ['early-game', 'mid-game', 'late-game'];\r\n\r\nexport const positions: { name: Role; url: string }[] = [\r\n  {\r\n    name: 'top',\r\n    url: 'assets/images/role_icons/top.webp',\r\n  },\r\n  {\r\n    name: 'jungle',\r\n    url: 'assets/images/role_icons/jungle.webp',\r\n  },\r\n  {\r\n    name: 'mid',\r\n    url: 'assets/images/role_icons/mid.webp',\r\n  },\r\n  {\r\n    name: 'adc',\r\n    url: 'assets/images/role_icons/adc.webp',\r\n  },\r\n  {\r\n    name: 'support',\r\n    url: 'assets/images/role_icons/support.webp',\r\n  },\r\n];\r\n\r\nexport const positionFilters: { name: Role | 'all'; url: string }[] = Array.from([\r\n  {\r\n    name: 'all',\r\n    url: 'assets/images/role_icons/all.webp',\r\n  },\r\n  ...positions,\r\n]);\r\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "nationality",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 51
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "GameStateAttributes",
            "id": "interface-GameStateAttributes-bc99c23e13a4e8424a4ccc0a30b2a969de5bbf59898b570aca806e26fa626f6a82d8b0498491dad5f98cb6f3bffacf45c017d0f00a74ef9873fe435098f0f6f4",
            "file": "src/app/moba/champion/champion.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { AllRolesTierList } from '../draft/draft.model';\r\nimport { Role } from '../player/player.model';\r\n\r\nexport interface Champion {\r\n  id: number;\r\n  name: string;\r\n  roles: Role[];\r\n  gameStateAttributes: GameStateAttributes;\r\n  img: string;\r\n  dmgType: DamageType;\r\n  attributes: TypeAttributes;\r\n  // Use champion ids for synergies and counters\r\n  synergies: AllRolesTierList;\r\n  counters: AllRolesTierList;\r\n}\r\n\r\nexport interface GameStateAttributes {\r\n  early: number;\r\n  mid: number;\r\n  late: number;\r\n}\r\n\r\nexport interface TypeAttributes {\r\n  mobility: {\r\n    engage: boolean;\r\n    reposition: boolean;\r\n  };\r\n  dmg: {\r\n    aoe: boolean;\r\n    burst: boolean;\r\n    singleTarget: boolean;\r\n    skirmish: boolean;\r\n    dps: boolean;\r\n    poke: boolean;\r\n    siege: boolean;\r\n    waveClear: boolean;\r\n    splitPush: boolean;\r\n  };\r\n  crowdControl: {\r\n    impact: boolean;\r\n    aoe: boolean;\r\n    singleTarget: boolean;\r\n    ranged: boolean;\r\n  };\r\n  defense: {\r\n    mitigation: boolean;\r\n    sustain: boolean;\r\n  };\r\n  support: {\r\n    peel: boolean;\r\n    utility: boolean;\r\n    zoneControl: boolean;\r\n  };\r\n}\r\n\r\nexport type DamageType = 'high ad' | 'high ap' | 'high mix' | 'low ad' | 'low ap' | 'low mix' | 'utility';\r\n\r\nexport type Archetype =\r\n  | 'bruiser'\r\n  | 'tank'\r\n  | 'mage'\r\n  | 'assassin'\r\n  | 'enchanter'\r\n  | 'fighter'\r\n  | 'crit-marksman'\r\n  | 'lethality-marksman'\r\n  | 'terrainAbuser'\r\n  | 'split-pusher'\r\n  | 'immobile'\r\n  | 'mobile'\r\n  | 'lane-bully'\r\n  | 'aoe'\r\n  | 'duelist';\r\n\r\nexport type CompRole = 'hard-engage' | 'engage' | 'poke' | 'isolator' | 'anti-engage' | 'team-fight-burst' | 'team-fight-sustain' | 'carry';\r\n",
            "properties": [
                {
                    "name": "early",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "late",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "mid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "GkAttributes",
            "id": "interface-GkAttributes-91902ead7f4b19bc9f7c7d6aa86f0bdf84665cb6dde2326f664b4538755b6a6718c85f041635995bbe8d078734f15280a04159b3fe74528906fac499b95ea9f8",
            "file": "src/app/models/player-attributes.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface OutfieldAttributes {\r\n  [index: string]: number;\r\n  corners: number;\r\n  crossing: number;\r\n  dribbling: number;\r\n  finishing: number;\r\n  firstTouch: number;\r\n  freeKickTaking: number;\r\n  heading: number;\r\n  longShots: number;\r\n  longThrows: number;\r\n  marking: number;\r\n  passing: number;\r\n  penaltyTaking: number;\r\n  tackling: number;\r\n  technique: number;\r\n  aggression: number;\r\n  anticipation: number;\r\n  bravery: number;\r\n  composure: number;\r\n  concentration: number;\r\n  decisions: number;\r\n  determination: number;\r\n  flair: number;\r\n  leadership: number;\r\n  offTheBall: number;\r\n  positioning: number;\r\n  teamwork: number;\r\n  vision: number;\r\n  workRate: number;\r\n  acceleration: number;\r\n  agility: number;\r\n  balance: number;\r\n  jumpingReach: number;\r\n  naturalFitness: number;\r\n  pace: number;\r\n  staming: number;\r\n  strength: number;\r\n}\r\n\r\nexport interface GkAttributes {\r\n  [index: string]: number;\r\n  aerialReach: number;\r\n  commandOfArea: number;\r\n  communication: number;\r\n  eccentricity: number;\r\n  firstTouch: number;\r\n  handling: number;\r\n  kicking: number;\r\n  oneOnOnes: number;\r\n  passing: number;\r\n  punchingTendency: number;\r\n  reflexes: number;\r\n  rushingOutTendency: number;\r\n  throwing: number;\r\n  freeKickTaking: number;\r\n  penaltyTaking: number;\r\n  technique: number;\r\n  aggression: number;\r\n  anticipation: number;\r\n  bravery: number;\r\n  composure: number;\r\n  concentration: number;\r\n  decisions: number;\r\n  determination: number;\r\n  flair: number;\r\n  leadership: number;\r\n  offTheBall: number;\r\n  positioning: number;\r\n  teamwork: number;\r\n  vision: number;\r\n  workRate: number;\r\n  acceleration: number;\r\n  agility: number;\r\n  balance: number;\r\n  jumpingReach: number;\r\n  naturalFitness: number;\r\n  pace: number;\r\n  staming: number;\r\n  strength: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "acceleration",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 73
                },
                {
                    "name": "aerialReach",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "aggression",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "agility",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 74
                },
                {
                    "name": "anticipation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "balance",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 75
                },
                {
                    "name": "bravery",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "commandOfArea",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "communication",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "composure",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "concentration",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 63
                },
                {
                    "name": "decisions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "determination",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 65
                },
                {
                    "name": "eccentricity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "firstTouch",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "flair",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 66
                },
                {
                    "name": "freeKickTaking",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "handling",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "jumpingReach",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 76
                },
                {
                    "name": "kicking",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "leadership",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 67
                },
                {
                    "name": "naturalFitness",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 77
                },
                {
                    "name": "offTheBall",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 68
                },
                {
                    "name": "oneOnOnes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "pace",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 78
                },
                {
                    "name": "passing",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "penaltyTaking",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "positioning",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 69
                },
                {
                    "name": "punchingTendency",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "reflexes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "rushingOutTendency",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "staming",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 79
                },
                {
                    "name": "strength",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 80
                },
                {
                    "name": "teamwork",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 70
                },
                {
                    "name": "technique",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "throwing",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "vision",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 71
                },
                {
                    "name": "workRate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 72
                }
            ],
            "indexSignatures": [
                {
                    "id": "index-declaration-91902ead7f4b19bc9f7c7d6aa86f0bdf84665cb6dde2326f664b4538755b6a6718c85f041635995bbe8d078734f15280a04159b3fe74528906fac499b95ea9f8",
                    "args": [
                        {
                            "name": "index",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "number",
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "GroupTeam",
            "id": "interface-GroupTeam-5ac8536a854afa9cbb3a98589f451d95abf162e467ddb4aae45abed0651ef1a1f5bfd2236dbf3ed21c2b29a1369062ef32e18374308faaa4091d46d26ac26b47",
            "file": "src/app/models/nation.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Match, RegionName } from 'app/simulation/simulation.model';\r\nimport { Person } from './player.model';\r\nimport { getRandFloat } from '@shared/utils';\r\nimport * as nationsJson from 'assets/json/nations.json';\r\n\r\nexport const allNations = () => {\r\n  const newArr = nationsJson;\r\n  const nations: Nation[] = [];\r\n\r\n  Object.values(newArr).forEach(t => {\r\n    if (t.nations) {\r\n      nations.push(...(t.nations as Nation[]));\r\n    }\r\n  });\r\n\r\n  return nations;\r\n};\r\n\r\nexport interface Nation {\r\n  name: string;\r\n  logo: string;\r\n  region: RegionName;\r\n  firstNameUsages: string[];\r\n  lastNameUsages: string[];\r\n  mainLeagues: string[];\r\n  secondLeagues: string[];\r\n  thirdLeagues: string[];\r\n  rareLeagues: string[];\r\n  excludeLeagues: string[];\r\n  nationTier: string;\r\n  abbreviation: string;\r\n  canSoloHost32: boolean;\r\n  canSoloHost48: boolean;\r\n  cohosts32: string[];\r\n  cohosts48: string[];\r\n  triHosts48: string[];\r\n  quadHosts48: string[];\r\n  emoji: string;\r\n}\r\n\r\nexport interface GroupTeam {\r\n  name: string;\r\n  logo: string;\r\n  abbreviation: string;\r\n  region: RegionName;\r\n  matchesPlayed: number;\r\n  points: number;\r\n  gDiff: number;\r\n  gFor: number;\r\n  gOpp: number;\r\n  tier: string;\r\n  nationTier: string;\r\n  startingRating: {\r\n    att: number;\r\n    mid: number;\r\n    def: number;\r\n    pen: number;\r\n  };\r\n  dynamicRating: {\r\n    att: number;\r\n    mid: number;\r\n    def: number;\r\n    pen: number;\r\n  };\r\n  isBuffed: {\r\n    att: boolean;\r\n    mid: boolean;\r\n    def: boolean;\r\n    pen: boolean;\r\n  };\r\n  isDebuffed: {\r\n    att: boolean;\r\n    mid: boolean;\r\n    def: boolean;\r\n    pen: boolean;\r\n  };\r\n  currentBuffs: {\r\n    att: Buff[];\r\n    mid: Buff[];\r\n    def: Buff[];\r\n    pen: Buff[];\r\n  };\r\n  matchHistory: {\r\n    qualifiers: {\r\n      match: Match;\r\n      opp: GroupTeam;\r\n    }[];\r\n    group: {\r\n      match: Match;\r\n      opp: GroupTeam;\r\n    }[];\r\n    bracket: {\r\n      match: Match;\r\n      opp: GroupTeam;\r\n    }[];\r\n  };\r\n  rating: number;\r\n  ranking: number;\r\n  attRanking: number;\r\n  midRanking: number;\r\n  defRanking: number;\r\n  reportCard: {\r\n    grade: string | null;\r\n    tournamentFinish: string | null;\r\n    gradeStyle: string | null;\r\n    gradeSummary: string | null;\r\n  };\r\n  emoji: string;\r\n  homeTeam: boolean;\r\n  canSoloHost32: boolean;\r\n  canSoloHost48: boolean;\r\n  cohosts32: string[];\r\n  cohosts48: string[];\r\n  triHosts48: string[];\r\n  quadHosts48: string[];\r\n  coach?: Person;\r\n  pot?: number;\r\n  groupFinish?: string;\r\n}\r\n\r\nexport interface Buff {\r\n  numOfGames: number;\r\n  value: number;\r\n}\r\n\r\nexport function isNation(value: unknown): value is Nation {\r\n  return (<Nation>value).abbreviation !== undefined;\r\n}\r\n\r\nexport const baseTeam = (hostNations: GroupTeam[], nation: Nation): GroupTeam => {\r\n  // random nation values\r\n  let min = 0;\r\n  let max = 0;\r\n\r\n  switch (nation.nationTier) {\r\n    case 's':\r\n      min = 80;\r\n      max = 100;\r\n      break;\r\n    case 'a':\r\n      min = 70;\r\n      max = 95;\r\n      break;\r\n    case 'b':\r\n      min = 65;\r\n      max = 88;\r\n      break;\r\n    case 'c':\r\n      min = 60;\r\n      max = 88;\r\n      break;\r\n    case 'd':\r\n      min = 55;\r\n      max = 80;\r\n      break;\r\n    case 'e':\r\n      min = 40;\r\n      max = 78;\r\n      break;\r\n    case 'f':\r\n      min = 30;\r\n      max = 70;\r\n      break;\r\n    case 'g':\r\n      min = 25;\r\n      max = 55;\r\n      break;\r\n    default:\r\n      min = 25;\r\n      max = 55;\r\n      break;\r\n  }\r\n  const attRating = getRandFloat(min, max);\r\n  const midRating = getRandFloat(min, max);\r\n  const defRating = getRandFloat(min, max);\r\n  const penRating = getRandFloat(min, max);\r\n  return {\r\n    ...nation,\r\n    gDiff: 0,\r\n    gFor: 0,\r\n    gOpp: 0,\r\n    points: 0,\r\n    matchesPlayed: 0,\r\n    tier: nation.nationTier,\r\n    startingRating: {\r\n      att: attRating,\r\n      mid: midRating,\r\n      def: defRating,\r\n      pen: penRating,\r\n    },\r\n    dynamicRating: {\r\n      att: attRating,\r\n      mid: midRating,\r\n      def: defRating,\r\n      pen: penRating,\r\n    },\r\n    isBuffed: {\r\n      att: false,\r\n      mid: false,\r\n      def: false,\r\n      pen: false,\r\n    },\r\n    isDebuffed: {\r\n      att: false,\r\n      mid: false,\r\n      def: false,\r\n      pen: false,\r\n    },\r\n    currentBuffs: {\r\n      att: [],\r\n      mid: [],\r\n      def: [],\r\n      pen: [],\r\n    },\r\n    rating: (attRating + midRating + defRating) / 3,\r\n    ranking: 0,\r\n    attRanking: 0,\r\n    midRanking: 0,\r\n    defRanking: 0,\r\n    matchHistory: {\r\n      qualifiers: [],\r\n      group: [],\r\n      bracket: [],\r\n    },\r\n    reportCard: {\r\n      grade: null,\r\n      gradeStyle: null,\r\n      gradeSummary: null,\r\n      tournamentFinish: null,\r\n    },\r\n    homeTeam: hostNations.map(t => t.name).includes(nation.name) ? true : false,\r\n    region: nation.region as RegionName,\r\n  };\r\n};\r\n\r\nexport const defaultHost32: GroupTeam = {\r\n  name: 'Qatar',\r\n  abbreviation: 'qat',\r\n  logo: 'https://fmdataba.com/images/n/QAT.svg',\r\n  emoji: '🇶🇦',\r\n  region: RegionName.afc,\r\n  points: 0,\r\n  gDiff: 0,\r\n  gFor: 0,\r\n  gOpp: 0,\r\n  tier: 'j',\r\n  nationTier: 'e',\r\n  startingRating: {\r\n    att: 0,\r\n    mid: 0,\r\n    def: 0,\r\n    pen: 0,\r\n  },\r\n  dynamicRating: {\r\n    att: 0,\r\n    mid: 0,\r\n    def: 0,\r\n    pen: 0,\r\n  },\r\n  isBuffed: {\r\n    att: false,\r\n    mid: false,\r\n    def: false,\r\n    pen: false,\r\n  },\r\n  isDebuffed: {\r\n    att: false,\r\n    mid: false,\r\n    def: false,\r\n    pen: false,\r\n  },\r\n  currentBuffs: {\r\n    att: [],\r\n    mid: [],\r\n    def: [],\r\n    pen: [],\r\n  },\r\n  rating: 0,\r\n  matchesPlayed: 0,\r\n  matchHistory: {\r\n    qualifiers: [],\r\n    group: [],\r\n    bracket: [],\r\n  },\r\n  reportCard: {\r\n    grade: null,\r\n    gradeStyle: null,\r\n    gradeSummary: null,\r\n    tournamentFinish: null,\r\n  },\r\n  ranking: 0,\r\n  attRanking: 0,\r\n  midRanking: 0,\r\n  defRanking: 0,\r\n  homeTeam: true,\r\n  canSoloHost32: true,\r\n  canSoloHost48: false,\r\n  cohosts32: [],\r\n  cohosts48: [],\r\n  triHosts48: [],\r\n  quadHosts48: [],\r\n};\r\n\r\nexport const defaultHosts48: GroupTeam[] = [\r\n  {\r\n    name: 'Mexico',\r\n    abbreviation: 'mex',\r\n    logo: 'https://fmdataba.com/images/n/MEX.svg',\r\n    emoji: '🇲🇽',\r\n    region: RegionName.concacaf,\r\n    points: 0,\r\n    gDiff: 0,\r\n    gFor: 0,\r\n    gOpp: 0,\r\n    tier: 'b',\r\n    nationTier: 'b',\r\n    startingRating: {\r\n      att: 0,\r\n      mid: 0,\r\n      def: 0,\r\n      pen: 0,\r\n    },\r\n    dynamicRating: {\r\n      att: 0,\r\n      mid: 0,\r\n      def: 0,\r\n      pen: 0,\r\n    },\r\n    isBuffed: {\r\n      att: false,\r\n      mid: false,\r\n      def: false,\r\n      pen: false,\r\n    },\r\n    isDebuffed: {\r\n      att: false,\r\n      mid: false,\r\n      def: false,\r\n      pen: false,\r\n    },\r\n    currentBuffs: {\r\n      att: [],\r\n      mid: [],\r\n      def: [],\r\n      pen: [],\r\n    },\r\n    rating: 0,\r\n    matchesPlayed: 0,\r\n    matchHistory: {\r\n      qualifiers: [],\r\n      group: [],\r\n      bracket: [],\r\n    },\r\n    reportCard: {\r\n      grade: null,\r\n      gradeStyle: null,\r\n      gradeSummary: null,\r\n      tournamentFinish: null,\r\n    },\r\n    ranking: 0,\r\n    attRanking: 0,\r\n    midRanking: 0,\r\n    defRanking: 0,\r\n    homeTeam: true,\r\n    canSoloHost32: true,\r\n    cohosts32: ['United States'],\r\n    cohosts48: ['United States'],\r\n    canSoloHost48: false,\r\n    triHosts48: ['United States', 'Canada'],\r\n    quadHosts48: [],\r\n  },\r\n  {\r\n    name: 'United States',\r\n    abbreviation: 'usa',\r\n    logo: 'https://fmdataba.com/images/n/USA.svg',\r\n    emoji: '🇺🇸',\r\n    region: RegionName.concacaf,\r\n    points: 0,\r\n    gDiff: 0,\r\n    gFor: 0,\r\n    gOpp: 0,\r\n    tier: 'b',\r\n    nationTier: 'b',\r\n    startingRating: {\r\n      att: 0,\r\n      mid: 0,\r\n      def: 0,\r\n      pen: 0,\r\n    },\r\n    dynamicRating: {\r\n      att: 0,\r\n      mid: 0,\r\n      def: 0,\r\n      pen: 0,\r\n    },\r\n    isBuffed: {\r\n      att: false,\r\n      mid: false,\r\n      def: false,\r\n      pen: false,\r\n    },\r\n    isDebuffed: {\r\n      att: false,\r\n      mid: false,\r\n      def: false,\r\n      pen: false,\r\n    },\r\n    currentBuffs: {\r\n      att: [],\r\n      mid: [],\r\n      def: [],\r\n      pen: [],\r\n    },\r\n    rating: 0,\r\n    matchesPlayed: 0,\r\n    matchHistory: {\r\n      qualifiers: [],\r\n      group: [],\r\n      bracket: [],\r\n    },\r\n    reportCard: {\r\n      grade: null,\r\n      gradeStyle: null,\r\n      gradeSummary: null,\r\n      tournamentFinish: null,\r\n    },\r\n    ranking: 0,\r\n    attRanking: 0,\r\n    midRanking: 0,\r\n    defRanking: 0,\r\n    homeTeam: true,\r\n    canSoloHost32: true,\r\n    cohosts32: ['Canada', 'Mexico'],\r\n    cohosts48: ['Mexico'],\r\n    canSoloHost48: false,\r\n    triHosts48: ['Canada', 'Mexico'],\r\n    quadHosts48: [],\r\n  },\r\n  {\r\n    name: 'Canada',\r\n    abbreviation: 'can',\r\n    logo: 'https://fmdataba.com/images/n/CAN.svg',\r\n    emoji: '🇨🇦',\r\n    region: RegionName.concacaf,\r\n    points: 0,\r\n    gDiff: 0,\r\n    gFor: 0,\r\n    gOpp: 0,\r\n    tier: 'd',\r\n    nationTier: 'd',\r\n    startingRating: {\r\n      att: 0,\r\n      mid: 0,\r\n      def: 0,\r\n      pen: 0,\r\n    },\r\n    dynamicRating: {\r\n      att: 0,\r\n      mid: 0,\r\n      def: 0,\r\n      pen: 0,\r\n    },\r\n    isBuffed: {\r\n      att: false,\r\n      mid: false,\r\n      def: false,\r\n      pen: false,\r\n    },\r\n    isDebuffed: {\r\n      att: false,\r\n      mid: false,\r\n      def: false,\r\n      pen: false,\r\n    },\r\n    currentBuffs: {\r\n      att: [],\r\n      mid: [],\r\n      def: [],\r\n      pen: [],\r\n    },\r\n    rating: 0,\r\n    matchesPlayed: 0,\r\n    matchHistory: {\r\n      qualifiers: [],\r\n      group: [],\r\n      bracket: [],\r\n    },\r\n    reportCard: {\r\n      grade: null,\r\n      gradeStyle: null,\r\n      gradeSummary: null,\r\n      tournamentFinish: null,\r\n    },\r\n    ranking: 0,\r\n    attRanking: 0,\r\n    midRanking: 0,\r\n    defRanking: 0,\r\n    homeTeam: true,\r\n    canSoloHost32: true,\r\n    cohosts32: ['United States'],\r\n    cohosts48: [],\r\n    canSoloHost48: false,\r\n    triHosts48: ['Mexico', 'United States'],\r\n    quadHosts48: [],\r\n  },\r\n];\r\n",
            "properties": [
                {
                    "name": "abbreviation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "attRanking",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 99
                },
                {
                    "name": "canSoloHost32",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 110
                },
                {
                    "name": "canSoloHost48",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 111
                },
                {
                    "name": "coach",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Person",
                    "optional": true,
                    "description": "",
                    "line": 116
                },
                {
                    "name": "cohosts32",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 112
                },
                {
                    "name": "cohosts48",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 113
                },
                {
                    "name": "currentBuffs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 77
                },
                {
                    "name": "defRanking",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 101
                },
                {
                    "name": "dynamicRating",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "emoji",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 108
                },
                {
                    "name": "gDiff",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "gFor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "gOpp",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "groupFinish",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 118
                },
                {
                    "name": "homeTeam",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 109
                },
                {
                    "name": "isBuffed",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 65
                },
                {
                    "name": "isDebuffed",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 71
                },
                {
                    "name": "logo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "matchesPlayed",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "matchHistory",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 83
                },
                {
                    "name": "midRanking",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 100
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "nationTier",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "points",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "pot",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 117
                },
                {
                    "name": "quadHosts48",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 115
                },
                {
                    "name": "ranking",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 98
                },
                {
                    "name": "rating",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 97
                },
                {
                    "name": "region",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "RegionName",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "reportCard",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 102
                },
                {
                    "name": "startingRating",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "tier",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "triHosts48",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 114
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IntangibleAttributes",
            "id": "interface-IntangibleAttributes-c4eacd75df6cffebda8578af56486186acf2da81c1e5fad3cf4f6d89380a4a74f0e46d5d76723772b4ec81f67c981743fee3294763633bb82fd59d543106977b",
            "file": "src/app/moba/player/player.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Nation } from 'app/models/nation.model';\r\nimport { Champion } from '../champion/champion.model';\r\n\r\nexport interface Player {\r\n  id: number;\r\n  age: number;\r\n  gamerTag: GamerTag;\r\n  mainRole: Role;\r\n  offRoles: Role[];\r\n  gameStateStrength: GameState;\r\n  playStyle: PlayStyle;\r\n  nationality: Nation;\r\n  currentRoleRating: number;\r\n  attributes: MobaAttributes;\r\n  champMains: Champion[];\r\n  currentRole?: Role;\r\n}\r\n\r\nexport interface MobaAttributes {\r\n  mechanics: MechanicAttributes;\r\n  intangible: IntangibleAttributes;\r\n  macro: MacroAttributes;\r\n}\r\n\r\nexport interface MechanicAttributes {\r\n  farming: number;\r\n  apm: number;\r\n  dueling: number;\r\n  team_fighting: number;\r\n}\r\n\r\nexport interface IntangibleAttributes {\r\n  flexibility: number;\r\n  winning: number;\r\n  composure: number;\r\n  consistency: number;\r\n  in_game_leader: number;\r\n  game_knowledge: number;\r\n}\r\n\r\nexport interface MacroAttributes {\r\n  pathing: number;\r\n  vision_control: number;\r\n  map_positioning: number;\r\n  neutral_control: number;\r\n}\r\n\r\nexport interface GamerTag {\r\n  id: number;\r\n  name: string;\r\n  nationality: string;\r\n}\r\n\r\nexport const rolePriority: { [key: string]: number } = {\r\n  top: 1,\r\n  jungle: 2,\r\n  mid: 3,\r\n  adc: 4,\r\n  support: 5,\r\n};\r\n\r\nexport const sortByMainRole = (players: Player[]): Player[] => {\r\n  return players.sort((a, b) => {\r\n    const aRolePriority = rolePriority[a.mainRole] || Infinity;\r\n    const bRolePriority = rolePriority[b.mainRole] || Infinity;\r\n\r\n    return aRolePriority - bRolePriority;\r\n  });\r\n};\r\n\r\nexport type Role = 'top' | 'jungle' | 'mid' | 'adc' | 'support';\r\nexport enum RoleIndex {\r\n  TOP,\r\n  JUNGLE,\r\n  MID,\r\n  ADC,\r\n  SUPPORT,\r\n}\r\nexport type FilterRole = Role | 'all';\r\nexport type GameState = 'early-game' | 'mid-game' | 'late-game';\r\nexport type PlayStyle =\r\n  | 'scaler'\r\n  | 'mechanical god'\r\n  | 'split-pusher'\r\n  | 'team-fighter'\r\n  | 'closer'\r\n  | 'flex god'\r\n  | 'macro-player'\r\n  | 'leader'\r\n  | 'baron stealer'\r\n  | 'prodigy'\r\n  | 'journeyman'\r\n  | 'specialist';\r\n\r\nexport const AllUniquePlayStyles: PlayStyle[] = [\r\n  'scaler',\r\n  'mechanical god',\r\n  'split-pusher',\r\n  'team-fighter',\r\n  'flex god',\r\n  'macro-player',\r\n  'leader',\r\n  'closer',\r\n  'baron stealer',\r\n];\r\nexport const AllRoles: Role[] = ['top', 'jungle', 'mid', 'adc', 'support'];\r\nexport function isRole(value: unknown): value is Role {\r\n  return typeof value === 'string' && AllRoles.includes(value as Role);\r\n}\r\nexport const AllGameStates: GameState[] = ['early-game', 'mid-game', 'late-game'];\r\n\r\nexport const positions: { name: Role; url: string }[] = [\r\n  {\r\n    name: 'top',\r\n    url: 'assets/images/role_icons/top.webp',\r\n  },\r\n  {\r\n    name: 'jungle',\r\n    url: 'assets/images/role_icons/jungle.webp',\r\n  },\r\n  {\r\n    name: 'mid',\r\n    url: 'assets/images/role_icons/mid.webp',\r\n  },\r\n  {\r\n    name: 'adc',\r\n    url: 'assets/images/role_icons/adc.webp',\r\n  },\r\n  {\r\n    name: 'support',\r\n    url: 'assets/images/role_icons/support.webp',\r\n  },\r\n];\r\n\r\nexport const positionFilters: { name: Role | 'all'; url: string }[] = Array.from([\r\n  {\r\n    name: 'all',\r\n    url: 'assets/images/role_icons/all.webp',\r\n  },\r\n  ...positions,\r\n]);\r\n",
            "properties": [
                {
                    "name": "composure",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "consistency",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "flexibility",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "game_knowledge",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "in_game_leader",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "winning",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 34
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "LastName",
            "id": "interface-LastName-7700061184915780794ed43a36a51c21eb649c545ebc8e4ac01d709e68d3c28ff7eaf96e80b8fe8f10e60edac810bcae1aaf8df7eb85d3def293f21eeed0a32b",
            "file": "src/app/core/services/firestore.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Timestamp } from '@firebase/firestore-types';\r\nimport { Roster } from '../../models/roster.model';\r\n\r\nexport interface User {\r\n  uid: string;\r\n  email: string | null;\r\n  displayName?: string | null;\r\n  savedRosters?: Roster[];\r\n  submittedRosters?: Roster[];\r\n}\r\n\r\nexport interface FirstName {\r\n  name: string;\r\n  duplicate: boolean;\r\n  randomNum: {\r\n    1: number;\r\n    2: number;\r\n    3: number;\r\n    4: number;\r\n    5: number;\r\n  };\r\n  timestamp: Timestamp;\r\n  usages: string[];\r\n  gender: string;\r\n}\r\n\r\nexport interface LastName {\r\n  name: string;\r\n  duplicate: boolean;\r\n  randomNum: {\r\n    1: number;\r\n    2: number;\r\n    3: number;\r\n    4: number;\r\n    5: number;\r\n  };\r\n  timestamp: Timestamp;\r\n  usages: string[];\r\n  alphabeticalId: number;\r\n}\r\n\r\nexport type Name = FirstName | LastName;\r\n\r\nexport function isFirstName(x: FirstName): x is FirstName {\r\n  return (x as FirstName).gender !== undefined;\r\n}\r\n",
            "properties": [
                {
                    "name": "alphabeticalId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "duplicate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "randomNum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "timestamp",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Timestamp",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "usages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 38
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "LeaderboardItem",
            "id": "interface-LeaderboardItem-63cd3faa42bcbc647b83777e0ba1296166a64722c7a220981ecc37abd649267eb72bdc161c2deaa774e937b5d003f2ebc79f68f9a4a0d9b6a579b46e64064384",
            "file": "src/app/pages/leaderboard/leaderboard.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Person } from 'app/models/player.model';\r\n\r\nexport interface LeaderboardItem {\r\n  time: string;\r\n  tournament: {\r\n    winner: string;\r\n    winnerRank: number;\r\n    worst: string;\r\n    worstRank: number;\r\n    second: string;\r\n    third: string;\r\n  };\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class LeaderboardService {\r\n  constructor() {}\r\n\r\n  fetchLocalStorage(): LeaderboardItem[] | null {\r\n    const item = localStorage.getItem('tournamentSubmitted24Hours');\r\n    return item ? JSON.parse(item) : null;\r\n  }\r\n\r\n  saveLocalStorage(id: string, arr: (LeaderboardItem | Person)[]) {\r\n    const item = JSON.stringify(arr);\r\n    localStorage.setItem(id, item);\r\n  }\r\n\r\n  fetchLocalNames(): Person[] | null {\r\n    const item = localStorage.getItem('names');\r\n    return item ? JSON.parse(item) : null;\r\n  }\r\n\r\n  fetchTournamentLeaderboards() {\r\n    const personalLeaderboards = this.fetchPersonalLeaderboards();\r\n    const worldLeaderboards = this.fetchWorldLeaderboards();\r\n    return {\r\n      worldLeaderboards,\r\n      personalLeaderboards,\r\n    };\r\n  }\r\n\r\n  fetchPersonalLeaderboards() {\r\n    const localItems = this.fetchLocalStorage();\r\n    return localItems?.slice(0, 10) || null;\r\n  }\r\n\r\n  fetchWorldLeaderboards() {\r\n    return null;\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "time",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "tournament",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "MacroAttributes",
            "id": "interface-MacroAttributes-c4eacd75df6cffebda8578af56486186acf2da81c1e5fad3cf4f6d89380a4a74f0e46d5d76723772b4ec81f67c981743fee3294763633bb82fd59d543106977b",
            "file": "src/app/moba/player/player.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Nation } from 'app/models/nation.model';\r\nimport { Champion } from '../champion/champion.model';\r\n\r\nexport interface Player {\r\n  id: number;\r\n  age: number;\r\n  gamerTag: GamerTag;\r\n  mainRole: Role;\r\n  offRoles: Role[];\r\n  gameStateStrength: GameState;\r\n  playStyle: PlayStyle;\r\n  nationality: Nation;\r\n  currentRoleRating: number;\r\n  attributes: MobaAttributes;\r\n  champMains: Champion[];\r\n  currentRole?: Role;\r\n}\r\n\r\nexport interface MobaAttributes {\r\n  mechanics: MechanicAttributes;\r\n  intangible: IntangibleAttributes;\r\n  macro: MacroAttributes;\r\n}\r\n\r\nexport interface MechanicAttributes {\r\n  farming: number;\r\n  apm: number;\r\n  dueling: number;\r\n  team_fighting: number;\r\n}\r\n\r\nexport interface IntangibleAttributes {\r\n  flexibility: number;\r\n  winning: number;\r\n  composure: number;\r\n  consistency: number;\r\n  in_game_leader: number;\r\n  game_knowledge: number;\r\n}\r\n\r\nexport interface MacroAttributes {\r\n  pathing: number;\r\n  vision_control: number;\r\n  map_positioning: number;\r\n  neutral_control: number;\r\n}\r\n\r\nexport interface GamerTag {\r\n  id: number;\r\n  name: string;\r\n  nationality: string;\r\n}\r\n\r\nexport const rolePriority: { [key: string]: number } = {\r\n  top: 1,\r\n  jungle: 2,\r\n  mid: 3,\r\n  adc: 4,\r\n  support: 5,\r\n};\r\n\r\nexport const sortByMainRole = (players: Player[]): Player[] => {\r\n  return players.sort((a, b) => {\r\n    const aRolePriority = rolePriority[a.mainRole] || Infinity;\r\n    const bRolePriority = rolePriority[b.mainRole] || Infinity;\r\n\r\n    return aRolePriority - bRolePriority;\r\n  });\r\n};\r\n\r\nexport type Role = 'top' | 'jungle' | 'mid' | 'adc' | 'support';\r\nexport enum RoleIndex {\r\n  TOP,\r\n  JUNGLE,\r\n  MID,\r\n  ADC,\r\n  SUPPORT,\r\n}\r\nexport type FilterRole = Role | 'all';\r\nexport type GameState = 'early-game' | 'mid-game' | 'late-game';\r\nexport type PlayStyle =\r\n  | 'scaler'\r\n  | 'mechanical god'\r\n  | 'split-pusher'\r\n  | 'team-fighter'\r\n  | 'closer'\r\n  | 'flex god'\r\n  | 'macro-player'\r\n  | 'leader'\r\n  | 'baron stealer'\r\n  | 'prodigy'\r\n  | 'journeyman'\r\n  | 'specialist';\r\n\r\nexport const AllUniquePlayStyles: PlayStyle[] = [\r\n  'scaler',\r\n  'mechanical god',\r\n  'split-pusher',\r\n  'team-fighter',\r\n  'flex god',\r\n  'macro-player',\r\n  'leader',\r\n  'closer',\r\n  'baron stealer',\r\n];\r\nexport const AllRoles: Role[] = ['top', 'jungle', 'mid', 'adc', 'support'];\r\nexport function isRole(value: unknown): value is Role {\r\n  return typeof value === 'string' && AllRoles.includes(value as Role);\r\n}\r\nexport const AllGameStates: GameState[] = ['early-game', 'mid-game', 'late-game'];\r\n\r\nexport const positions: { name: Role; url: string }[] = [\r\n  {\r\n    name: 'top',\r\n    url: 'assets/images/role_icons/top.webp',\r\n  },\r\n  {\r\n    name: 'jungle',\r\n    url: 'assets/images/role_icons/jungle.webp',\r\n  },\r\n  {\r\n    name: 'mid',\r\n    url: 'assets/images/role_icons/mid.webp',\r\n  },\r\n  {\r\n    name: 'adc',\r\n    url: 'assets/images/role_icons/adc.webp',\r\n  },\r\n  {\r\n    name: 'support',\r\n    url: 'assets/images/role_icons/support.webp',\r\n  },\r\n];\r\n\r\nexport const positionFilters: { name: Role | 'all'; url: string }[] = Array.from([\r\n  {\r\n    name: 'all',\r\n    url: 'assets/images/role_icons/all.webp',\r\n  },\r\n  ...positions,\r\n]);\r\n",
            "properties": [
                {
                    "name": "map_positioning",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "neutral_control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "pathing",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "vision_control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 43
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Match",
            "id": "interface-Match-38aa69a25082a42e29d7380499cc14028c131842d749e00cee576b75189f0bb552b085feb5a8111108a7f2048f71b49016a54a3d6b4aa341accb0cf41ce579f9",
            "file": "src/app/simulation/simulation.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { GroupTeam } from 'app/models/nation.model';\r\n\r\nexport interface Match {\r\n  goalsFor: number;\r\n  goalsAg: number;\r\n  isEtWin: boolean;\r\n  isPenaltyWin: boolean;\r\n  winner: GroupTeam;\r\n  loser: GroupTeam;\r\n  score: string;\r\n  eventTimes: {\r\n    winner: MatchEvent[];\r\n    loser: MatchEvent[];\r\n  };\r\n}\r\n\r\nexport interface MatchEvent {\r\n  time: string;\r\n  emoji: EventEmoji;\r\n  type?: string;\r\n}\r\n\r\nexport type EventEmoji = '⚽' | '🟨' | '🟥' | '🟨🟥' | '🚑';\r\nexport type KnockoutRound = [GroupTeam, GroupTeam, Match][];\r\n\r\nexport interface Tournament {\r\n  availableRegions?: Region[];\r\n  hostNations?: GroupTeam[];\r\n  allTeams?: {\r\n    rankings: GroupTeam[];\r\n    attRankings: GroupTeam[];\r\n    midRankings: GroupTeam[];\r\n    defRankings: GroupTeam[];\r\n  };\r\n  groups?: GroupTeam[][];\r\n  groupWinners?: GroupTeam[];\r\n  bracket?: {\r\n    roundOf32?: KnockoutRound;\r\n    roundOf16: KnockoutRound;\r\n    quarterFinals: KnockoutRound;\r\n    semiFinals: KnockoutRound;\r\n    finals: KnockoutRound;\r\n  };\r\n  awards?: [\r\n    first: GroupTeam,\r\n    second: GroupTeam,\r\n    third: GroupTeam,\r\n    underPerformer: GroupTeam,\r\n    overPerformer: GroupTeam,\r\n    uefa?: GroupTeam,\r\n    afc?: GroupTeam,\r\n    caf?: GroupTeam,\r\n    concacaf?: GroupTeam,\r\n    conmebol?: GroupTeam,\r\n    ofc?: GroupTeam\r\n  ];\r\n}\r\n\r\nexport interface Region {\r\n  label: string;\r\n  value: RegionName;\r\n  numOfTeams: number;\r\n  qualifiers: {\r\n    auto: number;\r\n    extra: number;\r\n  };\r\n}\r\n\r\nexport interface TeamsByRegion {\r\n  uefa?: GroupTeam[];\r\n  afc?: GroupTeam[];\r\n  caf?: GroupTeam[];\r\n  concacaf?: GroupTeam[];\r\n  conmebol?: GroupTeam[];\r\n  ofc?: GroupTeam[];\r\n}\r\n\r\n// eslint-disable-next-line no-shadow\r\nexport enum RegionName {\r\n  uefa = 'uefa',\r\n  afc = 'afc',\r\n  caf = 'caf',\r\n  concacaf = 'concacaf',\r\n  conmebol = 'conmebol',\r\n  ofc = 'ofc',\r\n}\r\n",
            "properties": [
                {
                    "name": "eventTimes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "goalsAg",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "goalsFor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "isEtWin",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "isPenaltyWin",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "loser",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GroupTeam",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "score",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "winner",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GroupTeam",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "MatchEvent",
            "id": "interface-MatchEvent-38aa69a25082a42e29d7380499cc14028c131842d749e00cee576b75189f0bb552b085feb5a8111108a7f2048f71b49016a54a3d6b4aa341accb0cf41ce579f9",
            "file": "src/app/simulation/simulation.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { GroupTeam } from 'app/models/nation.model';\r\n\r\nexport interface Match {\r\n  goalsFor: number;\r\n  goalsAg: number;\r\n  isEtWin: boolean;\r\n  isPenaltyWin: boolean;\r\n  winner: GroupTeam;\r\n  loser: GroupTeam;\r\n  score: string;\r\n  eventTimes: {\r\n    winner: MatchEvent[];\r\n    loser: MatchEvent[];\r\n  };\r\n}\r\n\r\nexport interface MatchEvent {\r\n  time: string;\r\n  emoji: EventEmoji;\r\n  type?: string;\r\n}\r\n\r\nexport type EventEmoji = '⚽' | '🟨' | '🟥' | '🟨🟥' | '🚑';\r\nexport type KnockoutRound = [GroupTeam, GroupTeam, Match][];\r\n\r\nexport interface Tournament {\r\n  availableRegions?: Region[];\r\n  hostNations?: GroupTeam[];\r\n  allTeams?: {\r\n    rankings: GroupTeam[];\r\n    attRankings: GroupTeam[];\r\n    midRankings: GroupTeam[];\r\n    defRankings: GroupTeam[];\r\n  };\r\n  groups?: GroupTeam[][];\r\n  groupWinners?: GroupTeam[];\r\n  bracket?: {\r\n    roundOf32?: KnockoutRound;\r\n    roundOf16: KnockoutRound;\r\n    quarterFinals: KnockoutRound;\r\n    semiFinals: KnockoutRound;\r\n    finals: KnockoutRound;\r\n  };\r\n  awards?: [\r\n    first: GroupTeam,\r\n    second: GroupTeam,\r\n    third: GroupTeam,\r\n    underPerformer: GroupTeam,\r\n    overPerformer: GroupTeam,\r\n    uefa?: GroupTeam,\r\n    afc?: GroupTeam,\r\n    caf?: GroupTeam,\r\n    concacaf?: GroupTeam,\r\n    conmebol?: GroupTeam,\r\n    ofc?: GroupTeam\r\n  ];\r\n}\r\n\r\nexport interface Region {\r\n  label: string;\r\n  value: RegionName;\r\n  numOfTeams: number;\r\n  qualifiers: {\r\n    auto: number;\r\n    extra: number;\r\n  };\r\n}\r\n\r\nexport interface TeamsByRegion {\r\n  uefa?: GroupTeam[];\r\n  afc?: GroupTeam[];\r\n  caf?: GroupTeam[];\r\n  concacaf?: GroupTeam[];\r\n  conmebol?: GroupTeam[];\r\n  ofc?: GroupTeam[];\r\n}\r\n\r\n// eslint-disable-next-line no-shadow\r\nexport enum RegionName {\r\n  uefa = 'uefa',\r\n  afc = 'afc',\r\n  caf = 'caf',\r\n  concacaf = 'concacaf',\r\n  conmebol = 'conmebol',\r\n  ofc = 'ofc',\r\n}\r\n",
            "properties": [
                {
                    "name": "emoji",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventEmoji",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "time",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 20
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "MechanicAttributes",
            "id": "interface-MechanicAttributes-c4eacd75df6cffebda8578af56486186acf2da81c1e5fad3cf4f6d89380a4a74f0e46d5d76723772b4ec81f67c981743fee3294763633bb82fd59d543106977b",
            "file": "src/app/moba/player/player.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Nation } from 'app/models/nation.model';\r\nimport { Champion } from '../champion/champion.model';\r\n\r\nexport interface Player {\r\n  id: number;\r\n  age: number;\r\n  gamerTag: GamerTag;\r\n  mainRole: Role;\r\n  offRoles: Role[];\r\n  gameStateStrength: GameState;\r\n  playStyle: PlayStyle;\r\n  nationality: Nation;\r\n  currentRoleRating: number;\r\n  attributes: MobaAttributes;\r\n  champMains: Champion[];\r\n  currentRole?: Role;\r\n}\r\n\r\nexport interface MobaAttributes {\r\n  mechanics: MechanicAttributes;\r\n  intangible: IntangibleAttributes;\r\n  macro: MacroAttributes;\r\n}\r\n\r\nexport interface MechanicAttributes {\r\n  farming: number;\r\n  apm: number;\r\n  dueling: number;\r\n  team_fighting: number;\r\n}\r\n\r\nexport interface IntangibleAttributes {\r\n  flexibility: number;\r\n  winning: number;\r\n  composure: number;\r\n  consistency: number;\r\n  in_game_leader: number;\r\n  game_knowledge: number;\r\n}\r\n\r\nexport interface MacroAttributes {\r\n  pathing: number;\r\n  vision_control: number;\r\n  map_positioning: number;\r\n  neutral_control: number;\r\n}\r\n\r\nexport interface GamerTag {\r\n  id: number;\r\n  name: string;\r\n  nationality: string;\r\n}\r\n\r\nexport const rolePriority: { [key: string]: number } = {\r\n  top: 1,\r\n  jungle: 2,\r\n  mid: 3,\r\n  adc: 4,\r\n  support: 5,\r\n};\r\n\r\nexport const sortByMainRole = (players: Player[]): Player[] => {\r\n  return players.sort((a, b) => {\r\n    const aRolePriority = rolePriority[a.mainRole] || Infinity;\r\n    const bRolePriority = rolePriority[b.mainRole] || Infinity;\r\n\r\n    return aRolePriority - bRolePriority;\r\n  });\r\n};\r\n\r\nexport type Role = 'top' | 'jungle' | 'mid' | 'adc' | 'support';\r\nexport enum RoleIndex {\r\n  TOP,\r\n  JUNGLE,\r\n  MID,\r\n  ADC,\r\n  SUPPORT,\r\n}\r\nexport type FilterRole = Role | 'all';\r\nexport type GameState = 'early-game' | 'mid-game' | 'late-game';\r\nexport type PlayStyle =\r\n  | 'scaler'\r\n  | 'mechanical god'\r\n  | 'split-pusher'\r\n  | 'team-fighter'\r\n  | 'closer'\r\n  | 'flex god'\r\n  | 'macro-player'\r\n  | 'leader'\r\n  | 'baron stealer'\r\n  | 'prodigy'\r\n  | 'journeyman'\r\n  | 'specialist';\r\n\r\nexport const AllUniquePlayStyles: PlayStyle[] = [\r\n  'scaler',\r\n  'mechanical god',\r\n  'split-pusher',\r\n  'team-fighter',\r\n  'flex god',\r\n  'macro-player',\r\n  'leader',\r\n  'closer',\r\n  'baron stealer',\r\n];\r\nexport const AllRoles: Role[] = ['top', 'jungle', 'mid', 'adc', 'support'];\r\nexport function isRole(value: unknown): value is Role {\r\n  return typeof value === 'string' && AllRoles.includes(value as Role);\r\n}\r\nexport const AllGameStates: GameState[] = ['early-game', 'mid-game', 'late-game'];\r\n\r\nexport const positions: { name: Role; url: string }[] = [\r\n  {\r\n    name: 'top',\r\n    url: 'assets/images/role_icons/top.webp',\r\n  },\r\n  {\r\n    name: 'jungle',\r\n    url: 'assets/images/role_icons/jungle.webp',\r\n  },\r\n  {\r\n    name: 'mid',\r\n    url: 'assets/images/role_icons/mid.webp',\r\n  },\r\n  {\r\n    name: 'adc',\r\n    url: 'assets/images/role_icons/adc.webp',\r\n  },\r\n  {\r\n    name: 'support',\r\n    url: 'assets/images/role_icons/support.webp',\r\n  },\r\n];\r\n\r\nexport const positionFilters: { name: Role | 'all'; url: string }[] = Array.from([\r\n  {\r\n    name: 'all',\r\n    url: 'assets/images/role_icons/all.webp',\r\n  },\r\n  ...positions,\r\n]);\r\n",
            "properties": [
                {
                    "name": "apm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "dueling",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "farming",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "team_fighting",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 29
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "MobaAttributes",
            "id": "interface-MobaAttributes-c4eacd75df6cffebda8578af56486186acf2da81c1e5fad3cf4f6d89380a4a74f0e46d5d76723772b4ec81f67c981743fee3294763633bb82fd59d543106977b",
            "file": "src/app/moba/player/player.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Nation } from 'app/models/nation.model';\r\nimport { Champion } from '../champion/champion.model';\r\n\r\nexport interface Player {\r\n  id: number;\r\n  age: number;\r\n  gamerTag: GamerTag;\r\n  mainRole: Role;\r\n  offRoles: Role[];\r\n  gameStateStrength: GameState;\r\n  playStyle: PlayStyle;\r\n  nationality: Nation;\r\n  currentRoleRating: number;\r\n  attributes: MobaAttributes;\r\n  champMains: Champion[];\r\n  currentRole?: Role;\r\n}\r\n\r\nexport interface MobaAttributes {\r\n  mechanics: MechanicAttributes;\r\n  intangible: IntangibleAttributes;\r\n  macro: MacroAttributes;\r\n}\r\n\r\nexport interface MechanicAttributes {\r\n  farming: number;\r\n  apm: number;\r\n  dueling: number;\r\n  team_fighting: number;\r\n}\r\n\r\nexport interface IntangibleAttributes {\r\n  flexibility: number;\r\n  winning: number;\r\n  composure: number;\r\n  consistency: number;\r\n  in_game_leader: number;\r\n  game_knowledge: number;\r\n}\r\n\r\nexport interface MacroAttributes {\r\n  pathing: number;\r\n  vision_control: number;\r\n  map_positioning: number;\r\n  neutral_control: number;\r\n}\r\n\r\nexport interface GamerTag {\r\n  id: number;\r\n  name: string;\r\n  nationality: string;\r\n}\r\n\r\nexport const rolePriority: { [key: string]: number } = {\r\n  top: 1,\r\n  jungle: 2,\r\n  mid: 3,\r\n  adc: 4,\r\n  support: 5,\r\n};\r\n\r\nexport const sortByMainRole = (players: Player[]): Player[] => {\r\n  return players.sort((a, b) => {\r\n    const aRolePriority = rolePriority[a.mainRole] || Infinity;\r\n    const bRolePriority = rolePriority[b.mainRole] || Infinity;\r\n\r\n    return aRolePriority - bRolePriority;\r\n  });\r\n};\r\n\r\nexport type Role = 'top' | 'jungle' | 'mid' | 'adc' | 'support';\r\nexport enum RoleIndex {\r\n  TOP,\r\n  JUNGLE,\r\n  MID,\r\n  ADC,\r\n  SUPPORT,\r\n}\r\nexport type FilterRole = Role | 'all';\r\nexport type GameState = 'early-game' | 'mid-game' | 'late-game';\r\nexport type PlayStyle =\r\n  | 'scaler'\r\n  | 'mechanical god'\r\n  | 'split-pusher'\r\n  | 'team-fighter'\r\n  | 'closer'\r\n  | 'flex god'\r\n  | 'macro-player'\r\n  | 'leader'\r\n  | 'baron stealer'\r\n  | 'prodigy'\r\n  | 'journeyman'\r\n  | 'specialist';\r\n\r\nexport const AllUniquePlayStyles: PlayStyle[] = [\r\n  'scaler',\r\n  'mechanical god',\r\n  'split-pusher',\r\n  'team-fighter',\r\n  'flex god',\r\n  'macro-player',\r\n  'leader',\r\n  'closer',\r\n  'baron stealer',\r\n];\r\nexport const AllRoles: Role[] = ['top', 'jungle', 'mid', 'adc', 'support'];\r\nexport function isRole(value: unknown): value is Role {\r\n  return typeof value === 'string' && AllRoles.includes(value as Role);\r\n}\r\nexport const AllGameStates: GameState[] = ['early-game', 'mid-game', 'late-game'];\r\n\r\nexport const positions: { name: Role; url: string }[] = [\r\n  {\r\n    name: 'top',\r\n    url: 'assets/images/role_icons/top.webp',\r\n  },\r\n  {\r\n    name: 'jungle',\r\n    url: 'assets/images/role_icons/jungle.webp',\r\n  },\r\n  {\r\n    name: 'mid',\r\n    url: 'assets/images/role_icons/mid.webp',\r\n  },\r\n  {\r\n    name: 'adc',\r\n    url: 'assets/images/role_icons/adc.webp',\r\n  },\r\n  {\r\n    name: 'support',\r\n    url: 'assets/images/role_icons/support.webp',\r\n  },\r\n];\r\n\r\nexport const positionFilters: { name: Role | 'all'; url: string }[] = Array.from([\r\n  {\r\n    name: 'all',\r\n    url: 'assets/images/role_icons/all.webp',\r\n  },\r\n  ...positions,\r\n]);\r\n",
            "properties": [
                {
                    "name": "intangible",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IntangibleAttributes",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "macro",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MacroAttributes",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "mechanics",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MechanicAttributes",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "MobaRegion",
            "id": "interface-MobaRegion-b70e4fc873f64e8308af5695e1840b2c6c38b12629a70be85e3dc5fdb814b980efd56e5e11493a2760c9ca413c161ff78841f9de6db2d2146a4066fef28955dd",
            "file": "src/app/moba/region/region.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface MobaRegion {\r\n  regionAbbrev: RegionAbbrev;\r\n  leagueName: LeagueName;\r\n}\r\n\r\nexport type RegionAbbrev = 'NA' | 'EU' | 'CN' | 'KR' | 'BR' | 'APAC' | 'LATAM';\r\nexport type LeagueName = 'LCS' | 'LEC' | 'LPL' | 'LCK' | 'VCS' | 'CBLOL' | 'PCS' | 'LLA';\r\n\r\nexport const regions: MobaRegion[] = [\r\n  {\r\n    regionAbbrev: 'KR',\r\n    leagueName: 'LCK',\r\n  },\r\n  {\r\n    regionAbbrev: 'CN',\r\n    leagueName: 'LPL',\r\n  },\r\n  {\r\n    regionAbbrev: 'EU',\r\n    leagueName: 'LEC',\r\n  },\r\n  {\r\n    regionAbbrev: 'NA',\r\n    leagueName: 'LCS',\r\n  },\r\n  {\r\n    regionAbbrev: 'APAC',\r\n    leagueName: 'PCS',\r\n  },\r\n  {\r\n    regionAbbrev: 'APAC',\r\n    leagueName: 'VCS',\r\n  },\r\n  {\r\n    regionAbbrev: 'BR',\r\n    leagueName: 'CBLOL',\r\n  },\r\n  {\r\n    regionAbbrev: 'LATAM',\r\n    leagueName: 'LLA',\r\n  },\r\n];\r\n",
            "properties": [
                {
                    "name": "leagueName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LeagueName",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "regionAbbrev",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "RegionAbbrev",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Nation",
            "id": "interface-Nation-5ac8536a854afa9cbb3a98589f451d95abf162e467ddb4aae45abed0651ef1a1f5bfd2236dbf3ed21c2b29a1369062ef32e18374308faaa4091d46d26ac26b47",
            "file": "src/app/models/nation.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Match, RegionName } from 'app/simulation/simulation.model';\r\nimport { Person } from './player.model';\r\nimport { getRandFloat } from '@shared/utils';\r\nimport * as nationsJson from 'assets/json/nations.json';\r\n\r\nexport const allNations = () => {\r\n  const newArr = nationsJson;\r\n  const nations: Nation[] = [];\r\n\r\n  Object.values(newArr).forEach(t => {\r\n    if (t.nations) {\r\n      nations.push(...(t.nations as Nation[]));\r\n    }\r\n  });\r\n\r\n  return nations;\r\n};\r\n\r\nexport interface Nation {\r\n  name: string;\r\n  logo: string;\r\n  region: RegionName;\r\n  firstNameUsages: string[];\r\n  lastNameUsages: string[];\r\n  mainLeagues: string[];\r\n  secondLeagues: string[];\r\n  thirdLeagues: string[];\r\n  rareLeagues: string[];\r\n  excludeLeagues: string[];\r\n  nationTier: string;\r\n  abbreviation: string;\r\n  canSoloHost32: boolean;\r\n  canSoloHost48: boolean;\r\n  cohosts32: string[];\r\n  cohosts48: string[];\r\n  triHosts48: string[];\r\n  quadHosts48: string[];\r\n  emoji: string;\r\n}\r\n\r\nexport interface GroupTeam {\r\n  name: string;\r\n  logo: string;\r\n  abbreviation: string;\r\n  region: RegionName;\r\n  matchesPlayed: number;\r\n  points: number;\r\n  gDiff: number;\r\n  gFor: number;\r\n  gOpp: number;\r\n  tier: string;\r\n  nationTier: string;\r\n  startingRating: {\r\n    att: number;\r\n    mid: number;\r\n    def: number;\r\n    pen: number;\r\n  };\r\n  dynamicRating: {\r\n    att: number;\r\n    mid: number;\r\n    def: number;\r\n    pen: number;\r\n  };\r\n  isBuffed: {\r\n    att: boolean;\r\n    mid: boolean;\r\n    def: boolean;\r\n    pen: boolean;\r\n  };\r\n  isDebuffed: {\r\n    att: boolean;\r\n    mid: boolean;\r\n    def: boolean;\r\n    pen: boolean;\r\n  };\r\n  currentBuffs: {\r\n    att: Buff[];\r\n    mid: Buff[];\r\n    def: Buff[];\r\n    pen: Buff[];\r\n  };\r\n  matchHistory: {\r\n    qualifiers: {\r\n      match: Match;\r\n      opp: GroupTeam;\r\n    }[];\r\n    group: {\r\n      match: Match;\r\n      opp: GroupTeam;\r\n    }[];\r\n    bracket: {\r\n      match: Match;\r\n      opp: GroupTeam;\r\n    }[];\r\n  };\r\n  rating: number;\r\n  ranking: number;\r\n  attRanking: number;\r\n  midRanking: number;\r\n  defRanking: number;\r\n  reportCard: {\r\n    grade: string | null;\r\n    tournamentFinish: string | null;\r\n    gradeStyle: string | null;\r\n    gradeSummary: string | null;\r\n  };\r\n  emoji: string;\r\n  homeTeam: boolean;\r\n  canSoloHost32: boolean;\r\n  canSoloHost48: boolean;\r\n  cohosts32: string[];\r\n  cohosts48: string[];\r\n  triHosts48: string[];\r\n  quadHosts48: string[];\r\n  coach?: Person;\r\n  pot?: number;\r\n  groupFinish?: string;\r\n}\r\n\r\nexport interface Buff {\r\n  numOfGames: number;\r\n  value: number;\r\n}\r\n\r\nexport function isNation(value: unknown): value is Nation {\r\n  return (<Nation>value).abbreviation !== undefined;\r\n}\r\n\r\nexport const baseTeam = (hostNations: GroupTeam[], nation: Nation): GroupTeam => {\r\n  // random nation values\r\n  let min = 0;\r\n  let max = 0;\r\n\r\n  switch (nation.nationTier) {\r\n    case 's':\r\n      min = 80;\r\n      max = 100;\r\n      break;\r\n    case 'a':\r\n      min = 70;\r\n      max = 95;\r\n      break;\r\n    case 'b':\r\n      min = 65;\r\n      max = 88;\r\n      break;\r\n    case 'c':\r\n      min = 60;\r\n      max = 88;\r\n      break;\r\n    case 'd':\r\n      min = 55;\r\n      max = 80;\r\n      break;\r\n    case 'e':\r\n      min = 40;\r\n      max = 78;\r\n      break;\r\n    case 'f':\r\n      min = 30;\r\n      max = 70;\r\n      break;\r\n    case 'g':\r\n      min = 25;\r\n      max = 55;\r\n      break;\r\n    default:\r\n      min = 25;\r\n      max = 55;\r\n      break;\r\n  }\r\n  const attRating = getRandFloat(min, max);\r\n  const midRating = getRandFloat(min, max);\r\n  const defRating = getRandFloat(min, max);\r\n  const penRating = getRandFloat(min, max);\r\n  return {\r\n    ...nation,\r\n    gDiff: 0,\r\n    gFor: 0,\r\n    gOpp: 0,\r\n    points: 0,\r\n    matchesPlayed: 0,\r\n    tier: nation.nationTier,\r\n    startingRating: {\r\n      att: attRating,\r\n      mid: midRating,\r\n      def: defRating,\r\n      pen: penRating,\r\n    },\r\n    dynamicRating: {\r\n      att: attRating,\r\n      mid: midRating,\r\n      def: defRating,\r\n      pen: penRating,\r\n    },\r\n    isBuffed: {\r\n      att: false,\r\n      mid: false,\r\n      def: false,\r\n      pen: false,\r\n    },\r\n    isDebuffed: {\r\n      att: false,\r\n      mid: false,\r\n      def: false,\r\n      pen: false,\r\n    },\r\n    currentBuffs: {\r\n      att: [],\r\n      mid: [],\r\n      def: [],\r\n      pen: [],\r\n    },\r\n    rating: (attRating + midRating + defRating) / 3,\r\n    ranking: 0,\r\n    attRanking: 0,\r\n    midRanking: 0,\r\n    defRanking: 0,\r\n    matchHistory: {\r\n      qualifiers: [],\r\n      group: [],\r\n      bracket: [],\r\n    },\r\n    reportCard: {\r\n      grade: null,\r\n      gradeStyle: null,\r\n      gradeSummary: null,\r\n      tournamentFinish: null,\r\n    },\r\n    homeTeam: hostNations.map(t => t.name).includes(nation.name) ? true : false,\r\n    region: nation.region as RegionName,\r\n  };\r\n};\r\n\r\nexport const defaultHost32: GroupTeam = {\r\n  name: 'Qatar',\r\n  abbreviation: 'qat',\r\n  logo: 'https://fmdataba.com/images/n/QAT.svg',\r\n  emoji: '🇶🇦',\r\n  region: RegionName.afc,\r\n  points: 0,\r\n  gDiff: 0,\r\n  gFor: 0,\r\n  gOpp: 0,\r\n  tier: 'j',\r\n  nationTier: 'e',\r\n  startingRating: {\r\n    att: 0,\r\n    mid: 0,\r\n    def: 0,\r\n    pen: 0,\r\n  },\r\n  dynamicRating: {\r\n    att: 0,\r\n    mid: 0,\r\n    def: 0,\r\n    pen: 0,\r\n  },\r\n  isBuffed: {\r\n    att: false,\r\n    mid: false,\r\n    def: false,\r\n    pen: false,\r\n  },\r\n  isDebuffed: {\r\n    att: false,\r\n    mid: false,\r\n    def: false,\r\n    pen: false,\r\n  },\r\n  currentBuffs: {\r\n    att: [],\r\n    mid: [],\r\n    def: [],\r\n    pen: [],\r\n  },\r\n  rating: 0,\r\n  matchesPlayed: 0,\r\n  matchHistory: {\r\n    qualifiers: [],\r\n    group: [],\r\n    bracket: [],\r\n  },\r\n  reportCard: {\r\n    grade: null,\r\n    gradeStyle: null,\r\n    gradeSummary: null,\r\n    tournamentFinish: null,\r\n  },\r\n  ranking: 0,\r\n  attRanking: 0,\r\n  midRanking: 0,\r\n  defRanking: 0,\r\n  homeTeam: true,\r\n  canSoloHost32: true,\r\n  canSoloHost48: false,\r\n  cohosts32: [],\r\n  cohosts48: [],\r\n  triHosts48: [],\r\n  quadHosts48: [],\r\n};\r\n\r\nexport const defaultHosts48: GroupTeam[] = [\r\n  {\r\n    name: 'Mexico',\r\n    abbreviation: 'mex',\r\n    logo: 'https://fmdataba.com/images/n/MEX.svg',\r\n    emoji: '🇲🇽',\r\n    region: RegionName.concacaf,\r\n    points: 0,\r\n    gDiff: 0,\r\n    gFor: 0,\r\n    gOpp: 0,\r\n    tier: 'b',\r\n    nationTier: 'b',\r\n    startingRating: {\r\n      att: 0,\r\n      mid: 0,\r\n      def: 0,\r\n      pen: 0,\r\n    },\r\n    dynamicRating: {\r\n      att: 0,\r\n      mid: 0,\r\n      def: 0,\r\n      pen: 0,\r\n    },\r\n    isBuffed: {\r\n      att: false,\r\n      mid: false,\r\n      def: false,\r\n      pen: false,\r\n    },\r\n    isDebuffed: {\r\n      att: false,\r\n      mid: false,\r\n      def: false,\r\n      pen: false,\r\n    },\r\n    currentBuffs: {\r\n      att: [],\r\n      mid: [],\r\n      def: [],\r\n      pen: [],\r\n    },\r\n    rating: 0,\r\n    matchesPlayed: 0,\r\n    matchHistory: {\r\n      qualifiers: [],\r\n      group: [],\r\n      bracket: [],\r\n    },\r\n    reportCard: {\r\n      grade: null,\r\n      gradeStyle: null,\r\n      gradeSummary: null,\r\n      tournamentFinish: null,\r\n    },\r\n    ranking: 0,\r\n    attRanking: 0,\r\n    midRanking: 0,\r\n    defRanking: 0,\r\n    homeTeam: true,\r\n    canSoloHost32: true,\r\n    cohosts32: ['United States'],\r\n    cohosts48: ['United States'],\r\n    canSoloHost48: false,\r\n    triHosts48: ['United States', 'Canada'],\r\n    quadHosts48: [],\r\n  },\r\n  {\r\n    name: 'United States',\r\n    abbreviation: 'usa',\r\n    logo: 'https://fmdataba.com/images/n/USA.svg',\r\n    emoji: '🇺🇸',\r\n    region: RegionName.concacaf,\r\n    points: 0,\r\n    gDiff: 0,\r\n    gFor: 0,\r\n    gOpp: 0,\r\n    tier: 'b',\r\n    nationTier: 'b',\r\n    startingRating: {\r\n      att: 0,\r\n      mid: 0,\r\n      def: 0,\r\n      pen: 0,\r\n    },\r\n    dynamicRating: {\r\n      att: 0,\r\n      mid: 0,\r\n      def: 0,\r\n      pen: 0,\r\n    },\r\n    isBuffed: {\r\n      att: false,\r\n      mid: false,\r\n      def: false,\r\n      pen: false,\r\n    },\r\n    isDebuffed: {\r\n      att: false,\r\n      mid: false,\r\n      def: false,\r\n      pen: false,\r\n    },\r\n    currentBuffs: {\r\n      att: [],\r\n      mid: [],\r\n      def: [],\r\n      pen: [],\r\n    },\r\n    rating: 0,\r\n    matchesPlayed: 0,\r\n    matchHistory: {\r\n      qualifiers: [],\r\n      group: [],\r\n      bracket: [],\r\n    },\r\n    reportCard: {\r\n      grade: null,\r\n      gradeStyle: null,\r\n      gradeSummary: null,\r\n      tournamentFinish: null,\r\n    },\r\n    ranking: 0,\r\n    attRanking: 0,\r\n    midRanking: 0,\r\n    defRanking: 0,\r\n    homeTeam: true,\r\n    canSoloHost32: true,\r\n    cohosts32: ['Canada', 'Mexico'],\r\n    cohosts48: ['Mexico'],\r\n    canSoloHost48: false,\r\n    triHosts48: ['Canada', 'Mexico'],\r\n    quadHosts48: [],\r\n  },\r\n  {\r\n    name: 'Canada',\r\n    abbreviation: 'can',\r\n    logo: 'https://fmdataba.com/images/n/CAN.svg',\r\n    emoji: '🇨🇦',\r\n    region: RegionName.concacaf,\r\n    points: 0,\r\n    gDiff: 0,\r\n    gFor: 0,\r\n    gOpp: 0,\r\n    tier: 'd',\r\n    nationTier: 'd',\r\n    startingRating: {\r\n      att: 0,\r\n      mid: 0,\r\n      def: 0,\r\n      pen: 0,\r\n    },\r\n    dynamicRating: {\r\n      att: 0,\r\n      mid: 0,\r\n      def: 0,\r\n      pen: 0,\r\n    },\r\n    isBuffed: {\r\n      att: false,\r\n      mid: false,\r\n      def: false,\r\n      pen: false,\r\n    },\r\n    isDebuffed: {\r\n      att: false,\r\n      mid: false,\r\n      def: false,\r\n      pen: false,\r\n    },\r\n    currentBuffs: {\r\n      att: [],\r\n      mid: [],\r\n      def: [],\r\n      pen: [],\r\n    },\r\n    rating: 0,\r\n    matchesPlayed: 0,\r\n    matchHistory: {\r\n      qualifiers: [],\r\n      group: [],\r\n      bracket: [],\r\n    },\r\n    reportCard: {\r\n      grade: null,\r\n      gradeStyle: null,\r\n      gradeSummary: null,\r\n      tournamentFinish: null,\r\n    },\r\n    ranking: 0,\r\n    attRanking: 0,\r\n    midRanking: 0,\r\n    defRanking: 0,\r\n    homeTeam: true,\r\n    canSoloHost32: true,\r\n    cohosts32: ['United States'],\r\n    cohosts48: [],\r\n    canSoloHost48: false,\r\n    triHosts48: ['Mexico', 'United States'],\r\n    quadHosts48: [],\r\n  },\r\n];\r\n",
            "properties": [
                {
                    "name": "abbreviation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "canSoloHost32",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "canSoloHost48",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "cohosts32",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "cohosts48",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "emoji",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "excludeLeagues",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "firstNameUsages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "lastNameUsages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "logo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "mainLeagues",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "nationTier",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "quadHosts48",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "rareLeagues",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "region",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "RegionName",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "secondLeagues",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "thirdLeagues",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "triHosts48",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 36
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "OutfieldAttributes",
            "id": "interface-OutfieldAttributes-91902ead7f4b19bc9f7c7d6aa86f0bdf84665cb6dde2326f664b4538755b6a6718c85f041635995bbe8d078734f15280a04159b3fe74528906fac499b95ea9f8",
            "file": "src/app/models/player-attributes.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface OutfieldAttributes {\r\n  [index: string]: number;\r\n  corners: number;\r\n  crossing: number;\r\n  dribbling: number;\r\n  finishing: number;\r\n  firstTouch: number;\r\n  freeKickTaking: number;\r\n  heading: number;\r\n  longShots: number;\r\n  longThrows: number;\r\n  marking: number;\r\n  passing: number;\r\n  penaltyTaking: number;\r\n  tackling: number;\r\n  technique: number;\r\n  aggression: number;\r\n  anticipation: number;\r\n  bravery: number;\r\n  composure: number;\r\n  concentration: number;\r\n  decisions: number;\r\n  determination: number;\r\n  flair: number;\r\n  leadership: number;\r\n  offTheBall: number;\r\n  positioning: number;\r\n  teamwork: number;\r\n  vision: number;\r\n  workRate: number;\r\n  acceleration: number;\r\n  agility: number;\r\n  balance: number;\r\n  jumpingReach: number;\r\n  naturalFitness: number;\r\n  pace: number;\r\n  staming: number;\r\n  strength: number;\r\n}\r\n\r\nexport interface GkAttributes {\r\n  [index: string]: number;\r\n  aerialReach: number;\r\n  commandOfArea: number;\r\n  communication: number;\r\n  eccentricity: number;\r\n  firstTouch: number;\r\n  handling: number;\r\n  kicking: number;\r\n  oneOnOnes: number;\r\n  passing: number;\r\n  punchingTendency: number;\r\n  reflexes: number;\r\n  rushingOutTendency: number;\r\n  throwing: number;\r\n  freeKickTaking: number;\r\n  penaltyTaking: number;\r\n  technique: number;\r\n  aggression: number;\r\n  anticipation: number;\r\n  bravery: number;\r\n  composure: number;\r\n  concentration: number;\r\n  decisions: number;\r\n  determination: number;\r\n  flair: number;\r\n  leadership: number;\r\n  offTheBall: number;\r\n  positioning: number;\r\n  teamwork: number;\r\n  vision: number;\r\n  workRate: number;\r\n  acceleration: number;\r\n  agility: number;\r\n  balance: number;\r\n  jumpingReach: number;\r\n  naturalFitness: number;\r\n  pace: number;\r\n  staming: number;\r\n  strength: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "acceleration",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "aggression",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "agility",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "anticipation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "balance",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "bravery",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "composure",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "concentration",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "corners",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "crossing",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "decisions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "determination",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "dribbling",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "finishing",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "firstTouch",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "flair",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "freeKickTaking",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "heading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "jumpingReach",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "leadership",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "longShots",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "longThrows",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "marking",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "naturalFitness",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "offTheBall",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "pace",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "passing",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "penaltyTaking",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "positioning",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "staming",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "strength",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "tackling",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "teamwork",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "technique",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "vision",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "workRate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 30
                }
            ],
            "indexSignatures": [
                {
                    "id": "index-declaration-91902ead7f4b19bc9f7c7d6aa86f0bdf84665cb6dde2326f664b4538755b6a6718c85f041635995bbe8d078734f15280a04159b3fe74528906fac499b95ea9f8",
                    "args": [
                        {
                            "name": "index",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "number",
                    "line": 1,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "PatchData",
            "id": "interface-PatchData-dd4b6cc36a00c48ef7afc5890a71303cefaac696b94090a365755c09225758590aa7c83352e024328b11e4860d88645fc0e5cc73c22ab1a2f6aa5a395999c1ee",
            "file": "src/app/moba/draft/draft.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Champion } from '../champion/champion.model';\nimport { Role } from '../player/player.model';\n\nexport interface DraftChampion extends Champion {\n  metaStrength: [number, number, number, number, number];\n  playerMastery: [number, number, number, number, number];\n  opponentMastery: [number, number, number, number, number];\n  currentSynergy: {\n    player?: number;\n    opp?: number;\n  };\n  currentCounter: {\n    player: {\n      top: number;\n      jungle: number;\n      mid: number;\n      adc: number;\n      support: number;\n    };\n    opp: {\n      top: number;\n      jungle: number;\n      mid: number;\n      adc: number;\n      support: number;\n    };\n  };\n  currentScore: {\n    player?: number;\n    opp?: number;\n  };\n  selectedRole: Role;\n  isPlaceholder: boolean;\n  adviceTags: {\n    player: ChampionAdvice;\n    opp: ChampionAdvice;\n  };\n}\n\nexport interface DraftPlayer {\n  mainRole: Role;\n  championMastery: TierListRankings;\n}\n\nexport interface TierListRankings {\n  s: number[];\n  a: number[];\n  b: number[];\n  c: number[];\n  d: number[];\n}\n\nexport interface AllRolesTierList {\n  top: TierListRankings;\n  jungle: TierListRankings;\n  mid: TierListRankings;\n  adc: TierListRankings;\n  support: TierListRankings;\n}\n\nexport interface CompStyleStats {\n  engage: number;\n  pick: number;\n  protect: number;\n  siege: number;\n  split: number;\n}\n\nexport interface CompStyleData {\n  name: CompStyle;\n  primary: string[];\n  secondary: string[];\n}\n\nexport interface DraftFormData {\n  userIsRedSide: boolean;\n  patchVersion: PatchVersion;\n  useAiOpponent: boolean;\n  difficulty: DraftDifficulty;\n  useRandomTeam: boolean;\n}\n\nexport interface PatchData {\n  name: PatchName;\n  version: PatchVersion;\n  excludedChamps: number[];\n  patchTierList: AllRolesTierList;\n  // counters?: AllRolesTierList;\n  // synergies?: AllRolesTierList;\n}\n\nexport interface ChampionAdvice {\n  top: DraftAdviceTag[];\n  jungle: DraftAdviceTag[];\n  mid: DraftAdviceTag[];\n  adc: DraftAdviceTag[];\n  support: DraftAdviceTag[];\n}\n\nexport type CompStyle = 'engage' | 'pick' | 'protect' | 'siege' | 'split';\nexport type PatchName = 'MSI 24';\nexport type PatchVersion = 14.8;\nexport type DraftSortHeader = 'name' | 'mastery' | 'meta' | 'synergy' | 'counter';\nexport type DraftDifficulty = 'easy' | 'medium' | 'hard';\nexport type DraftAdviceTag = 'Counters Banned' | 'Recommended' | 'Counter Pick' | 'Not Recommended' | 'High Synergy';\n\nexport type LetterRank = 'S' | 'A' | 'B' | 'C' | 'D' | 'F' | 'N/A' | 'S+' | 'S-' | 'A+' | 'A-' | 'B+' | 'B-' | 'C+' | 'C-' | 'D+' | 'D-';\nexport type DraftPhase =\n  | 'Blue Ban 1'\n  | 'Blue Ban 2'\n  | 'Blue Ban 3'\n  | 'Blue Ban 4'\n  | 'Blue Ban 5'\n  | 'Blue Pick 1'\n  | 'Blue Pick 2'\n  | 'Blue Pick 3'\n  | 'Blue Pick 4'\n  | 'Blue Pick 5'\n  | 'Red Ban 1'\n  | 'Red Ban 2'\n  | 'Red Ban 3'\n  | 'Red Ban 4'\n  | 'Red Ban 5'\n  | 'Red Pick 1'\n  | 'Red Pick 2'\n  | 'Red Pick 3'\n  | 'Red Pick 4'\n  | 'Red Pick 5'\n  | 'Draft Complete';\n\nexport function getRoleFromFilter(role: Role | 'all' | undefined): Role | undefined {\n  return role === 'all' ? undefined : role;\n}\n\nexport enum TierValue {\n  S = 20,\n  A = 16,\n  B = 12,\n  C = 8,\n  D = 4,\n  F = 0,\n}\n\nexport const tierValues: { [key: string]: TierValue } = {\n  s: TierValue.S,\n  a: TierValue.A,\n  b: TierValue.B,\n  c: TierValue.C,\n  d: TierValue.D,\n  f: TierValue.F,\n};\n\nexport const redSidePickRounds = [8, 9, 12, 17, 20];\nexport const blueSidePickRounds = [7, 10, 11, 18, 19];\nexport const redSideBanRounds = [2, 4, 6, 13, 15];\nexport const blueSideBanRounds = [1, 3, 5, 14, 16];\n\nexport const emptyDraftBans: Partial<DraftChampion>[] = [\n  {\n    isPlaceholder: true,\n    name: '1',\n  },\n  {\n    isPlaceholder: true,\n    name: '2',\n  },\n  {\n    isPlaceholder: true,\n    name: '3',\n  },\n  {\n    isPlaceholder: true,\n    name: '4',\n  },\n  {\n    isPlaceholder: true,\n    name: '5',\n  },\n];\n\nexport const compStyleReqs: CompStyleData[] = [\n  {\n    name: 'engage',\n    primary: ['mobility.engage', 'dmg.aoe', 'crowdControl.impact', 'crowdControl.aoe'],\n    secondary: ['dmg.burst', 'crowdControl.singleTarget', 'defense.mitigation', 'defense.sustain'],\n  },\n  {\n    name: 'pick',\n    primary: ['dmg.burst', 'dmg.singleTarget', 'crowdControl.singleTarget', 'dmg.skirmish'],\n    secondary: ['crowdControl.range', 'mobility.engage', 'mobility.reposition', 'crowdControl.impact'],\n  },\n  {\n    name: 'protect',\n    primary: ['dmg.dps', 'support.peel', 'support.utility', 'support.zoneControl'],\n    secondary: ['dmg.singleTarget', 'dmg.aoe', 'defense.sustain', 'defense.mitigation'],\n  },\n  {\n    name: 'siege',\n    primary: ['dmg.poke', 'dmg.siege', 'support.zoneControl', 'support.peel'],\n    secondary: ['dmg.waveClear', 'support.utility', 'dmg.dps', 'dmg.aoe'],\n  },\n  {\n    name: 'split',\n    primary: ['dmg.splitPush', 'dmg.skirmish', 'dmg.waveClear', 'support.peel'],\n    secondary: ['support.zoneControl', 'mobility.reposition', 'dmg.siege', 'dmg.singleTarget'],\n  },\n];\n\nexport const emptyDraftPicks: Partial<DraftChampion>[] = [\n  {\n    isPlaceholder: true,\n    name: 'Top',\n  },\n  {\n    isPlaceholder: true,\n    name: 'Jungle',\n  },\n  {\n    isPlaceholder: true,\n    name: 'Mid',\n  },\n  {\n    isPlaceholder: true,\n    name: 'ADC',\n  },\n  {\n    isPlaceholder: true,\n    name: 'Support',\n  },\n];\n\nexport const defaultPlayerMasteries: DraftPlayer[] = [\n  {\n    mainRole: 'top',\n    championMastery: {\n      s: [47, 44],\n      a: [45, 46, 0],\n      b: [1, 2],\n      c: [],\n      d: [],\n    },\n  },\n  {\n    mainRole: 'jungle',\n    championMastery: {\n      s: [2, 8],\n      a: [9, 10],\n      b: [11, 12],\n      c: [13],\n      d: [],\n    },\n  },\n  {\n    mainRole: 'mid',\n    championMastery: {\n      s: [18, 17],\n      a: [20, 19],\n      b: [21, 22],\n      c: [28],\n      d: [],\n    },\n  },\n  {\n    mainRole: 'adc',\n    championMastery: {\n      s: [29, 30, 31],\n      a: [32],\n      b: [33, 34],\n      c: [],\n      d: [],\n    },\n  },\n  {\n    mainRole: 'support',\n    championMastery: {\n      s: [36, 37],\n      a: [38, 39],\n      b: [40, 41],\n      c: [53],\n      d: [],\n    },\n  },\n];\nexport const defaultOpponentMasteries: DraftPlayer[] = [\n  {\n    mainRole: 'top',\n    championMastery: {\n      s: [1, 2],\n      a: [45, 46, 0],\n      b: [47, 44],\n      c: [],\n      d: [],\n    },\n  },\n  {\n    mainRole: 'jungle',\n    championMastery: {\n      s: [9, 10],\n      a: [11],\n      b: [12],\n      c: [13, 2, 8],\n      d: [],\n    },\n  },\n  {\n    mainRole: 'mid',\n    championMastery: {\n      s: [21, 22],\n      a: [20, 19],\n      b: [18, 17],\n      c: [],\n      d: [],\n    },\n  },\n  {\n    mainRole: 'adc',\n    championMastery: {\n      s: [33, 34, 35],\n      a: [32],\n      b: [29, 30, 31],\n      c: [],\n      d: [],\n    },\n  },\n  {\n    mainRole: 'support',\n    championMastery: {\n      s: [53],\n      a: [39, 40],\n      b: [40, 38],\n      c: [36, 37],\n      d: [],\n    },\n  },\n];\n",
            "properties": [
                {
                    "name": "excludedChamps",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 86
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PatchName",
                    "optional": false,
                    "description": "",
                    "line": 84
                },
                {
                    "name": "patchTierList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AllRolesTierList",
                    "optional": false,
                    "description": "",
                    "line": 87
                },
                {
                    "name": "version",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PatchVersion",
                    "optional": false,
                    "description": "",
                    "line": 85
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Person",
            "id": "interface-Person-81362b8d7114cfdde8f279d2327def3ac33009e8e6d75ec2a61d46cccf66a9b59b5c0f81e30bfc23f51c3fc599e5b084878001b62f7baf6943a2dc40b8335d1c",
            "file": "src/app/models/player.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { OutfieldAttributes, GkAttributes } from './player-attributes.model';\r\n\r\nexport interface Person {\r\n  firstNames: string[];\r\n  lastNames: string[];\r\n  firstInitial: string;\r\n  singleLastName: string;\r\n  firstNameUsage: string;\r\n  lastNameUsage: string;\r\n  nationality: string;\r\n  age: number;\r\n  personality?: string;\r\n  origin?: string;\r\n  playerFace?: string;\r\n  rating?: number;\r\n  nickname?: string;\r\n}\r\n\r\nexport interface Player extends Person {\r\n  mainPositions: string[];\r\n  altPositions: string[];\r\n  competentPositions: string[];\r\n  unconvincingPositions: string[];\r\n  foot: string;\r\n  nationalityLogo: string;\r\n  club: string;\r\n  clubLogo: string;\r\n  playerFace?: string;\r\n  preferredRole: string;\r\n  preferredDuty: string;\r\n  // Attributes will be all the numeric attributes for a player.\r\n  // This will be generated based on the overall rating, position, foot, and other factors.\r\n  // This will most likely be an object with many numeric values.\r\n  attributes: OutfieldAttributes | GkAttributes;\r\n  outfieldAttributes?: OutfieldAttributes;\r\n  gkAttributes?: GkAttributes;\r\n  displayHeight?: string;\r\n  height: number;\r\n  weight: number;\r\n  weakFoot: number;\r\n  displayWeakFoot?: string;\r\n\r\n  // Properties only for the drag/drop pitch UI\r\n  displayName?: string;\r\n  pitchPosition?: string;\r\n  pitchPositionIndex?: number;\r\n  pitchRating?: number;\r\n  chemistryNum?: number;\r\n  // *** Above are properties we've already added ***\r\n  // *** Below are properties we've yet to add ***\r\n\r\n  middleName?: string;\r\n  nickname?: string;\r\n\r\n  altNationality?: string;\r\n  relationships?: unknown[];\r\n  // Relationships should be an array of players, it will show that the two are linked. Not sure if this should be an array or an object yet.\r\n  hiddenAttributes?: unknown;\r\n  // This is the same as attributes, except that it will be hidden to the user to allow for greater realism. This will include things like loyalty, ambition, temperament, ambition, adaptability, etc.\r\n  mediaDescription?: string;\r\n  playerTraits?: string[];\r\n}\r\n",
            "properties": [
                {
                    "name": "age",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "firstInitial",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "firstNames",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "firstNameUsage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "lastNames",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "lastNameUsage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "nationality",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "nickname",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "origin",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "personality",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "playerFace",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "rating",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "singleLastName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Player",
            "id": "interface-Player-81362b8d7114cfdde8f279d2327def3ac33009e8e6d75ec2a61d46cccf66a9b59b5c0f81e30bfc23f51c3fc599e5b084878001b62f7baf6943a2dc40b8335d1c",
            "file": "src/app/models/player.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { OutfieldAttributes, GkAttributes } from './player-attributes.model';\r\n\r\nexport interface Person {\r\n  firstNames: string[];\r\n  lastNames: string[];\r\n  firstInitial: string;\r\n  singleLastName: string;\r\n  firstNameUsage: string;\r\n  lastNameUsage: string;\r\n  nationality: string;\r\n  age: number;\r\n  personality?: string;\r\n  origin?: string;\r\n  playerFace?: string;\r\n  rating?: number;\r\n  nickname?: string;\r\n}\r\n\r\nexport interface Player extends Person {\r\n  mainPositions: string[];\r\n  altPositions: string[];\r\n  competentPositions: string[];\r\n  unconvincingPositions: string[];\r\n  foot: string;\r\n  nationalityLogo: string;\r\n  club: string;\r\n  clubLogo: string;\r\n  playerFace?: string;\r\n  preferredRole: string;\r\n  preferredDuty: string;\r\n  // Attributes will be all the numeric attributes for a player.\r\n  // This will be generated based on the overall rating, position, foot, and other factors.\r\n  // This will most likely be an object with many numeric values.\r\n  attributes: OutfieldAttributes | GkAttributes;\r\n  outfieldAttributes?: OutfieldAttributes;\r\n  gkAttributes?: GkAttributes;\r\n  displayHeight?: string;\r\n  height: number;\r\n  weight: number;\r\n  weakFoot: number;\r\n  displayWeakFoot?: string;\r\n\r\n  // Properties only for the drag/drop pitch UI\r\n  displayName?: string;\r\n  pitchPosition?: string;\r\n  pitchPositionIndex?: number;\r\n  pitchRating?: number;\r\n  chemistryNum?: number;\r\n  // *** Above are properties we've already added ***\r\n  // *** Below are properties we've yet to add ***\r\n\r\n  middleName?: string;\r\n  nickname?: string;\r\n\r\n  altNationality?: string;\r\n  relationships?: unknown[];\r\n  // Relationships should be an array of players, it will show that the two are linked. Not sure if this should be an array or an object yet.\r\n  hiddenAttributes?: unknown;\r\n  // This is the same as attributes, except that it will be hidden to the user to allow for greater realism. This will include things like loyalty, ambition, temperament, ambition, adaptability, etc.\r\n  mediaDescription?: string;\r\n  playerTraits?: string[];\r\n}\r\n",
            "properties": [
                {
                    "name": "altNationality",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "altPositions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "attributes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "OutfieldAttributes | GkAttributes",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "chemistryNum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "club",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "clubLogo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "competentPositions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "displayHeight",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "displayName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "displayWeakFoot",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "foot",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "gkAttributes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GkAttributes",
                    "optional": true,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "height",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "hiddenAttributes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": true,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "mainPositions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "mediaDescription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "middleName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "nationalityLogo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "nickname",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "outfieldAttributes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "OutfieldAttributes",
                    "optional": true,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "pitchPosition",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "pitchPositionIndex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "pitchRating",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "playerFace",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "playerTraits",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": true,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "preferredDuty",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "preferredRole",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "relationships",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": true,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "unconvincingPositions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "weakFoot",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "weight",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 39
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [
                "Person"
            ]
        },
        {
            "name": "Player",
            "id": "interface-Player-c4eacd75df6cffebda8578af56486186acf2da81c1e5fad3cf4f6d89380a4a74f0e46d5d76723772b4ec81f67c981743fee3294763633bb82fd59d543106977b-1",
            "file": "src/app/moba/player/player.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Nation } from 'app/models/nation.model';\r\nimport { Champion } from '../champion/champion.model';\r\n\r\nexport interface Player {\r\n  id: number;\r\n  age: number;\r\n  gamerTag: GamerTag;\r\n  mainRole: Role;\r\n  offRoles: Role[];\r\n  gameStateStrength: GameState;\r\n  playStyle: PlayStyle;\r\n  nationality: Nation;\r\n  currentRoleRating: number;\r\n  attributes: MobaAttributes;\r\n  champMains: Champion[];\r\n  currentRole?: Role;\r\n}\r\n\r\nexport interface MobaAttributes {\r\n  mechanics: MechanicAttributes;\r\n  intangible: IntangibleAttributes;\r\n  macro: MacroAttributes;\r\n}\r\n\r\nexport interface MechanicAttributes {\r\n  farming: number;\r\n  apm: number;\r\n  dueling: number;\r\n  team_fighting: number;\r\n}\r\n\r\nexport interface IntangibleAttributes {\r\n  flexibility: number;\r\n  winning: number;\r\n  composure: number;\r\n  consistency: number;\r\n  in_game_leader: number;\r\n  game_knowledge: number;\r\n}\r\n\r\nexport interface MacroAttributes {\r\n  pathing: number;\r\n  vision_control: number;\r\n  map_positioning: number;\r\n  neutral_control: number;\r\n}\r\n\r\nexport interface GamerTag {\r\n  id: number;\r\n  name: string;\r\n  nationality: string;\r\n}\r\n\r\nexport const rolePriority: { [key: string]: number } = {\r\n  top: 1,\r\n  jungle: 2,\r\n  mid: 3,\r\n  adc: 4,\r\n  support: 5,\r\n};\r\n\r\nexport const sortByMainRole = (players: Player[]): Player[] => {\r\n  return players.sort((a, b) => {\r\n    const aRolePriority = rolePriority[a.mainRole] || Infinity;\r\n    const bRolePriority = rolePriority[b.mainRole] || Infinity;\r\n\r\n    return aRolePriority - bRolePriority;\r\n  });\r\n};\r\n\r\nexport type Role = 'top' | 'jungle' | 'mid' | 'adc' | 'support';\r\nexport enum RoleIndex {\r\n  TOP,\r\n  JUNGLE,\r\n  MID,\r\n  ADC,\r\n  SUPPORT,\r\n}\r\nexport type FilterRole = Role | 'all';\r\nexport type GameState = 'early-game' | 'mid-game' | 'late-game';\r\nexport type PlayStyle =\r\n  | 'scaler'\r\n  | 'mechanical god'\r\n  | 'split-pusher'\r\n  | 'team-fighter'\r\n  | 'closer'\r\n  | 'flex god'\r\n  | 'macro-player'\r\n  | 'leader'\r\n  | 'baron stealer'\r\n  | 'prodigy'\r\n  | 'journeyman'\r\n  | 'specialist';\r\n\r\nexport const AllUniquePlayStyles: PlayStyle[] = [\r\n  'scaler',\r\n  'mechanical god',\r\n  'split-pusher',\r\n  'team-fighter',\r\n  'flex god',\r\n  'macro-player',\r\n  'leader',\r\n  'closer',\r\n  'baron stealer',\r\n];\r\nexport const AllRoles: Role[] = ['top', 'jungle', 'mid', 'adc', 'support'];\r\nexport function isRole(value: unknown): value is Role {\r\n  return typeof value === 'string' && AllRoles.includes(value as Role);\r\n}\r\nexport const AllGameStates: GameState[] = ['early-game', 'mid-game', 'late-game'];\r\n\r\nexport const positions: { name: Role; url: string }[] = [\r\n  {\r\n    name: 'top',\r\n    url: 'assets/images/role_icons/top.webp',\r\n  },\r\n  {\r\n    name: 'jungle',\r\n    url: 'assets/images/role_icons/jungle.webp',\r\n  },\r\n  {\r\n    name: 'mid',\r\n    url: 'assets/images/role_icons/mid.webp',\r\n  },\r\n  {\r\n    name: 'adc',\r\n    url: 'assets/images/role_icons/adc.webp',\r\n  },\r\n  {\r\n    name: 'support',\r\n    url: 'assets/images/role_icons/support.webp',\r\n  },\r\n];\r\n\r\nexport const positionFilters: { name: Role | 'all'; url: string }[] = Array.from([\r\n  {\r\n    name: 'all',\r\n    url: 'assets/images/role_icons/all.webp',\r\n  },\r\n  ...positions,\r\n]);\r\n",
            "properties": [
                {
                    "name": "age",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "attributes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MobaAttributes",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "champMains",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Champion[]",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "currentRole",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Role",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "currentRoleRating",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "gamerTag",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GamerTag",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "gameStateStrength",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GameState",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "mainRole",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Role",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "nationality",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Nation",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "offRoles",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Role[]",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "playStyle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PlayStyle",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "Player-1"
        },
        {
            "name": "PlayerCareer",
            "id": "interface-PlayerCareer-864f5230a055c715e78820c083f48ae78658929e7b94faa98c2b1cad6c32d7e569189e6bca7a073c9c5183c26569d84bbd06c58b2f7865c361c63f86de27a221",
            "file": "src/app/career/player/player.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Club } from 'app/models/club.model';\r\nimport { Nation } from 'app/models/nation.model';\r\nimport { ClubStats, LeagueDifficulty, TransferOption } from '../club/club.model';\r\n\r\nexport interface PlayerCareer {\r\n  // current\r\n  age: number;\r\n  currentAbility: number;\r\n  potentialAbility: number;\r\n  playingTime: PlayingTime;\r\n  wage: number;\r\n  recentTransferFee: number;\r\n  seasonStats: {\r\n    league: CompetitionStats;\r\n    cup: CompetitionStats;\r\n    continental: CompetitionStats;\r\n  };\r\n  currentClub?: Club;\r\n  position?: string;\r\n  // career/total\r\n  careerOverview: CareerOverview;\r\n}\r\n\r\nexport type PlayingTime =\r\n  | 'breakthrough prospect'\r\n  | 'fringe player'\r\n  | 'impact sub'\r\n  | 'squad player'\r\n  | 'regular starter'\r\n  | 'important player'\r\n  | 'star player';\r\n\r\nexport interface CareerOverview {\r\n  seasons: string;\r\n  yearsActive: number;\r\n  totalStats: SeasonStats;\r\n  totalEarnings: number;\r\n  score: CareerScore;\r\n  peakAbility: number;\r\n  peakClubAbility: number;\r\n  avgLeagueAbility: number;\r\n  totalPossibleApps: number;\r\n  clubStats: ClubStats[];\r\n  nationality: Nation | Partial<Nation>;\r\n  longestServedClub?: ClubStats;\r\n}\r\n\r\nexport interface CareerScore {\r\n  totalScore: number;\r\n  abilityScore: number;\r\n  peakClubScore: number;\r\n  avgLeagueScore: number;\r\n  availabilityScore: number;\r\n  goalScore: number;\r\n}\r\n\r\nexport interface Season {\r\n  id: number;\r\n  year: string;\r\n  age: number;\r\n  stats: SeasonStats;\r\n  leagueDifficulty: LeagueDifficulty;\r\n  currentAbility: number;\r\n  potentialAbility: number;\r\n  currentClub?: TransferOption;\r\n}\r\n\r\nexport interface SeasonStats {\r\n  allComps: CompetitionStats;\r\n  league: CompetitionStats;\r\n  cup: CompetitionStats;\r\n  continental: CompetitionStats;\r\n}\r\n\r\nexport interface AppearanceStats {\r\n  appearances: {\r\n    starts: number;\r\n    sub: number;\r\n    total: number;\r\n  };\r\n}\r\n\r\nexport interface CompetitionStats extends AppearanceStats {\r\n  goals: number;\r\n  assists: number;\r\n  avgRating: number;\r\n  aggRating: number;\r\n}\r\n\r\nexport const defaultCompStats: CompetitionStats = {\r\n  appearances: {\r\n    starts: 0,\r\n    sub: 0,\r\n    total: 0,\r\n  },\r\n  goals: 0,\r\n  assists: 0,\r\n  avgRating: 6.0,\r\n  aggRating: 0,\r\n};\r\n\r\nexport const defaultSeasonStats: SeasonStats = {\r\n  allComps: { ...defaultCompStats },\r\n  league: { ...defaultCompStats },\r\n  cup: { ...defaultCompStats },\r\n  continental: { ...defaultCompStats },\r\n};\r\n",
            "properties": [
                {
                    "name": "age",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "careerOverview",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CareerOverview",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "currentAbility",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "currentClub",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Club",
                    "optional": true,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "playingTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PlayingTime",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "position",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "potentialAbility",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "recentTransferFee",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "seasonStats",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "wage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "PositionBox",
            "id": "interface-PositionBox-a222ae11e5b72f0bcdf59823abbe69b015d39669a7000eefb384416f9c79274c087fcbd6e585e8ed1b8723a1435ec7af278c7d867b24e9c2bb21dc248d13c55f",
            "file": "src/app/models/position-box.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Player } from './player.model';\r\nexport interface PositionBox {\r\n  pitchPlayer?: Player;\r\n  class: string;\r\n  posBoxClass: string;\r\n  playerClass: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "class",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "pitchPlayer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Player",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "playerClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "posBoxClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "RankingsRow",
            "id": "interface-RankingsRow-807d7da2a6b2d9e3df2f245f88a9b3a2b797f9abb801eb2e104368c88e374ac8f46a0b5b4447128424b07b7d2780ab154ae48e98ac6a1118398f73327c29f1f5",
            "file": "src/app/simulation/stats-overview/stats-overview.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, HostListener } from '@angular/core';\r\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\r\nimport { GroupTeam } from 'app/models/nation.model';\r\nimport { Tournament } from 'app/simulation/simulation.model';\r\nimport { SimulationService } from 'app/simulation/simulation.service';\r\nimport { getDisplayRating } from 'app/simulation/simulation.utils';\r\nimport { get as _get } from 'lodash-es';\r\n\r\ninterface RankingsRow {\r\n  overall: GroupTeam;\r\n  attack: GroupTeam;\r\n  midfield: GroupTeam;\r\n  defense: GroupTeam;\r\n}\r\n\r\n@UntilDestroy()\r\n@Component({\r\n  selector: 'app-stats-overview',\r\n  templateUrl: './stats-overview.component.html',\r\n  styleUrls: ['./stats-overview.component.scss'],\r\n})\r\nexport class StatsOverviewComponent {\r\n  service: SimulationService;\r\n  screenWidth: number;\r\n  get = _get;\r\n  getDisplayRating = getDisplayRating;\r\n  tournament: Tournament | null = null;\r\n  // rankings: { heading: string; prop: string; class: string; nations?: GroupTeam[] }[] | null = null;\r\n  rankings: GroupTeam[][] = [];\r\n\r\n  tournamentStats = [\r\n    {\r\n      emoji: '🥇',\r\n    },\r\n    {\r\n      emoji: '🥈',\r\n    },\r\n    {\r\n      emoji: '🥉',\r\n    },\r\n    {\r\n      emoji: '📉',\r\n    },\r\n    {\r\n      emoji: '📈',\r\n    },\r\n  ];\r\n\r\n  constructor(service: SimulationService) {\r\n    this.service = service;\r\n    this.screenWidth = window.innerWidth;\r\n    this.getScreenSize();\r\n    service.tournament$.pipe(untilDestroyed(this)).subscribe(t => {\r\n      if (!t?.awards || !t?.allTeams) {\r\n        return;\r\n      }\r\n      this.tournament = t;\r\n      this.rankings = [];\r\n      for (let i = 0; i < t.allTeams.rankings.length; i++) {\r\n        this.rankings.push([t.allTeams.rankings[i], t.allTeams.attRankings[i], t.allTeams.midRankings[i], t.allTeams.defRankings[i]]);\r\n      }\r\n      // this.rankings = null;\r\n      // this.rankings = [\r\n      //   {\r\n      //     heading: 'Overall',\r\n      //     prop: 'r',\r\n      //     class: 'main',\r\n      //     nations: t.allTeams.rankings,\r\n      //   },\r\n      //   {\r\n      //     heading: 'Attack',\r\n      //     prop: 'attR',\r\n      //     class: 'att',\r\n      //     nations: t.allTeams.attRankings,\r\n      //   },\r\n      //   {\r\n      //     heading: 'Midfield',\r\n      //     prop: 'midR',\r\n      //     class: 'mid',\r\n      //     nations: t.allTeams.midRankings,\r\n      //   },\r\n      //   {\r\n      //     heading: 'Defense',\r\n      //     prop: 'defR',\r\n      //     class: 'def',\r\n      //     nations: t.allTeams.defRankings,\r\n      //   },\r\n      // ];\r\n    });\r\n  }\r\n\r\n  @HostListener('window:resize', ['$event'])\r\n  getScreenSize() {\r\n    this.screenWidth = window.innerWidth;\r\n  }\r\n\r\n  openNationStats(nation: GroupTeam | null) {\r\n    this.service.changeSelectedNation(nation);\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "attack",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GroupTeam",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "defense",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GroupTeam",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "midfield",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GroupTeam",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "overall",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GroupTeam",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Region",
            "id": "interface-Region-38aa69a25082a42e29d7380499cc14028c131842d749e00cee576b75189f0bb552b085feb5a8111108a7f2048f71b49016a54a3d6b4aa341accb0cf41ce579f9",
            "file": "src/app/simulation/simulation.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { GroupTeam } from 'app/models/nation.model';\r\n\r\nexport interface Match {\r\n  goalsFor: number;\r\n  goalsAg: number;\r\n  isEtWin: boolean;\r\n  isPenaltyWin: boolean;\r\n  winner: GroupTeam;\r\n  loser: GroupTeam;\r\n  score: string;\r\n  eventTimes: {\r\n    winner: MatchEvent[];\r\n    loser: MatchEvent[];\r\n  };\r\n}\r\n\r\nexport interface MatchEvent {\r\n  time: string;\r\n  emoji: EventEmoji;\r\n  type?: string;\r\n}\r\n\r\nexport type EventEmoji = '⚽' | '🟨' | '🟥' | '🟨🟥' | '🚑';\r\nexport type KnockoutRound = [GroupTeam, GroupTeam, Match][];\r\n\r\nexport interface Tournament {\r\n  availableRegions?: Region[];\r\n  hostNations?: GroupTeam[];\r\n  allTeams?: {\r\n    rankings: GroupTeam[];\r\n    attRankings: GroupTeam[];\r\n    midRankings: GroupTeam[];\r\n    defRankings: GroupTeam[];\r\n  };\r\n  groups?: GroupTeam[][];\r\n  groupWinners?: GroupTeam[];\r\n  bracket?: {\r\n    roundOf32?: KnockoutRound;\r\n    roundOf16: KnockoutRound;\r\n    quarterFinals: KnockoutRound;\r\n    semiFinals: KnockoutRound;\r\n    finals: KnockoutRound;\r\n  };\r\n  awards?: [\r\n    first: GroupTeam,\r\n    second: GroupTeam,\r\n    third: GroupTeam,\r\n    underPerformer: GroupTeam,\r\n    overPerformer: GroupTeam,\r\n    uefa?: GroupTeam,\r\n    afc?: GroupTeam,\r\n    caf?: GroupTeam,\r\n    concacaf?: GroupTeam,\r\n    conmebol?: GroupTeam,\r\n    ofc?: GroupTeam\r\n  ];\r\n}\r\n\r\nexport interface Region {\r\n  label: string;\r\n  value: RegionName;\r\n  numOfTeams: number;\r\n  qualifiers: {\r\n    auto: number;\r\n    extra: number;\r\n  };\r\n}\r\n\r\nexport interface TeamsByRegion {\r\n  uefa?: GroupTeam[];\r\n  afc?: GroupTeam[];\r\n  caf?: GroupTeam[];\r\n  concacaf?: GroupTeam[];\r\n  conmebol?: GroupTeam[];\r\n  ofc?: GroupTeam[];\r\n}\r\n\r\n// eslint-disable-next-line no-shadow\r\nexport enum RegionName {\r\n  uefa = 'uefa',\r\n  afc = 'afc',\r\n  caf = 'caf',\r\n  concacaf = 'concacaf',\r\n  conmebol = 'conmebol',\r\n  ofc = 'ofc',\r\n}\r\n",
            "properties": [
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "numOfTeams",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "qualifiers",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 63
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "RegionName",
                    "optional": false,
                    "description": "",
                    "line": 61
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Roster",
            "id": "interface-Roster-ff47d7d7e8bb871ab0b9bd0fbc5117eca381ab478b4cc08a5f28e9525dd9316fdf8e267c7d4b1bf6679079d3f9edd9fdd42ed573169693c50efc19d7bb37b62e",
            "file": "src/app/models/roster.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { User } from '@core/services/firestore.model';\r\nimport { Player } from './player.model';\r\n\r\nexport interface RosterData {\r\n  user: User;\r\n  id: string;\r\n  nationOrTier: string;\r\n}\r\n\r\nexport interface Roster extends RosterData {\r\n  tier: string;\r\n  nation: string;\r\n  players: Player[];\r\n  starters?: Player[];\r\n  benchReserves?: Player[];\r\n  startersRating?: number;\r\n  squadRating?: number;\r\n  formation?: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "benchReserves",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Player[]",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "formation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "nation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "players",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Player[]",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "squadRating",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "starters",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Player[]",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "startersRating",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "tier",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [
                "RosterData"
            ]
        },
        {
            "name": "RosterData",
            "id": "interface-RosterData-ff47d7d7e8bb871ab0b9bd0fbc5117eca381ab478b4cc08a5f28e9525dd9316fdf8e267c7d4b1bf6679079d3f9edd9fdd42ed573169693c50efc19d7bb37b62e",
            "file": "src/app/models/roster.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { User } from '@core/services/firestore.model';\r\nimport { Player } from './player.model';\r\n\r\nexport interface RosterData {\r\n  user: User;\r\n  id: string;\r\n  nationOrTier: string;\r\n}\r\n\r\nexport interface Roster extends RosterData {\r\n  tier: string;\r\n  nation: string;\r\n  players: Player[];\r\n  starters?: Player[];\r\n  benchReserves?: Player[];\r\n  startersRating?: number;\r\n  squadRating?: number;\r\n  formation?: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "nationOrTier",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Season",
            "id": "interface-Season-864f5230a055c715e78820c083f48ae78658929e7b94faa98c2b1cad6c32d7e569189e6bca7a073c9c5183c26569d84bbd06c58b2f7865c361c63f86de27a221",
            "file": "src/app/career/player/player.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Club } from 'app/models/club.model';\r\nimport { Nation } from 'app/models/nation.model';\r\nimport { ClubStats, LeagueDifficulty, TransferOption } from '../club/club.model';\r\n\r\nexport interface PlayerCareer {\r\n  // current\r\n  age: number;\r\n  currentAbility: number;\r\n  potentialAbility: number;\r\n  playingTime: PlayingTime;\r\n  wage: number;\r\n  recentTransferFee: number;\r\n  seasonStats: {\r\n    league: CompetitionStats;\r\n    cup: CompetitionStats;\r\n    continental: CompetitionStats;\r\n  };\r\n  currentClub?: Club;\r\n  position?: string;\r\n  // career/total\r\n  careerOverview: CareerOverview;\r\n}\r\n\r\nexport type PlayingTime =\r\n  | 'breakthrough prospect'\r\n  | 'fringe player'\r\n  | 'impact sub'\r\n  | 'squad player'\r\n  | 'regular starter'\r\n  | 'important player'\r\n  | 'star player';\r\n\r\nexport interface CareerOverview {\r\n  seasons: string;\r\n  yearsActive: number;\r\n  totalStats: SeasonStats;\r\n  totalEarnings: number;\r\n  score: CareerScore;\r\n  peakAbility: number;\r\n  peakClubAbility: number;\r\n  avgLeagueAbility: number;\r\n  totalPossibleApps: number;\r\n  clubStats: ClubStats[];\r\n  nationality: Nation | Partial<Nation>;\r\n  longestServedClub?: ClubStats;\r\n}\r\n\r\nexport interface CareerScore {\r\n  totalScore: number;\r\n  abilityScore: number;\r\n  peakClubScore: number;\r\n  avgLeagueScore: number;\r\n  availabilityScore: number;\r\n  goalScore: number;\r\n}\r\n\r\nexport interface Season {\r\n  id: number;\r\n  year: string;\r\n  age: number;\r\n  stats: SeasonStats;\r\n  leagueDifficulty: LeagueDifficulty;\r\n  currentAbility: number;\r\n  potentialAbility: number;\r\n  currentClub?: TransferOption;\r\n}\r\n\r\nexport interface SeasonStats {\r\n  allComps: CompetitionStats;\r\n  league: CompetitionStats;\r\n  cup: CompetitionStats;\r\n  continental: CompetitionStats;\r\n}\r\n\r\nexport interface AppearanceStats {\r\n  appearances: {\r\n    starts: number;\r\n    sub: number;\r\n    total: number;\r\n  };\r\n}\r\n\r\nexport interface CompetitionStats extends AppearanceStats {\r\n  goals: number;\r\n  assists: number;\r\n  avgRating: number;\r\n  aggRating: number;\r\n}\r\n\r\nexport const defaultCompStats: CompetitionStats = {\r\n  appearances: {\r\n    starts: 0,\r\n    sub: 0,\r\n    total: 0,\r\n  },\r\n  goals: 0,\r\n  assists: 0,\r\n  avgRating: 6.0,\r\n  aggRating: 0,\r\n};\r\n\r\nexport const defaultSeasonStats: SeasonStats = {\r\n  allComps: { ...defaultCompStats },\r\n  league: { ...defaultCompStats },\r\n  cup: { ...defaultCompStats },\r\n  continental: { ...defaultCompStats },\r\n};\r\n",
            "properties": [
                {
                    "name": "age",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "currentAbility",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 63
                },
                {
                    "name": "currentClub",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TransferOption",
                    "optional": true,
                    "description": "",
                    "line": 65
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "leagueDifficulty",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LeagueDifficulty",
                    "optional": false,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "potentialAbility",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "stats",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SeasonStats",
                    "optional": false,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "year",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 59
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "SeasonStats",
            "id": "interface-SeasonStats-864f5230a055c715e78820c083f48ae78658929e7b94faa98c2b1cad6c32d7e569189e6bca7a073c9c5183c26569d84bbd06c58b2f7865c361c63f86de27a221",
            "file": "src/app/career/player/player.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Club } from 'app/models/club.model';\r\nimport { Nation } from 'app/models/nation.model';\r\nimport { ClubStats, LeagueDifficulty, TransferOption } from '../club/club.model';\r\n\r\nexport interface PlayerCareer {\r\n  // current\r\n  age: number;\r\n  currentAbility: number;\r\n  potentialAbility: number;\r\n  playingTime: PlayingTime;\r\n  wage: number;\r\n  recentTransferFee: number;\r\n  seasonStats: {\r\n    league: CompetitionStats;\r\n    cup: CompetitionStats;\r\n    continental: CompetitionStats;\r\n  };\r\n  currentClub?: Club;\r\n  position?: string;\r\n  // career/total\r\n  careerOverview: CareerOverview;\r\n}\r\n\r\nexport type PlayingTime =\r\n  | 'breakthrough prospect'\r\n  | 'fringe player'\r\n  | 'impact sub'\r\n  | 'squad player'\r\n  | 'regular starter'\r\n  | 'important player'\r\n  | 'star player';\r\n\r\nexport interface CareerOverview {\r\n  seasons: string;\r\n  yearsActive: number;\r\n  totalStats: SeasonStats;\r\n  totalEarnings: number;\r\n  score: CareerScore;\r\n  peakAbility: number;\r\n  peakClubAbility: number;\r\n  avgLeagueAbility: number;\r\n  totalPossibleApps: number;\r\n  clubStats: ClubStats[];\r\n  nationality: Nation | Partial<Nation>;\r\n  longestServedClub?: ClubStats;\r\n}\r\n\r\nexport interface CareerScore {\r\n  totalScore: number;\r\n  abilityScore: number;\r\n  peakClubScore: number;\r\n  avgLeagueScore: number;\r\n  availabilityScore: number;\r\n  goalScore: number;\r\n}\r\n\r\nexport interface Season {\r\n  id: number;\r\n  year: string;\r\n  age: number;\r\n  stats: SeasonStats;\r\n  leagueDifficulty: LeagueDifficulty;\r\n  currentAbility: number;\r\n  potentialAbility: number;\r\n  currentClub?: TransferOption;\r\n}\r\n\r\nexport interface SeasonStats {\r\n  allComps: CompetitionStats;\r\n  league: CompetitionStats;\r\n  cup: CompetitionStats;\r\n  continental: CompetitionStats;\r\n}\r\n\r\nexport interface AppearanceStats {\r\n  appearances: {\r\n    starts: number;\r\n    sub: number;\r\n    total: number;\r\n  };\r\n}\r\n\r\nexport interface CompetitionStats extends AppearanceStats {\r\n  goals: number;\r\n  assists: number;\r\n  avgRating: number;\r\n  aggRating: number;\r\n}\r\n\r\nexport const defaultCompStats: CompetitionStats = {\r\n  appearances: {\r\n    starts: 0,\r\n    sub: 0,\r\n    total: 0,\r\n  },\r\n  goals: 0,\r\n  assists: 0,\r\n  avgRating: 6.0,\r\n  aggRating: 0,\r\n};\r\n\r\nexport const defaultSeasonStats: SeasonStats = {\r\n  allComps: { ...defaultCompStats },\r\n  league: { ...defaultCompStats },\r\n  cup: { ...defaultCompStats },\r\n  continental: { ...defaultCompStats },\r\n};\r\n",
            "properties": [
                {
                    "name": "allComps",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CompetitionStats",
                    "optional": false,
                    "description": "",
                    "line": 69
                },
                {
                    "name": "continental",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CompetitionStats",
                    "optional": false,
                    "description": "",
                    "line": 72
                },
                {
                    "name": "cup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CompetitionStats",
                    "optional": false,
                    "description": "",
                    "line": 71
                },
                {
                    "name": "league",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CompetitionStats",
                    "optional": false,
                    "description": "",
                    "line": 70
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "SquadRule",
            "id": "interface-SquadRule-81ccb3b49a983464153d6abb195fcf6966de1f6ce0b233f8dcd24dab21ee21d91e59f907004c950b08b58bda1a3d811441aab991c7f84f292bf886510808d425",
            "file": "src/app/shared/constants/squad-rules.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface SquadRule {\r\n  text: string;\r\n  check: '❌' | '→' | '✅';\r\n}\r\n\r\nexport const SQUAD_RULES: SquadRule[] = [\r\n  {\r\n    text: '1 starting goalkeeper',\r\n    check: '❌',\r\n  },\r\n  {\r\n    text: 'EXACTLY 3 goalkeepers in squad',\r\n    check: '❌',\r\n  },\r\n  {\r\n    text: '3-4 starting defenders',\r\n    check: '❌',\r\n  },\r\n  {\r\n    text: 'min. 6 defenders in squad',\r\n    check: '❌',\r\n  },\r\n  {\r\n    text: '2-6 starting midfielders',\r\n    check: '❌',\r\n  },\r\n  {\r\n    text: 'min. 5 midfielders in squad',\r\n    check: '❌',\r\n  },\r\n  {\r\n    text: 'Valid formation',\r\n    check: '❌',\r\n  },\r\n  {\r\n    text: 'Backup player in each position',\r\n    check: '❌',\r\n  },\r\n  {\r\n    text: '',\r\n    check: '→',\r\n  },\r\n];\r\n",
            "properties": [
                {
                    "name": "check",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"❌\" | \"→\" | \"✅\"",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "TeamsByRegion",
            "id": "interface-TeamsByRegion-38aa69a25082a42e29d7380499cc14028c131842d749e00cee576b75189f0bb552b085feb5a8111108a7f2048f71b49016a54a3d6b4aa341accb0cf41ce579f9",
            "file": "src/app/simulation/simulation.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { GroupTeam } from 'app/models/nation.model';\r\n\r\nexport interface Match {\r\n  goalsFor: number;\r\n  goalsAg: number;\r\n  isEtWin: boolean;\r\n  isPenaltyWin: boolean;\r\n  winner: GroupTeam;\r\n  loser: GroupTeam;\r\n  score: string;\r\n  eventTimes: {\r\n    winner: MatchEvent[];\r\n    loser: MatchEvent[];\r\n  };\r\n}\r\n\r\nexport interface MatchEvent {\r\n  time: string;\r\n  emoji: EventEmoji;\r\n  type?: string;\r\n}\r\n\r\nexport type EventEmoji = '⚽' | '🟨' | '🟥' | '🟨🟥' | '🚑';\r\nexport type KnockoutRound = [GroupTeam, GroupTeam, Match][];\r\n\r\nexport interface Tournament {\r\n  availableRegions?: Region[];\r\n  hostNations?: GroupTeam[];\r\n  allTeams?: {\r\n    rankings: GroupTeam[];\r\n    attRankings: GroupTeam[];\r\n    midRankings: GroupTeam[];\r\n    defRankings: GroupTeam[];\r\n  };\r\n  groups?: GroupTeam[][];\r\n  groupWinners?: GroupTeam[];\r\n  bracket?: {\r\n    roundOf32?: KnockoutRound;\r\n    roundOf16: KnockoutRound;\r\n    quarterFinals: KnockoutRound;\r\n    semiFinals: KnockoutRound;\r\n    finals: KnockoutRound;\r\n  };\r\n  awards?: [\r\n    first: GroupTeam,\r\n    second: GroupTeam,\r\n    third: GroupTeam,\r\n    underPerformer: GroupTeam,\r\n    overPerformer: GroupTeam,\r\n    uefa?: GroupTeam,\r\n    afc?: GroupTeam,\r\n    caf?: GroupTeam,\r\n    concacaf?: GroupTeam,\r\n    conmebol?: GroupTeam,\r\n    ofc?: GroupTeam\r\n  ];\r\n}\r\n\r\nexport interface Region {\r\n  label: string;\r\n  value: RegionName;\r\n  numOfTeams: number;\r\n  qualifiers: {\r\n    auto: number;\r\n    extra: number;\r\n  };\r\n}\r\n\r\nexport interface TeamsByRegion {\r\n  uefa?: GroupTeam[];\r\n  afc?: GroupTeam[];\r\n  caf?: GroupTeam[];\r\n  concacaf?: GroupTeam[];\r\n  conmebol?: GroupTeam[];\r\n  ofc?: GroupTeam[];\r\n}\r\n\r\n// eslint-disable-next-line no-shadow\r\nexport enum RegionName {\r\n  uefa = 'uefa',\r\n  afc = 'afc',\r\n  caf = 'caf',\r\n  concacaf = 'concacaf',\r\n  conmebol = 'conmebol',\r\n  ofc = 'ofc',\r\n}\r\n",
            "properties": [
                {
                    "name": "afc",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GroupTeam[]",
                    "optional": true,
                    "description": "",
                    "line": 71
                },
                {
                    "name": "caf",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GroupTeam[]",
                    "optional": true,
                    "description": "",
                    "line": 72
                },
                {
                    "name": "concacaf",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GroupTeam[]",
                    "optional": true,
                    "description": "",
                    "line": 73
                },
                {
                    "name": "conmebol",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GroupTeam[]",
                    "optional": true,
                    "description": "",
                    "line": 74
                },
                {
                    "name": "ofc",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GroupTeam[]",
                    "optional": true,
                    "description": "",
                    "line": 75
                },
                {
                    "name": "uefa",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GroupTeam[]",
                    "optional": true,
                    "description": "",
                    "line": 70
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "TierListRankings",
            "id": "interface-TierListRankings-dd4b6cc36a00c48ef7afc5890a71303cefaac696b94090a365755c09225758590aa7c83352e024328b11e4860d88645fc0e5cc73c22ab1a2f6aa5a395999c1ee",
            "file": "src/app/moba/draft/draft.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Champion } from '../champion/champion.model';\nimport { Role } from '../player/player.model';\n\nexport interface DraftChampion extends Champion {\n  metaStrength: [number, number, number, number, number];\n  playerMastery: [number, number, number, number, number];\n  opponentMastery: [number, number, number, number, number];\n  currentSynergy: {\n    player?: number;\n    opp?: number;\n  };\n  currentCounter: {\n    player: {\n      top: number;\n      jungle: number;\n      mid: number;\n      adc: number;\n      support: number;\n    };\n    opp: {\n      top: number;\n      jungle: number;\n      mid: number;\n      adc: number;\n      support: number;\n    };\n  };\n  currentScore: {\n    player?: number;\n    opp?: number;\n  };\n  selectedRole: Role;\n  isPlaceholder: boolean;\n  adviceTags: {\n    player: ChampionAdvice;\n    opp: ChampionAdvice;\n  };\n}\n\nexport interface DraftPlayer {\n  mainRole: Role;\n  championMastery: TierListRankings;\n}\n\nexport interface TierListRankings {\n  s: number[];\n  a: number[];\n  b: number[];\n  c: number[];\n  d: number[];\n}\n\nexport interface AllRolesTierList {\n  top: TierListRankings;\n  jungle: TierListRankings;\n  mid: TierListRankings;\n  adc: TierListRankings;\n  support: TierListRankings;\n}\n\nexport interface CompStyleStats {\n  engage: number;\n  pick: number;\n  protect: number;\n  siege: number;\n  split: number;\n}\n\nexport interface CompStyleData {\n  name: CompStyle;\n  primary: string[];\n  secondary: string[];\n}\n\nexport interface DraftFormData {\n  userIsRedSide: boolean;\n  patchVersion: PatchVersion;\n  useAiOpponent: boolean;\n  difficulty: DraftDifficulty;\n  useRandomTeam: boolean;\n}\n\nexport interface PatchData {\n  name: PatchName;\n  version: PatchVersion;\n  excludedChamps: number[];\n  patchTierList: AllRolesTierList;\n  // counters?: AllRolesTierList;\n  // synergies?: AllRolesTierList;\n}\n\nexport interface ChampionAdvice {\n  top: DraftAdviceTag[];\n  jungle: DraftAdviceTag[];\n  mid: DraftAdviceTag[];\n  adc: DraftAdviceTag[];\n  support: DraftAdviceTag[];\n}\n\nexport type CompStyle = 'engage' | 'pick' | 'protect' | 'siege' | 'split';\nexport type PatchName = 'MSI 24';\nexport type PatchVersion = 14.8;\nexport type DraftSortHeader = 'name' | 'mastery' | 'meta' | 'synergy' | 'counter';\nexport type DraftDifficulty = 'easy' | 'medium' | 'hard';\nexport type DraftAdviceTag = 'Counters Banned' | 'Recommended' | 'Counter Pick' | 'Not Recommended' | 'High Synergy';\n\nexport type LetterRank = 'S' | 'A' | 'B' | 'C' | 'D' | 'F' | 'N/A' | 'S+' | 'S-' | 'A+' | 'A-' | 'B+' | 'B-' | 'C+' | 'C-' | 'D+' | 'D-';\nexport type DraftPhase =\n  | 'Blue Ban 1'\n  | 'Blue Ban 2'\n  | 'Blue Ban 3'\n  | 'Blue Ban 4'\n  | 'Blue Ban 5'\n  | 'Blue Pick 1'\n  | 'Blue Pick 2'\n  | 'Blue Pick 3'\n  | 'Blue Pick 4'\n  | 'Blue Pick 5'\n  | 'Red Ban 1'\n  | 'Red Ban 2'\n  | 'Red Ban 3'\n  | 'Red Ban 4'\n  | 'Red Ban 5'\n  | 'Red Pick 1'\n  | 'Red Pick 2'\n  | 'Red Pick 3'\n  | 'Red Pick 4'\n  | 'Red Pick 5'\n  | 'Draft Complete';\n\nexport function getRoleFromFilter(role: Role | 'all' | undefined): Role | undefined {\n  return role === 'all' ? undefined : role;\n}\n\nexport enum TierValue {\n  S = 20,\n  A = 16,\n  B = 12,\n  C = 8,\n  D = 4,\n  F = 0,\n}\n\nexport const tierValues: { [key: string]: TierValue } = {\n  s: TierValue.S,\n  a: TierValue.A,\n  b: TierValue.B,\n  c: TierValue.C,\n  d: TierValue.D,\n  f: TierValue.F,\n};\n\nexport const redSidePickRounds = [8, 9, 12, 17, 20];\nexport const blueSidePickRounds = [7, 10, 11, 18, 19];\nexport const redSideBanRounds = [2, 4, 6, 13, 15];\nexport const blueSideBanRounds = [1, 3, 5, 14, 16];\n\nexport const emptyDraftBans: Partial<DraftChampion>[] = [\n  {\n    isPlaceholder: true,\n    name: '1',\n  },\n  {\n    isPlaceholder: true,\n    name: '2',\n  },\n  {\n    isPlaceholder: true,\n    name: '3',\n  },\n  {\n    isPlaceholder: true,\n    name: '4',\n  },\n  {\n    isPlaceholder: true,\n    name: '5',\n  },\n];\n\nexport const compStyleReqs: CompStyleData[] = [\n  {\n    name: 'engage',\n    primary: ['mobility.engage', 'dmg.aoe', 'crowdControl.impact', 'crowdControl.aoe'],\n    secondary: ['dmg.burst', 'crowdControl.singleTarget', 'defense.mitigation', 'defense.sustain'],\n  },\n  {\n    name: 'pick',\n    primary: ['dmg.burst', 'dmg.singleTarget', 'crowdControl.singleTarget', 'dmg.skirmish'],\n    secondary: ['crowdControl.range', 'mobility.engage', 'mobility.reposition', 'crowdControl.impact'],\n  },\n  {\n    name: 'protect',\n    primary: ['dmg.dps', 'support.peel', 'support.utility', 'support.zoneControl'],\n    secondary: ['dmg.singleTarget', 'dmg.aoe', 'defense.sustain', 'defense.mitigation'],\n  },\n  {\n    name: 'siege',\n    primary: ['dmg.poke', 'dmg.siege', 'support.zoneControl', 'support.peel'],\n    secondary: ['dmg.waveClear', 'support.utility', 'dmg.dps', 'dmg.aoe'],\n  },\n  {\n    name: 'split',\n    primary: ['dmg.splitPush', 'dmg.skirmish', 'dmg.waveClear', 'support.peel'],\n    secondary: ['support.zoneControl', 'mobility.reposition', 'dmg.siege', 'dmg.singleTarget'],\n  },\n];\n\nexport const emptyDraftPicks: Partial<DraftChampion>[] = [\n  {\n    isPlaceholder: true,\n    name: 'Top',\n  },\n  {\n    isPlaceholder: true,\n    name: 'Jungle',\n  },\n  {\n    isPlaceholder: true,\n    name: 'Mid',\n  },\n  {\n    isPlaceholder: true,\n    name: 'ADC',\n  },\n  {\n    isPlaceholder: true,\n    name: 'Support',\n  },\n];\n\nexport const defaultPlayerMasteries: DraftPlayer[] = [\n  {\n    mainRole: 'top',\n    championMastery: {\n      s: [47, 44],\n      a: [45, 46, 0],\n      b: [1, 2],\n      c: [],\n      d: [],\n    },\n  },\n  {\n    mainRole: 'jungle',\n    championMastery: {\n      s: [2, 8],\n      a: [9, 10],\n      b: [11, 12],\n      c: [13],\n      d: [],\n    },\n  },\n  {\n    mainRole: 'mid',\n    championMastery: {\n      s: [18, 17],\n      a: [20, 19],\n      b: [21, 22],\n      c: [28],\n      d: [],\n    },\n  },\n  {\n    mainRole: 'adc',\n    championMastery: {\n      s: [29, 30, 31],\n      a: [32],\n      b: [33, 34],\n      c: [],\n      d: [],\n    },\n  },\n  {\n    mainRole: 'support',\n    championMastery: {\n      s: [36, 37],\n      a: [38, 39],\n      b: [40, 41],\n      c: [53],\n      d: [],\n    },\n  },\n];\nexport const defaultOpponentMasteries: DraftPlayer[] = [\n  {\n    mainRole: 'top',\n    championMastery: {\n      s: [1, 2],\n      a: [45, 46, 0],\n      b: [47, 44],\n      c: [],\n      d: [],\n    },\n  },\n  {\n    mainRole: 'jungle',\n    championMastery: {\n      s: [9, 10],\n      a: [11],\n      b: [12],\n      c: [13, 2, 8],\n      d: [],\n    },\n  },\n  {\n    mainRole: 'mid',\n    championMastery: {\n      s: [21, 22],\n      a: [20, 19],\n      b: [18, 17],\n      c: [],\n      d: [],\n    },\n  },\n  {\n    mainRole: 'adc',\n    championMastery: {\n      s: [33, 34, 35],\n      a: [32],\n      b: [29, 30, 31],\n      c: [],\n      d: [],\n    },\n  },\n  {\n    mainRole: 'support',\n    championMastery: {\n      s: [53],\n      a: [39, 40],\n      b: [40, 38],\n      c: [36, 37],\n      d: [],\n    },\n  },\n];\n",
            "properties": [
                {
                    "name": "a",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "b",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "c",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "d",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "s",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 46
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Tournament",
            "id": "interface-Tournament-38aa69a25082a42e29d7380499cc14028c131842d749e00cee576b75189f0bb552b085feb5a8111108a7f2048f71b49016a54a3d6b4aa341accb0cf41ce579f9",
            "file": "src/app/simulation/simulation.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { GroupTeam } from 'app/models/nation.model';\r\n\r\nexport interface Match {\r\n  goalsFor: number;\r\n  goalsAg: number;\r\n  isEtWin: boolean;\r\n  isPenaltyWin: boolean;\r\n  winner: GroupTeam;\r\n  loser: GroupTeam;\r\n  score: string;\r\n  eventTimes: {\r\n    winner: MatchEvent[];\r\n    loser: MatchEvent[];\r\n  };\r\n}\r\n\r\nexport interface MatchEvent {\r\n  time: string;\r\n  emoji: EventEmoji;\r\n  type?: string;\r\n}\r\n\r\nexport type EventEmoji = '⚽' | '🟨' | '🟥' | '🟨🟥' | '🚑';\r\nexport type KnockoutRound = [GroupTeam, GroupTeam, Match][];\r\n\r\nexport interface Tournament {\r\n  availableRegions?: Region[];\r\n  hostNations?: GroupTeam[];\r\n  allTeams?: {\r\n    rankings: GroupTeam[];\r\n    attRankings: GroupTeam[];\r\n    midRankings: GroupTeam[];\r\n    defRankings: GroupTeam[];\r\n  };\r\n  groups?: GroupTeam[][];\r\n  groupWinners?: GroupTeam[];\r\n  bracket?: {\r\n    roundOf32?: KnockoutRound;\r\n    roundOf16: KnockoutRound;\r\n    quarterFinals: KnockoutRound;\r\n    semiFinals: KnockoutRound;\r\n    finals: KnockoutRound;\r\n  };\r\n  awards?: [\r\n    first: GroupTeam,\r\n    second: GroupTeam,\r\n    third: GroupTeam,\r\n    underPerformer: GroupTeam,\r\n    overPerformer: GroupTeam,\r\n    uefa?: GroupTeam,\r\n    afc?: GroupTeam,\r\n    caf?: GroupTeam,\r\n    concacaf?: GroupTeam,\r\n    conmebol?: GroupTeam,\r\n    ofc?: GroupTeam\r\n  ];\r\n}\r\n\r\nexport interface Region {\r\n  label: string;\r\n  value: RegionName;\r\n  numOfTeams: number;\r\n  qualifiers: {\r\n    auto: number;\r\n    extra: number;\r\n  };\r\n}\r\n\r\nexport interface TeamsByRegion {\r\n  uefa?: GroupTeam[];\r\n  afc?: GroupTeam[];\r\n  caf?: GroupTeam[];\r\n  concacaf?: GroupTeam[];\r\n  conmebol?: GroupTeam[];\r\n  ofc?: GroupTeam[];\r\n}\r\n\r\n// eslint-disable-next-line no-shadow\r\nexport enum RegionName {\r\n  uefa = 'uefa',\r\n  afc = 'afc',\r\n  caf = 'caf',\r\n  concacaf = 'concacaf',\r\n  conmebol = 'conmebol',\r\n  ofc = 'ofc',\r\n}\r\n",
            "properties": [
                {
                    "name": "allTeams",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "availableRegions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Region[]",
                    "optional": true,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "awards",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[, , , , , , , , , , ]",
                    "optional": true,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "bracket",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "groups",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GroupTeam[][]",
                    "optional": true,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "groupWinners",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GroupTeam[]",
                    "optional": true,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "hostNations",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GroupTeam[]",
                    "optional": true,
                    "description": "",
                    "line": 28
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "TransferOption",
            "id": "interface-TransferOption-012f8e10c5972b2bbadeee4b0aff2508ecc3bc9fad8593b809936ca027563eacb2900e8b665b60bf78aa3911e5a77b2895c94a367790c3e7b033a3d017d9f36a",
            "file": "src/app/career/club/club.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Club } from 'app/models/club.model';\r\nimport { PlayingTime, SeasonStats } from '../player/player.model';\r\n\r\nexport interface ClubStats extends Club {\r\n  seasonId: number;\r\n  clubStats: SeasonStats;\r\n  isFirstClub: boolean;\r\n  totalSeasons: number;\r\n  currentClubStreak: number;\r\n  previousStandings: {\r\n    league: number;\r\n    cup: number;\r\n    continental: number;\r\n  };\r\n}\r\n\r\nexport interface TransferOption {\r\n  club: ClubStats | Club;\r\n  transferType: TransferType;\r\n  transferFee: number;\r\n  wage: number;\r\n  playingTime: PlayingTime;\r\n  parentClub?: TransferOption;\r\n}\r\n\r\nexport type LeagueDifficulty = 'easy' | 'mediumEasy' | 'medium' | 'mediumHard' | 'hard';\r\n\r\nexport type TransferType = 'loan' | 'transfer' | 'stay' | 'transfer/loan' | 're-sign' | 'sign';\r\n",
            "properties": [
                {
                    "name": "club",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ClubStats | Club",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "parentClub",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TransferOption",
                    "optional": true,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "playingTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PlayingTime",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "transferFee",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "transferType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TransferType",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "wage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "TypeAttributes",
            "id": "interface-TypeAttributes-bc99c23e13a4e8424a4ccc0a30b2a969de5bbf59898b570aca806e26fa626f6a82d8b0498491dad5f98cb6f3bffacf45c017d0f00a74ef9873fe435098f0f6f4",
            "file": "src/app/moba/champion/champion.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { AllRolesTierList } from '../draft/draft.model';\r\nimport { Role } from '../player/player.model';\r\n\r\nexport interface Champion {\r\n  id: number;\r\n  name: string;\r\n  roles: Role[];\r\n  gameStateAttributes: GameStateAttributes;\r\n  img: string;\r\n  dmgType: DamageType;\r\n  attributes: TypeAttributes;\r\n  // Use champion ids for synergies and counters\r\n  synergies: AllRolesTierList;\r\n  counters: AllRolesTierList;\r\n}\r\n\r\nexport interface GameStateAttributes {\r\n  early: number;\r\n  mid: number;\r\n  late: number;\r\n}\r\n\r\nexport interface TypeAttributes {\r\n  mobility: {\r\n    engage: boolean;\r\n    reposition: boolean;\r\n  };\r\n  dmg: {\r\n    aoe: boolean;\r\n    burst: boolean;\r\n    singleTarget: boolean;\r\n    skirmish: boolean;\r\n    dps: boolean;\r\n    poke: boolean;\r\n    siege: boolean;\r\n    waveClear: boolean;\r\n    splitPush: boolean;\r\n  };\r\n  crowdControl: {\r\n    impact: boolean;\r\n    aoe: boolean;\r\n    singleTarget: boolean;\r\n    ranged: boolean;\r\n  };\r\n  defense: {\r\n    mitigation: boolean;\r\n    sustain: boolean;\r\n  };\r\n  support: {\r\n    peel: boolean;\r\n    utility: boolean;\r\n    zoneControl: boolean;\r\n  };\r\n}\r\n\r\nexport type DamageType = 'high ad' | 'high ap' | 'high mix' | 'low ad' | 'low ap' | 'low mix' | 'utility';\r\n\r\nexport type Archetype =\r\n  | 'bruiser'\r\n  | 'tank'\r\n  | 'mage'\r\n  | 'assassin'\r\n  | 'enchanter'\r\n  | 'fighter'\r\n  | 'crit-marksman'\r\n  | 'lethality-marksman'\r\n  | 'terrainAbuser'\r\n  | 'split-pusher'\r\n  | 'immobile'\r\n  | 'mobile'\r\n  | 'lane-bully'\r\n  | 'aoe'\r\n  | 'duelist';\r\n\r\nexport type CompRole = 'hard-engage' | 'engage' | 'poke' | 'isolator' | 'anti-engage' | 'team-fight-burst' | 'team-fight-sustain' | 'carry';\r\n",
            "properties": [
                {
                    "name": "crowdControl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "defense",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "dmg",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "mobility",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "support",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 49
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "User",
            "id": "interface-User-d4821beac0e4a852e513391b7470981c4353fdd95a18628bb68136c8695b489ee15b926e2e5031bc26cf30e1508e0a362c3ee13a06734702b4d15af140e485d5",
            "file": "src/stories/user.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {\n  name: string;\n}\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "User",
            "id": "interface-User-7700061184915780794ed43a36a51c21eb649c545ebc8e4ac01d709e68d3c28ff7eaf96e80b8fe8f10e60edac810bcae1aaf8df7eb85d3def293f21eeed0a32b-1",
            "file": "src/app/core/services/firestore.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Timestamp } from '@firebase/firestore-types';\r\nimport { Roster } from '../../models/roster.model';\r\n\r\nexport interface User {\r\n  uid: string;\r\n  email: string | null;\r\n  displayName?: string | null;\r\n  savedRosters?: Roster[];\r\n  submittedRosters?: Roster[];\r\n}\r\n\r\nexport interface FirstName {\r\n  name: string;\r\n  duplicate: boolean;\r\n  randomNum: {\r\n    1: number;\r\n    2: number;\r\n    3: number;\r\n    4: number;\r\n    5: number;\r\n  };\r\n  timestamp: Timestamp;\r\n  usages: string[];\r\n  gender: string;\r\n}\r\n\r\nexport interface LastName {\r\n  name: string;\r\n  duplicate: boolean;\r\n  randomNum: {\r\n    1: number;\r\n    2: number;\r\n    3: number;\r\n    4: number;\r\n    5: number;\r\n  };\r\n  timestamp: Timestamp;\r\n  usages: string[];\r\n  alphabeticalId: number;\r\n}\r\n\r\nexport type Name = FirstName | LastName;\r\n\r\nexport function isFirstName(x: FirstName): x is FirstName {\r\n  return (x as FirstName).gender !== undefined;\r\n}\r\n",
            "properties": [
                {
                    "name": "displayName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "savedRosters",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Roster[]",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "submittedRosters",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Roster[]",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "uid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "User-1"
        }
    ],
    "injectables": [
        {
            "name": "AuthGuard",
            "id": "injectable-AuthGuard-9ecfdaefeebca8fe1adb4eb07a210efce0989e2ff6fc862251278459a17f2b8ee57f5fe99f1ab28e3ae0bec0da3a7bb91b0261f4268ce4cd82e278886793839d",
            "file": "src/app/core/services/auth.guard.ts",
            "properties": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User | null",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methods": [
                {
                    "name": "canActivate",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\r\nimport { AuthService } from './auth.service';\r\nimport { User } from './firestore.model';\r\n\r\n@UntilDestroy()\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AuthGuard {\r\n  user: User | null = null;\r\n  constructor(\r\n    private auth: AuthService,\r\n    private router: Router\r\n  ) {\r\n    this.auth.user$.pipe(untilDestroyed(this)).subscribe(user => {\r\n      if (user) {\r\n        this.user = user;\r\n      } else {\r\n        this.user = null;\r\n      }\r\n    });\r\n  }\r\n\r\n  canActivate() {\r\n    if (!this.user) {\r\n      return true;\r\n    }\r\n    this.router.navigate(['/simulation']);\r\n    return false;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "auth",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "auth",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "AuthService",
            "id": "injectable-AuthService-346e062974f7669cf67c0d050444c6365fbc364f31dc32a00100d9a65e54ce59bd3af70761e411817a06f871f3b08cc91fe73fe4910b48d7b6e5bc0395cd4bde",
            "file": "src/app/core/services/auth.service.ts",
            "properties": [
                {
                    "name": "auth",
                    "defaultValue": "inject(Auth)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "firestore",
                    "defaultValue": "inject(Firestore)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "user$",
                    "defaultValue": "EMPTY",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<User | null>",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methods": [
                {
                    "name": "googleSignin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "register",
                    "args": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "signOut",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateUserData",
                    "args": [
                        {
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, inject } from '@angular/core';\r\nimport {\r\n  Auth,\r\n  authState,\r\n  signInWithPopup,\r\n  signInWithEmailAndPassword,\r\n  createUserWithEmailAndPassword,\r\n  signOut,\r\n  GoogleAuthProvider,\r\n} from '@angular/fire/auth';\r\nimport { Firestore, doc, setDoc } from '@angular/fire/firestore';\r\nimport { Router } from '@angular/router';\r\nimport { EMPTY, Observable } from 'rxjs';\r\nimport { User } from './firestore.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AuthService {\r\n  user$: Observable<User | null> = EMPTY;\r\n  auth = inject(Auth);\r\n  firestore = inject(Firestore);\r\n\r\n  constructor(private router: Router) {\r\n    if (this.auth) {\r\n      this.user$ = authState(this.auth);\r\n    }\r\n  }\r\n\r\n  googleSignin() {\r\n    const provider = new GoogleAuthProvider();\r\n    signInWithPopup(this.auth, provider)\r\n      .then(credential => {\r\n        if (credential.user) {\r\n          this.updateUserData(credential.user);\r\n          // this.snackbar.open('Successfully logged in!', 'Dismiss');\r\n          this.router.navigate(['/simulation']);\r\n        }\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n      });\r\n  }\r\n\r\n  login(email: string, password: string) {\r\n    signInWithEmailAndPassword(this.auth, email, password)\r\n      .then(() => {\r\n        // this.snackbar.open('Successfully logged in!', 'Dismiss');\r\n        // this.router.navigate(['/simulation']);\r\n      })\r\n      .catch(() => {\r\n        // this.snackbar.open(`ERROR ${(err.code, err.message, err.name)}`);\r\n      });\r\n  }\r\n\r\n  register(email: string, password: string) {\r\n    createUserWithEmailAndPassword(this.auth, email, password).then(userCredential => {\r\n      if (userCredential.user) {\r\n        this.updateUserData(userCredential.user);\r\n      }\r\n    });\r\n  }\r\n\r\n  signOut() {\r\n    signOut(this.auth).then(() => {\r\n      // this.snackbar.open('Successfully logged out!', 'Dismiss');\r\n      this.router.navigate(['/']);\r\n    });\r\n  }\r\n\r\n  private updateUserData({ uid, email, displayName, savedRosters, submittedRosters }: User) {\r\n    const userRef = doc(this.firestore, `users/${uid}`);\r\n\r\n    const data = {\r\n      uid,\r\n      email,\r\n      displayName,\r\n      savedRosters,\r\n      submittedRosters,\r\n    };\r\n\r\n    return setDoc(userRef, data, { merge: true });\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "CareerService",
            "id": "injectable-CareerService-ebda21728c11428d53e21c126f2a270ea23a13e5af57bc1f7965abcd96463ed734e645e6660e1af91e6a347022a1bd7269643ffba4b66599704c1f58ca3a0894",
            "file": "src/app/career/career.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "calcFinalStats",
                    "args": [
                        {
                            "name": "seasons",
                            "type": "Season[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "lastSeason",
                            "type": "Season",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "career",
                            "type": "CareerOverview",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "CareerOverview",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "seasons",
                            "type": "Season[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "lastSeason",
                            "type": "Season",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "career",
                            "type": "CareerOverview",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getEligibleClubs",
                    "args": [
                        {
                            "name": "season",
                            "type": "Season",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "clubs",
                            "type": "Club[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "nation",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "parentClub",
                            "type": "TransferOption | ",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "hasLoanOption",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "TransferOption[]",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "season",
                            "type": "Season",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "clubs",
                            "type": "Club[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "nation",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "parentClub",
                            "type": "TransferOption | ",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "hasLoanOption",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "simulateSeasonStats",
                    "args": [
                        {
                            "name": "transferChoice",
                            "type": "TransferOption",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "season",
                            "type": "Season",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "career",
                            "type": "CareerOverview",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Season",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "transferChoice",
                            "type": "TransferOption",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "season",
                            "type": "Season",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "career",
                            "type": "CareerOverview",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { getRandomInts } from '@shared/utils';\r\nimport { Club } from 'app/models/club.model';\r\nimport { calcCareerScore, getPlayingTime, getTransferFee, getWage, totalSeasonsStr } from './career.utils';\r\nimport { ageFactor } from './career.constants';\r\nimport { getCurrentClub, getCurrentClubAsTransfer } from './club/club.utils';\r\nimport { TransferOption, ClubStats } from './club/club.model';\r\nimport { Season, CareerOverview } from './player/player.model';\r\nimport { adjustCurrentAbility, calcTotalStats, getAppsForSeason } from './player/player.utils';\r\nimport { simulateApps } from './simulation/simulation.utils';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class CareerService {\r\n  constructor() {}\r\n\r\n  simulateSeasonStats(transferChoice: TransferOption, season: Season, career: CareerOverview): Season {\r\n    const seasonApps = getAppsForSeason(transferChoice);\r\n    const { stats, leagueDifficulty } = simulateApps(seasonApps, transferChoice, season, career);\r\n    console.log('simulateSeasonStats', stats);\r\n    const currentAbility = adjustCurrentAbility(season, stats, transferChoice, career, leagueDifficulty);\r\n\r\n    return {\r\n      ...season,\r\n      currentClub: transferChoice,\r\n      currentAbility: currentAbility,\r\n      stats,\r\n      leagueDifficulty,\r\n    };\r\n  }\r\n\r\n  getEligibleClubs(\r\n    season: Season,\r\n    clubs: Club[],\r\n    nation: string,\r\n    parentClub: TransferOption | false,\r\n    hasLoanOption: boolean\r\n  ): TransferOption[] {\r\n    // get eligible clubs for the current player's currentAbility and a role that matches\r\n    // avg club rating is 308\r\n    // min 228-242\r\n    // max 380-390\r\n    // current ability typically ranges from 65 - 190\r\n    // club + player rating pairs\r\n    // 65,240 80,280 100,300 120,340 140,370 150,380\r\n    const transferChoices: TransferOption[] = [];\r\n\r\n    const playerRating = ageFactor(season.age, season.currentAbility, hasLoanOption);\r\n    // check each team for ability\r\n    const eligibleTransferClubs = clubs.filter(c => {\r\n      return (\r\n        // max club\r\n        c.clubRating < playerRating + 15 &&\r\n        // min club\r\n        (c.clubRating > playerRating - playerRating / 10 || playerRating > 800) &&\r\n        season.currentClub?.club?.id !== c.id &&\r\n        (c.league.slice(0, 3) === nation || nation === 'random' || season.age > 17 || hasLoanOption) &&\r\n        ((hasLoanOption && playerRating >= c.clubRating - 5) || !hasLoanOption)\r\n      );\r\n    });\r\n    // console.log(\r\n    //   new Set(eligibleTransferClubs.map(a => a.league)),\r\n    //   'currentAbility',\r\n    //   season.currentAbility,\r\n    //   'best club',\r\n    //   playerRating - playerRating / 10,\r\n    //   'worst club',\r\n    //   playerRating + 15\r\n    // );\r\n\r\n    if (eligibleTransferClubs.length < 3) {\r\n      return [];\r\n    }\r\n\r\n    const currentClub = getCurrentClub(clubs, season, parentClub);\r\n\r\n    if (currentClub) {\r\n      transferChoices.push(getCurrentClubAsTransfer(currentClub, season, parentClub, hasLoanOption));\r\n    }\r\n\r\n    const teamIndexes = [...getRandomInts(0, eligibleTransferClubs.length - 1, 3)];\r\n\r\n    teamIndexes.forEach(n => {\r\n      const club: Club = eligibleTransferClubs[n];\r\n      const playingTime = getPlayingTime(club, season);\r\n      const wage = getWage(playingTime, parentClub, hasLoanOption);\r\n      const { transferType, transferFee } = getTransferFee(club, parentClub, hasLoanOption, playingTime, season);\r\n      transferChoices.push({\r\n        club,\r\n        transferType,\r\n        transferFee,\r\n        wage,\r\n        playingTime,\r\n        parentClub: hasLoanOption && parentClub ? parentClub : undefined,\r\n      });\r\n    });\r\n    return transferChoices;\r\n  }\r\n\r\n  calcFinalStats(seasons: Season[], lastSeason: Season, career: CareerOverview): CareerOverview {\r\n    const totalStats = calcTotalStats(seasons, career);\r\n    const teams = seasons.map(s => s.currentClub?.club as Club);\r\n    const careerStats: CareerOverview = {\r\n      ...career,\r\n      avgLeagueAbility: seasons.reduce((acc, s) => acc + (s.currentClub as TransferOption).club.leagueDifficulty, 0) / seasons.length,\r\n    };\r\n    const score = calcCareerScore(teams, careerStats);\r\n    const getLongestServedClub = (clubs: ClubStats[]) => {\r\n      return clubs.sort((a, b) => b.clubStats.allComps.appearances.total - a.clubStats.allComps.appearances.total)[0];\r\n    };\r\n    return {\r\n      ...career,\r\n      seasons: totalSeasonsStr(14, lastSeason.age),\r\n      longestServedClub: getLongestServedClub(career.clubStats),\r\n      totalStats,\r\n      score,\r\n    };\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 15
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "CreatePlayerService",
            "id": "injectable-CreatePlayerService-fb386d1a11f76c96c14f83892f3abcdc1ff496d9466543592aac7a4027b79966129ff41627527dc97d9ae6b06e38b7774e4316978f87247ba847ef14068c67bf",
            "file": "src/app/core/services/create-player.service.ts",
            "properties": [
                {
                    "name": "afsService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "nations",
                    "defaultValue": "nationsModule",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "nationsList",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Nation[]",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methods": [
                {
                    "name": "getFirstNames",
                    "args": [
                        {
                            "name": "fNames",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "firstNameUsage",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "totalFirstNames",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "literal type",
                    "typeParameters": [],
                    "line": 119,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fNames",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "firstNameUsage",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "totalFirstNames",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getLastNames",
                    "args": [
                        {
                            "name": "lNames",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "lastNameUsage",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "totalLastNames",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "literal type",
                    "typeParameters": [],
                    "line": 184,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "lNames",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "lastNameUsage",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "totalLastNames",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { UntilDestroy } from '@ngneat/until-destroy';\r\nimport { getRandomInt } from '@shared/utils';\r\nimport * as nationsModule from 'assets/json/nations.json';\r\nimport { Nation } from 'app/models/nation.model';\r\nimport { FirestoreService } from './firestore.service';\r\n\r\n@UntilDestroy()\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class CreatePlayerService {\r\n  afsService;\r\n  nations = nationsModule;\r\n  nationsList: Nation[] = [];\r\n\r\n  constructor(afsService: FirestoreService) {\r\n    this.afsService = afsService;\r\n    // this.nations.map(tier => tier.nations).forEach(nationsArr => nationsArr.forEach(nation => this.nationsList.push(nation as Nation)));\r\n    // console.log(this.nations);\r\n  }\r\n\r\n  // createPlayer(\r\n  //   nationOrTier: string,\r\n  //   count: [\r\n  //     playerCount: number,\r\n  //     first: number,\r\n  //     second: number,\r\n  //     third: number,\r\n  //     fourth: number,\r\n  //     fifth: number,\r\n  //     sixth: number,\r\n  //     seventh: number,\r\n  //     eighth: number,\r\n  //   ]\r\n  // ) {\r\n  //   const { rating, clubRep } = this.getRatingAndClubRep(...count);\r\n  //   const mainPositions = this.getMainPositions(rating);\r\n  //   const foot = this.getFoot(mainPositions[0]);\r\n  //   const { altPos, compPos, unconvincingPos } = this.getAltPositions(mainPositions, foot);\r\n  //   const age = this.getAge(rating, mainPositions[0]);\r\n  //   const { role, duty } = this.getPositionRole(mainPositions, altPos, foot, rating, age);\r\n  //   const { nationality, logo } = this.getNationOrTier(nationOrTier, 'nationality', rating);\r\n  //   const { clubName, clubLogoUrl } = this.getClub(clubRep, nationality || '');\r\n  //   const { height, weight, weakFoot, attributes } = this.getAttributes(mainPositions[0], altPos, role, duty, rating, age);\r\n  //   let firstInitial = '';\r\n  //   let firstNameUsage = '';\r\n  //   let firstNames: string[] = [];\r\n  //   let lastNameUsage = '';\r\n  //   let lastNames: string[] = [];\r\n  //   let singleLastName = '';\r\n  //   this.getNames(nationality)\r\n  //     .pipe(untilDestroyed(this))\r\n  //     .subscribe(obj => {\r\n  //       firstInitial = obj.firstInitial;\r\n  //       firstNameUsage = obj.firstNameUsage;\r\n  //       firstNames = obj.firstNames;\r\n  //       lastNameUsage = obj.lastNameUsage;\r\n  //       lastNames = obj.lastNames;\r\n  //       [singleLastName] = obj.lastNames;\r\n  //     });\r\n  //   return {\r\n  //     rating,\r\n  //     mainPositions,\r\n  //     foot,\r\n  //     weakFoot,\r\n  //     height,\r\n  //     weight,\r\n  //     attributes,\r\n  //     altPositions: altPos,\r\n  //     competentPositions: compPos,\r\n  //     unconvincingPositions: unconvincingPos,\r\n  //     age,\r\n  //     preferredRole: role,\r\n  //     preferredDuty: duty,\r\n  //     nationality: nationality || '',\r\n  //     nationalityLogo: logo || '',\r\n  //     club: clubName,\r\n  //     clubLogo: clubLogoUrl,\r\n  //     firstNames,\r\n  //     firstNameUsage,\r\n  //     firstInitial,\r\n  //     lastNames,\r\n  //     lastNameUsage,\r\n  //     singleLastName,\r\n  //   };\r\n  // }\r\n\r\n  // getNames(nationality: string): Observable<{\r\n  //   lastNames: string[];\r\n  //   lastNameUsage: string;\r\n  //   totalLastNames: number;\r\n  //   firstNames: string[];\r\n  //   firstInitial: string;\r\n  //   firstNameUsage: string;\r\n  //   totalFirstNames: number;\r\n  // }> {\r\n  //   return this.afsService.getFullName(nationality).pipe(\r\n  //     untilDestroyed(this),\r\n  //     take(1),\r\n  //     map(([fNames, firstNameUsage, totalFirstNames, lNames, lastNameUsage, totalLastNames]) => {\r\n  //       const firstNames = fNames.map(fName => {\r\n  //         return fName.name;\r\n  //       });\r\n  //       const lastNames = lNames.map(lName => {\r\n  //         return lName.name;\r\n  //       });\r\n  //       return {\r\n  //         ...this.getFirstNames(firstNames, firstNameUsage, totalFirstNames),\r\n  //         ...this.getLastNames(lastNames, lastNameUsage, totalLastNames),\r\n  //       };\r\n  //     })\r\n  //   );\r\n  //   // add nickname based on nationality\r\n  //   // About 90% chance: Mozambique\r\n  //   // About 50% chance: Brazil, Spain, Portugal, Angola, Equatorial Guinea, Guinea-Bissau\r\n  // }\r\n\r\n  getFirstNames(\r\n    fNames: string[],\r\n    firstNameUsage: string,\r\n    totalFirstNames: number\r\n  ): {\r\n    firstNames: string[];\r\n    firstInitial: string;\r\n    firstNameUsage: string;\r\n    totalFirstNames: number;\r\n  } {\r\n    let firstNames = fNames;\r\n    if (fNames.length !== totalFirstNames) {\r\n      console.log('error with first names', fNames, totalFirstNames, firstNameUsage);\r\n    }\r\n\r\n    if (totalFirstNames > 1 && fNames.length > 1) {\r\n      const nameLength = fNames[1].length;\r\n      const vowels = ['a', 'e', 'i', 'o', 'u', 'y'];\r\n      const chance = getRandomInt(0, 2);\r\n\r\n      switch (firstNameUsage) {\r\n        case 'Russian':\r\n        case 'Kazakh':\r\n        case 'Tajik':\r\n          if (chance > 0 && firstNameUsage === 'Kazakh') {\r\n            firstNames = [...fNames, `${fNames[1]}uly`];\r\n          } else if (vowels.includes(fNames[1].charAt(nameLength - 1))) {\r\n            firstNames = [...fNames, `${fNames[1]}evich`];\r\n          } else {\r\n            firstNames = [...fNames, `${fNames[1]}ovich`];\r\n          }\r\n          break;\r\n        case 'Ukrainian':\r\n        case 'Belarusian':\r\n          firstNames = [...fNames, `${fNames[1]}vych`];\r\n          break;\r\n        case 'Azerbaijani':\r\n          firstNames = [...fNames, `${fNames[1]} oğlu`];\r\n          break;\r\n        case 'Turkmen':\r\n          firstNames = [...fNames, `${fNames[1]}owiç`];\r\n          break;\r\n        default:\r\n          firstNames = fNames;\r\n          break;\r\n      }\r\n    }\r\n    let firstInitial = '';\r\n    if (firstNames.length > 0) {\r\n      firstInitial = firstNames[0].charAt(0);\r\n      if (firstInitial === \"'\") {\r\n        firstInitial = firstNames[0].split(\"'\")[1].charAt(0);\r\n      }\r\n      if (firstNames[0].includes(' ')) {\r\n        // e.g. Abd al-Rahmin => A. a.\r\n        firstInitial = `${firstNames[0]\r\n          .split(' ')\r\n          .map(full => full[0])\r\n          .join('. ')}.`;\r\n      }\r\n    }\r\n\r\n    return { firstNames, firstInitial, firstNameUsage, totalFirstNames };\r\n  }\r\n\r\n  getLastNames(\r\n    lNames: string[],\r\n    lastNameUsage: string,\r\n    totalLastNames: number\r\n  ): {\r\n    lastNames: string[];\r\n    lastNameUsage: string;\r\n    totalLastNames: number;\r\n  } {\r\n    const lastNames: string[] = [];\r\n    let articleUsed = false;\r\n    let patronymArticle: string[];\r\n    let chance: number;\r\n    let nameLength: number;\r\n    let vowels: string[];\r\n    let first = lNames[0];\r\n    if (lNames.length !== totalLastNames) {\r\n      console.log('error with last names', lNames, totalLastNames, lastNameUsage);\r\n    }\r\n    switch (lastNameUsage) {\r\n      case 'Portuguese':\r\n        for (let i = 0; i < lNames.length; i++) {\r\n          // for each surname\r\n          if ((articleUsed && lastNames.length <= totalLastNames + 1) || (!articleUsed && lastNames.length <= totalLastNames)) {\r\n            //\r\n            chance = getRandomInt(1, 4);\r\n            const surname = lNames[i];\r\n            if (chance > 3 && !articleUsed && lNames[i].slice(0) !== 'D') {\r\n              let articles = [];\r\n              if (surname.slice(-1) === 's') {\r\n                if (surname.slice(-2) !== 'as') {\r\n                  articles = ['dos', 'de'];\r\n                } else {\r\n                  articles = ['das', 'de'];\r\n                }\r\n              } else if (surname.slice(-1) !== 'o') {\r\n                articles = ['da', 'de'];\r\n              } else {\r\n                articles = ['do', 'de'];\r\n              }\r\n\r\n              chance = getRandomInt(0, 1);\r\n              const chosenArticle = articles[chance];\r\n              lastNames.push(chosenArticle);\r\n              articleUsed = true;\r\n            }\r\n            lastNames.push(surname);\r\n          }\r\n        }\r\n        break;\r\n      case 'Icelandic':\r\n      case 'Faroese':\r\n        lastNames.push(`${lNames[0]}sson`);\r\n        break;\r\n      case 'Malay':\r\n        lastNames.push('bin', ...lNames);\r\n        break;\r\n      case 'Kyrgyz':\r\n        chance = getRandomInt(0, 1);\r\n        patronymArticle = ['uulu', 'tegin'];\r\n        lastNames.push(...lNames, patronymArticle[chance]);\r\n        break;\r\n      case 'Azerbaijani':\r\n        nameLength = lNames[0].length;\r\n        vowels = ['a', 'e', 'i', 'o', 'u', 'y'];\r\n        chance = getRandomInt(0, 2);\r\n        if (chance > 1) {\r\n          first += 'lı';\r\n        } else if (chance > 0) {\r\n          first += 'zade';\r\n        } else if (vowels.includes(lNames[0].charAt(nameLength - 1))) {\r\n          chance = getRandomInt(0, 1);\r\n          patronymArticle = ['ev', 'yev'];\r\n          first += patronymArticle[chance];\r\n        } else {\r\n          first += 'ov';\r\n        }\r\n        lastNames.push(first);\r\n        break;\r\n      default:\r\n        lastNames.push(...lNames);\r\n        break;\r\n    }\r\n    return { lastNames, lastNameUsage, totalLastNames };\r\n  }\r\n\r\n  // getNationOrTier(type: string, nationOrTier: string, rating?: number): { tier: string; nationality: string; logo: string } {\r\n  //   if (type === 'tier') {\r\n  //     const nationality: string = nationOrTier;\r\n  //     let tier = '';\r\n  //     if (nationality.includes('tier')) {\r\n  //       tier = nationality.slice(0, 1);\r\n  //     } else {\r\n  //       let checking = true;\r\n  //       while (checking) {\r\n  //         for (let i = 0; i < this.nations.length; i++) {\r\n  //           for (let j = 0; j < this.nations[i].nations.length; j++) {\r\n  //             if (this.nations[i].nations[j].name === nationality) {\r\n  //               tier = this.nations[i].tier.slice(0, 1);\r\n  //               checking = false;\r\n  //             }\r\n  //           }\r\n  //         }\r\n  //       }\r\n  //     }\r\n  //     return {\r\n  //       tier,\r\n  //       nationality: '',\r\n  //       logo: '',\r\n  //     };\r\n  //   }\r\n  //   let nationality: string = nationOrTier;\r\n  //   let logo = '';\r\n\r\n  //   // If random nationalities\r\n  //   if (nationality.includes('tier')) {\r\n  //     // realistic nationalities turned on\r\n  //     const realisticNationalities = true;\r\n  //     if (realisticNationalities === true) {\r\n  //       let tierName = '';\r\n  //       if (rating !== undefined) {\r\n  //         tierName = this.getRandomNationTier(rating);\r\n  //       }\r\n\r\n  //       const nationList = [];\r\n  //       for (const tier of this.nations) {\r\n  //         if (tier.tier === tierName) {\r\n  //           for (const nation of tier.nations) {\r\n  //             nationList.push(nation.name);\r\n  //           }\r\n  //           const i = getRandomInt(0, nationList.length - 1);\r\n  //           nationality = nationList[i];\r\n  //         }\r\n  //       }\r\n  //     } else {\r\n  //       // realistic nationalities turned off\r\n  //       const randomNum = getRandomInt(0, this.nationsList.length - 1);\r\n  //       nationality = this.nationsList[randomNum].name;\r\n  //     }\r\n  //   }\r\n  //   for (const tier of this.nations) {\r\n  //     for (const nation of tier.nations) {\r\n  //       if (nationality === nation.name) {\r\n  //         logo = nation.logo;\r\n  //       }\r\n  //     }\r\n  //   }\r\n  //   return {\r\n  //     tier: '',\r\n  //     nationality,\r\n  //     logo,\r\n  //   };\r\n  // }\r\n\r\n  // getMainPositions(rating: number) {\r\n  //   // should return an array of positions\r\n  //   const chance = getRandomInt(1, 100);\r\n  //   let mainPos: number;\r\n\r\n  //   if (chance > 25) {\r\n  //     // 75% chance for CB, DM, MC, MR, ML, AMR, AML, ST\r\n\r\n  //     const arr = [3, 6, 7, 8, 9, 10, 11, 13];\r\n  //     shuffle(arr);\r\n  //     mainPos = arr[getRandomInt(0, 7)];\r\n  //   } else {\r\n  //     // 25% chance for GK, RB, LB, LWB, RWB, AMC\r\n  //     const arr = [0, 1, 2, 4, 5, 12];\r\n  //     shuffle(arr);\r\n  //     mainPos = arr[getRandomInt(0, 5)];\r\n  //   }\r\n\r\n  //   // USE THIS COMMENT IF YOU NEED TO ADD POSITIONS\r\n\r\n  //   // if (this.playerCount > 50 && (this.positions[0].amount < 3 || this.positions[3].amount < 3 || this.positions[13].amount < 2 || this.positions[7].amount < 3)) {\r\n  //   //   if (this.positions[0].amount < 3) {\r\n  //   //     mainPos = 0;\r\n  //   //   } else if (this.positions[3].amount < 3) {\r\n  //   //     mainPos = 3;\r\n  //   //   } else if (this.positions[13].amount < 2) {\r\n  //   //     mainPos = 13;\r\n  //   //   } else {\r\n  //   //     mainPos = 7;\r\n  //   //   }\r\n  //   // }\r\n  //   // If there are 7 players in a certain position, choose a different position that doesn't have 7\r\n  //   if (this.positions[mainPos].amount > 6) {\r\n  //     // Prioritize 4 GKs\r\n  //     if (this.positions[0].amount < 4) {\r\n  //       mainPos = 0;\r\n  //     }\r\n  //     // Then prioritize 4 CBs\r\n  //     else if (this.positions[3].amount < 4) {\r\n  //       mainPos = 3;\r\n  //     }\r\n  //     // Then prioritize 2 STs\r\n  //     else if (this.positions[13].amount < 2) {\r\n  //       mainPos = 13;\r\n  //     }\r\n  //     // Then priortize 3 CMs\r\n  //     else if (this.positions[7].amount < 3) {\r\n  //       mainPos = 7;\r\n  //     }\r\n  //     // Otherwise add to any position\r\n  //     else {\r\n  //       for (let j = 0; j < this.positions.length; j++) {\r\n  //         if (this.positions[mainPos].amount > 5) {\r\n  //           mainPos = getRandomInt(0, 13);\r\n  //         }\r\n  //       }\r\n  //     }\r\n  //   }\r\n  //   this.positions[mainPos].amount++;\r\n\r\n  //   const mainPositions = [];\r\n  //   mainPositions.push(this.positions[mainPos].position);\r\n\r\n  //   if (!(mainPos === 0 || mainPos === 3 || mainPos === 13)) {\r\n  //     // 20-35% chance of two natural positions\r\n  //     // 2-7% chance of three natural positions\r\n  //     let highChance = 0;\r\n  //     let lowChance = 0;\r\n  //     if (rating > 69) {\r\n  //       highChance = getRandomInt(1, 100);\r\n  //     } else {\r\n  //       lowChance = getRandomInt(1, 100);\r\n  //     }\r\n  //     let indexes = 0;\r\n  //     let posArr: number[] = [];\r\n  //     if (highChance > 58 || lowChance > 78) {\r\n  //       indexes = 1;\r\n  //     } else if (highChance > 93 || lowChance > 98) {\r\n  //       indexes = 2;\r\n  //     }\r\n  //     switch (mainPos) {\r\n  //       case 1: // RB\r\n  //         posArr = [2, 3, 5, 6, 7, 9];\r\n  //         break;\r\n  //       case 2: // LB\r\n  //         posArr = [1, 3, 4, 6, 7, 8];\r\n  //         break;\r\n  //       case 4: // LWB\r\n  //         posArr = [2, 5, 6, 7, 8, 11];\r\n  //         break;\r\n  //       case 5: // RWB\r\n  //         posArr = [1, 4, 6, 7, 9, 10];\r\n  //         break;\r\n  //       case 6: // DM\r\n  //         posArr = [1, 2, 3, 7, 12];\r\n  //         break;\r\n  //       case 7: // MC\r\n  //         posArr = [1, 2, 6, 8, 9, 12];\r\n  //         break;\r\n  //       case 8: // ML\r\n  //         posArr = [2, 4, 7, 9, 10, 11];\r\n  //         break;\r\n  //       case 9: // MR\r\n  //         posArr = [1, 5, 7, 8, 10, 11];\r\n  //         break;\r\n  //       case 10: // AMR\r\n  //         posArr = [8, 9, 11, 12, 13];\r\n  //         break;\r\n  //       case 11: // AML\r\n  //         posArr = [8, 9, 10, 12, 13];\r\n  //         break;\r\n  //       case 12: // AMC\r\n  //         posArr = [6, 7, 10, 11, 13];\r\n  //         break;\r\n  //       default:\r\n  //         break;\r\n  //     }\r\n  //     shuffle(posArr);\r\n  //     for (let i = 0; i < indexes; i++) {\r\n  //       const index = posArr[i];\r\n  //       mainPositions.push(this.positions[index].position);\r\n  //     }\r\n  //   }\r\n  //   return mainPositions;\r\n  // }\r\n\r\n  // getAltPositions(mainPositions: string[], mainFoot: string) {\r\n  //   const altPosCount = Math.min(getRandomInt(1, 3), getRandomInt(0, 3));\r\n  //   const compPosCount = Math.min(getRandomInt(0, 2), getRandomInt(0, 2));\r\n  //   const unPosCount = Math.min(getRandomInt(0, 2), getRandomInt(0, 2), getRandomInt(0, 2));\r\n\r\n  //   let altPos: string[] = [];\r\n  //   const compPos: string[] = [];\r\n  //   const unconvincingPos: string[] = [];\r\n\r\n  //   let arr: string[];\r\n\r\n  //   let num: number;\r\n  //   let str: string[];\r\n\r\n  //   if (altPosCount === 0) {\r\n  //     altPos = ['N/A'];\r\n  //   } else {\r\n  //     switch (mainPositions[0]) {\r\n  //       case 'GK':\r\n  //         altPos = ['N/A'];\r\n  //         break;\r\n  //       case 'CB':\r\n  //         arr = ['DM', 'RB', 'LB'];\r\n  //         // alternate positions\r\n  //         for (let i = 1; i < mainPositions.length; i++) {\r\n  //           const altIndex = arr.indexOf(mainPositions[i]);\r\n  //           if (altIndex > -1) {\r\n  //             arr.splice(altIndex, 1);\r\n  //           }\r\n  //         }\r\n  //         num = getRandomInt(0, arr.length - 1);\r\n  //         for (let i = 0; i < altPosCount; i++) {\r\n  //           if (arr.length > 0) {\r\n  //             if (num - i < 0) {\r\n  //               num = arr.length - 1;\r\n  //             } else {\r\n  //               num -= i;\r\n  //             }\r\n  //             // str = arr[num - i].split(', ');\r\n\r\n  //             altPos.push(arr[num]);\r\n  //             const index = arr.indexOf(arr[num]);\r\n  //             if (index > -1) {\r\n  //               arr.splice(index, 1);\r\n  //             }\r\n  //           }\r\n  //         }\r\n  //         arr.push('MC');\r\n  //         // competent positions\r\n  //         num = getRandomInt(0, arr.length - 1);\r\n  //         for (let i = 0; i < compPosCount; i++) {\r\n  //           if (arr.length > 0) {\r\n  //             if (num - i < 0) {\r\n  //               num = arr.length - 1;\r\n  //             } else {\r\n  //               num -= i;\r\n  //             }\r\n  //             // str = arr[num - i].split(', ');\r\n  //             compPos.push(arr[num]);\r\n  //             const index = arr.indexOf(arr[num]);\r\n  //             if (index > -1) {\r\n  //               arr.splice(index, 1);\r\n  //             }\r\n  //           }\r\n  //         }\r\n  //         arr.push('AMC', 'ST');\r\n  //         // unconvincing positions\r\n  //         num = getRandomInt(0, arr.length - 1);\r\n  //         for (let i = 0; i < unPosCount; i++) {\r\n  //           if (arr.length > 0) {\r\n  //             if (num - i < 0) {\r\n  //               num = arr.length - 1;\r\n  //             } else {\r\n  //               num -= i;\r\n  //             }\r\n  //             // str = arr[num - i].split(', ');\r\n  //             unconvincingPos.push(arr[num]);\r\n  //           }\r\n  //         }\r\n  //         break;\r\n  //       case 'LB':\r\n  //         arr = ['CB', 'LWB', 'ML', 'RB', 'DM', 'MC'];\r\n  //         // alternate positions\r\n  //         for (let i = 1; i < mainPositions.length; i++) {\r\n  //           const altIndex = arr.indexOf(mainPositions[i]);\r\n  //           if (altIndex > -1) {\r\n  //             arr.splice(altIndex, 1);\r\n  //           }\r\n  //         }\r\n  //         num = getRandomInt(0, arr.length - 1);\r\n  //         for (let i = 0; i < altPosCount; i++) {\r\n  //           if (arr.length > 0) {\r\n  //             if (num - i < 0) {\r\n  //               num = arr.length - 1;\r\n  //             } else {\r\n  //               num -= i;\r\n  //             }\r\n  //             // str = arr[num - i].split(', ');\r\n\r\n  //             altPos.push(arr[num]);\r\n  //             const index = arr.indexOf(arr[num]);\r\n  //             if (index > -1) {\r\n  //               arr.splice(index, 1);\r\n  //             }\r\n  //           }\r\n  //         }\r\n\r\n  //         arr.push('RWB', 'AML');\r\n  //         // competent positions\r\n  //         num = getRandomInt(0, arr.length - 1);\r\n  //         for (let i = 0; i < compPosCount; i++) {\r\n  //           if (arr.length > 0) {\r\n  //             if (num - i < 0) {\r\n  //               num = arr.length - 1;\r\n  //             } else {\r\n  //               num -= i;\r\n  //             }\r\n  //             // str = arr[num - i].split(', ');\r\n  //             compPos.push(arr[num]);\r\n  //             const index = arr.indexOf(arr[num]);\r\n  //             if (index > -1) {\r\n  //               arr.splice(index, 1);\r\n  //             }\r\n  //           }\r\n  //         }\r\n\r\n  //         arr.push('MR', 'AMR', 'AMC');\r\n  //         // unconvincing positions\r\n  //         num = getRandomInt(0, arr.length - 1);\r\n  //         for (let i = 0; i < unPosCount; i++) {\r\n  //           if (arr.length > 0) {\r\n  //             if (num - i < 0) {\r\n  //               num = arr.length - 1;\r\n  //             } else {\r\n  //               num -= i;\r\n  //             }\r\n  //             // str = arr[num - i].split(', ');\r\n  //             unconvincingPos.push(arr[num]);\r\n  //           }\r\n  //         }\r\n  //         break;\r\n  //       case 'RB':\r\n  //         arr = ['CB', 'MR', 'RWB', 'LB', 'DM', 'MC'];\r\n  //         // alternate positions\r\n  //         for (let i = 1; i < mainPositions.length; i++) {\r\n  //           const altIndex = arr.indexOf(mainPositions[i]);\r\n  //           if (altIndex > -1) {\r\n  //             arr.splice(altIndex, 1);\r\n  //           }\r\n  //         }\r\n  //         num = getRandomInt(0, arr.length - 1);\r\n  //         for (let i = 0; i < altPosCount; i++) {\r\n  //           if (arr.length > 0) {\r\n  //             if (num - i < 0) {\r\n  //               num = arr.length - 1;\r\n  //             } else {\r\n  //               num -= i;\r\n  //             }\r\n  //             // str = arr[num - i].split(', ');\r\n\r\n  //             altPos.push(arr[num]);\r\n  //             const index = arr.indexOf(arr[num]);\r\n  //             if (index > -1) {\r\n  //               arr.splice(index, 1);\r\n  //             }\r\n  //           }\r\n  //         }\r\n  //         arr.push('AMR', 'LWB');\r\n  //         // competent positions\r\n  //         num = getRandomInt(0, arr.length - 1);\r\n  //         for (let i = 0; i < compPosCount; i++) {\r\n  //           if (arr.length > 0) {\r\n  //             if (num - i < 0) {\r\n  //               num = arr.length - 1;\r\n  //             } else {\r\n  //               num -= i;\r\n  //             }\r\n  //             // str = arr[num - i].split(', ');\r\n  //             compPos.push(arr[num]);\r\n  //             const index = arr.indexOf(arr[num]);\r\n  //             if (index > -1) {\r\n  //               arr.splice(index, 1);\r\n  //             }\r\n  //           }\r\n  //         }\r\n  //         arr.push('ML', 'AML', 'AMC');\r\n  //         // unconvincing positions\r\n  //         num = getRandomInt(0, arr.length - 1);\r\n  //         for (let i = 0; i < unPosCount; i++) {\r\n  //           if (arr.length > 0) {\r\n  //             if (num - i < 0) {\r\n  //               num = arr.length - 1;\r\n  //             } else {\r\n  //               num -= i;\r\n  //             }\r\n  //             // str = arr[num - i].split(', ');\r\n  //             unconvincingPos.push(arr[num]);\r\n  //           }\r\n  //         }\r\n  //         break;\r\n  //       case 'LWB':\r\n  //         arr = ['RWB', 'ML', 'LB', 'AML', 'MC', 'DM'];\r\n  //         // alternate positions\r\n  //         for (let i = 1; i < mainPositions.length; i++) {\r\n  //           const altIndex = arr.indexOf(mainPositions[i]);\r\n  //           if (altIndex > -1) {\r\n  //             arr.splice(altIndex, 1);\r\n  //           }\r\n  //         }\r\n  //         num = getRandomInt(0, arr.length - 1);\r\n  //         for (let i = 0; i < altPosCount; i++) {\r\n  //           if (arr.length > 0) {\r\n  //             if (num - i < 0) {\r\n  //               num = arr.length - 1;\r\n  //             } else {\r\n  //               num -= i;\r\n  //             }\r\n  //             // str = arr[num - i].split(', ');\r\n\r\n  //             altPos.push(arr[num]);\r\n  //             const index = arr.indexOf(arr[num]);\r\n  //             if (index > -1) {\r\n  //               arr.splice(index, 1);\r\n  //             }\r\n  //           }\r\n  //         }\r\n  //         arr.push('RB', 'MR');\r\n  //         // competent positions\r\n  //         num = getRandomInt(0, arr.length - 1);\r\n  //         for (let i = 0; i < compPosCount; i++) {\r\n  //           if (arr.length > 0) {\r\n  //             if (num - i < 0) {\r\n  //               num = arr.length - 1;\r\n  //             } else {\r\n  //               num -= i;\r\n  //             }\r\n  //             // str = arr[num - i].split(', ');\r\n  //             compPos.push(arr[num]);\r\n  //             const index = arr.indexOf(arr[num]);\r\n  //             if (index > -1) {\r\n  //               arr.splice(index, 1);\r\n  //             }\r\n  //           }\r\n  //         }\r\n  //         arr.push('CB', 'AMC', 'AMR');\r\n  //         // unconvincing positions\r\n  //         num = getRandomInt(0, arr.length - 1);\r\n  //         for (let i = 0; i < unPosCount; i++) {\r\n  //           if (arr.length > 0) {\r\n  //             if (num - i < 0) {\r\n  //               num = arr.length - 1;\r\n  //             } else {\r\n  //               num -= i;\r\n  //             }\r\n  //             // str = arr[num - i].split(', ');\r\n  //             unconvincingPos.push(arr[num]);\r\n  //           }\r\n  //         }\r\n  //         break;\r\n  //       case 'RWB':\r\n  //         arr = ['RB', 'MR', 'LWB', 'AMR', 'MC', 'DM'];\r\n  //         // alternate positions\r\n  //         for (let i = 1; i < mainPositions.length; i++) {\r\n  //           const altIndex = arr.indexOf(mainPositions[i]);\r\n  //           if (altIndex > -1) {\r\n  //             arr.splice(altIndex, 1);\r\n  //           }\r\n  //         }\r\n  //         num = getRandomInt(0, arr.length - 1);\r\n  //         for (let i = 0; i < altPosCount; i++) {\r\n  //           if (arr.length > 0) {\r\n  //             if (num - i < 0) {\r\n  //               num = arr.length - 1;\r\n  //             } else {\r\n  //               num -= i;\r\n  //             }\r\n  //             // str = arr[num - i].split(', ');\r\n\r\n  //             altPos.push(arr[num]);\r\n  //             const index = arr.indexOf(arr[num]);\r\n  //             if (index > -1) {\r\n  //               arr.splice(index, 1);\r\n  //             }\r\n  //           }\r\n  //         }\r\n  //         arr.push('LB', 'ML');\r\n  //         // competent positions\r\n  //         num = getRandomInt(0, arr.length - 1);\r\n  //         for (let i = 0; i < compPosCount; i++) {\r\n  //           if (arr.length > 0) {\r\n  //             if (num - i < 0) {\r\n  //               num = arr.length - 1;\r\n  //             } else {\r\n  //               num -= i;\r\n  //             }\r\n  //             // str = arr[num - i].split(', ');\r\n  //             compPos.push(arr[num]);\r\n  //             const index = arr.indexOf(arr[num]);\r\n  //             if (index > -1) {\r\n  //               arr.splice(index, 1);\r\n  //             }\r\n  //           }\r\n  //         }\r\n  //         arr.push('CB', 'AMC', 'AML');\r\n  //         // unconvincing positions\r\n  //         num = getRandomInt(0, arr.length - 1);\r\n  //         for (let i = 0; i < unPosCount; i++) {\r\n  //           if (arr.length > 0) {\r\n  //             if (num - i < 0) {\r\n  //               num = arr.length - 1;\r\n  //             } else {\r\n  //               num -= i;\r\n  //             }\r\n  //             // str = arr[num - i].split(', ');\r\n  //             unconvincingPos.push(arr[num]);\r\n  //           }\r\n  //         }\r\n  //         break;\r\n  //       case 'MR':\r\n  //         arr = ['RB', 'RWB', 'ML', 'MC', 'AMR', 'AML'];\r\n  //         // alternate positions\r\n  //         for (let i = 1; i < mainPositions.length; i++) {\r\n  //           const altIndex = arr.indexOf(mainPositions[i]);\r\n  //           if (altIndex > -1) {\r\n  //             arr.splice(altIndex, 1);\r\n  //           }\r\n  //         }\r\n  //         num = getRandomInt(0, arr.length - 1);\r\n  //         for (let i = 0; i < altPosCount; i++) {\r\n  //           if (arr.length > 0) {\r\n  //             if (num - i < 0) {\r\n  //               num = arr.length - 1;\r\n  //             } else {\r\n  //               num -= i;\r\n  //             }\r\n  //             // str = arr[num - i].split(', ');\r\n\r\n  //             altPos.push(arr[num]);\r\n  //             const index = arr.indexOf(arr[num]);\r\n  //             if (index > -1) {\r\n  //               arr.splice(index, 1);\r\n  //             }\r\n  //           }\r\n  //         }\r\n  //         arr.push('LWB', 'DM', 'AMC');\r\n  //         // competent positions\r\n  //         num = getRandomInt(0, arr.length - 1);\r\n  //         for (let i = 0; i < compPosCount; i++) {\r\n  //           if (arr.length > 0) {\r\n  //             if (num - i < 0) {\r\n  //               num = arr.length - 1;\r\n  //             } else {\r\n  //               num -= i;\r\n  //             }\r\n  //             // str = arr[num - i].split(', ');\r\n  //             compPos.push(arr[num]);\r\n  //             const index = arr.indexOf(arr[num]);\r\n  //             if (index > -1) {\r\n  //               arr.splice(index, 1);\r\n  //             }\r\n  //           }\r\n  //         }\r\n  //         arr.push('LB', 'ST');\r\n  //         // unconvincing positions\r\n  //         num = getRandomInt(0, arr.length - 1);\r\n  //         for (let i = 0; i < unPosCount; i++) {\r\n  //           if (arr.length > 0) {\r\n  //             if (num - i < 0) {\r\n  //               num = arr.length - 1;\r\n  //             } else {\r\n  //               num -= i;\r\n  //             }\r\n  //             // str = arr[num - i].split(', ');\r\n  //             unconvincingPos.push(arr[num]);\r\n  //           }\r\n  //         }\r\n  //         break;\r\n  //       case 'ML':\r\n  //         arr = ['LB', 'LWB', 'MR', 'MC', 'AML', 'AMR'];\r\n  //         // alternate positions\r\n  //         for (let i = 1; i < mainPositions.length; i++) {\r\n  //           const altIndex = arr.indexOf(mainPositions[i]);\r\n  //           if (altIndex > -1) {\r\n  //             arr.splice(altIndex, 1);\r\n  //           }\r\n  //         }\r\n  //         num = getRandomInt(0, arr.length - 1);\r\n\r\n  //         for (let i = 0; i < altPosCount; i++) {\r\n  //           if (arr.length > 0) {\r\n  //             if (num - i < 0) {\r\n  //               num = arr.length - 1;\r\n  //             } else {\r\n  //               num -= i;\r\n  //             }\r\n  //             // str = arr[num - i].split(', ');\r\n\r\n  //             altPos.push(arr[num]);\r\n  //             const index = arr.indexOf(arr[num]);\r\n  //             if (index > -1) {\r\n  //               arr.splice(index, 1);\r\n  //             }\r\n  //           }\r\n  //         }\r\n  //         arr.push('RWB', 'DM', 'AMC');\r\n  //         // competent positions\r\n  //         num = getRandomInt(0, arr.length - 1);\r\n  //         for (let i = 0; i < compPosCount; i++) {\r\n  //           if (arr.length > 0) {\r\n  //             if (num - i < 0) {\r\n  //               num = arr.length - 1;\r\n  //             } else {\r\n  //               num -= i;\r\n  //             }\r\n  //             // str = arr[num - i].split(', ');\r\n  //             compPos.push(arr[num]);\r\n  //             const index = arr.indexOf(arr[num]);\r\n  //             if (index > -1) {\r\n  //               arr.splice(index, 1);\r\n  //             }\r\n  //           }\r\n  //         }\r\n  //         arr.push('RB', 'ST');\r\n  //         // unconvincing positions\r\n  //         num = getRandomInt(0, arr.length - 1);\r\n  //         for (let i = 0; i < unPosCount; i++) {\r\n  //           if (arr.length > 0) {\r\n  //             if (num - i < 0) {\r\n  //               num = arr.length - 1;\r\n  //             } else {\r\n  //               num -= i;\r\n  //             }\r\n  //             // str = arr[num - i].split(', ');\r\n  //             unconvincingPos.push(arr[num]);\r\n  //           }\r\n  //         }\r\n  //         break;\r\n  //       case 'AMR':\r\n  //         arr = ['AML', 'AMC', 'ST'];\r\n\r\n  //         if (mainFoot === 'right') {\r\n  //           arr.push('MR', 'RWB');\r\n  //         } else if (mainFoot === 'left') {\r\n  //           arr.push('ML', 'LWB');\r\n  //         } else {\r\n  //           arr.push('MR', 'ML', 'RWB', 'LWB');\r\n  //         }\r\n  //         // alternate positions\r\n  //         for (let i = 1; i < mainPositions.length; i++) {\r\n  //           const altIndex = arr.indexOf(mainPositions[i]);\r\n  //           if (altIndex > -1) {\r\n  //             arr.splice(altIndex, 1);\r\n  //           }\r\n  //         }\r\n  //         num = getRandomInt(0, arr.length - 1);\r\n  //         for (let i = 0; i < altPosCount; i++) {\r\n  //           if (arr.length > 0) {\r\n  //             if (num - i < 0) {\r\n  //               num = arr.length - 1;\r\n  //             } else {\r\n  //               num -= i;\r\n  //             }\r\n  //             // str = arr[num - i].split(', ');\r\n\r\n  //             altPos.push(arr[num]);\r\n  //             const index = arr.indexOf(arr[num]);\r\n  //             if (index > -1) {\r\n  //               arr.splice(index, 1);\r\n  //             }\r\n  //           }\r\n  //         }\r\n\r\n  //         if (mainFoot === 'right') {\r\n  //           arr.push('ML', 'LWB', 'MC');\r\n  //         } else if (mainFoot === 'left') {\r\n  //           arr.push('MR', 'RWB', 'MC');\r\n  //         } else {\r\n  //           arr.push('MC');\r\n  //         }\r\n  //         // competent positions\r\n  //         num = getRandomInt(0, arr.length - 1);\r\n  //         for (let i = 0; i < compPosCount; i++) {\r\n  //           if (arr.length > 0) {\r\n  //             if (num - i < 0) {\r\n  //               num = arr.length - 1;\r\n  //             } else {\r\n  //               num -= i;\r\n  //             }\r\n  //             // str = arr[num - i].split(', ');\r\n  //             compPos.push(arr[num]);\r\n  //             const index = arr.indexOf(arr[num]);\r\n  //             if (index > -1) {\r\n  //               arr.splice(index, 1);\r\n  //             }\r\n  //           }\r\n  //         }\r\n  //         arr.push('RB', 'LB', 'DM');\r\n  //         // unconvincing positions\r\n  //         num = getRandomInt(0, arr.length - 1);\r\n  //         for (let i = 0; i < unPosCount; i++) {\r\n  //           if (arr.length > 0) {\r\n  //             if (num - i < 0) {\r\n  //               num = arr.length - 1;\r\n  //             } else {\r\n  //               num -= i;\r\n  //             }\r\n  //             // str = arr[num - i].split(', ');\r\n  //             unconvincingPos.push(arr[num]);\r\n  //           }\r\n  //         }\r\n  //         break;\r\n  //       case 'AML':\r\n  //         arr = ['AMR', 'AMC', 'ST'];\r\n\r\n  //         if (mainFoot === 'right') {\r\n  //           arr.push('MR', 'RWB');\r\n  //         } else if (mainFoot === 'left') {\r\n  //           arr.push('ML', 'LWB');\r\n  //         } else {\r\n  //           arr.push('MR', 'ML', 'RWB', 'LWB');\r\n  //         }\r\n  //         // alternate positions\r\n  //         for (let i = 1; i < mainPositions.length; i++) {\r\n  //           const altIndex = arr.indexOf(mainPositions[i]);\r\n  //           if (altIndex > -1) {\r\n  //             arr.splice(altIndex, 1);\r\n  //           }\r\n  //         }\r\n  //         num = getRandomInt(0, arr.length - 1);\r\n  //         for (let i = 0; i < altPosCount; i++) {\r\n  //           if (arr.length > 0) {\r\n  //             if (num - i < 0) {\r\n  //               num = arr.length - 1;\r\n  //             } else {\r\n  //               num -= i;\r\n  //             }\r\n  //             // str = arr[num - i].split(', ');\r\n\r\n  //             altPos.push(arr[num]);\r\n  //             const index = arr.indexOf(arr[num]);\r\n  //             if (index > -1) {\r\n  //               arr.splice(index, 1);\r\n  //             }\r\n  //           }\r\n  //         }\r\n\r\n  //         if (mainFoot === 'right') {\r\n  //           arr.push('ML', 'LWB', 'MC');\r\n  //         } else if (mainFoot === 'left') {\r\n  //           arr.push('MR', 'RWB', 'MC');\r\n  //         } else {\r\n  //           arr.push('MC');\r\n  //         }\r\n  //         // competent positions\r\n  //         num = getRandomInt(0, arr.length - 1);\r\n  //         for (let i = 0; i < compPosCount; i++) {\r\n  //           if (arr.length > 0) {\r\n  //             if (num - i < 0) {\r\n  //               num = arr.length - 1;\r\n  //             } else {\r\n  //               num -= i;\r\n  //             }\r\n  //             // str = arr[num - i].split(', ');\r\n  //             compPos.push(arr[num]);\r\n  //             const index = arr.indexOf(arr[num]);\r\n  //             if (index > -1) {\r\n  //               arr.splice(index, 1);\r\n  //             }\r\n  //           }\r\n  //         }\r\n  //         arr.push('RB', 'LB', 'DM');\r\n  //         // unconvincing positions\r\n  //         num = getRandomInt(0, arr.length - 1);\r\n  //         for (let i = 0; i < unPosCount; i++) {\r\n  //           if (arr.length > 0) {\r\n  //             if (num - i < 0) {\r\n  //               num = arr.length - 1;\r\n  //             } else {\r\n  //               num -= i;\r\n  //             }\r\n  //             // str = arr[num - i].split(', ');\r\n  //             unconvincingPos.push(arr[num]);\r\n  //           }\r\n  //         }\r\n  //         break;\r\n  //       case 'DM':\r\n  //         arr = ['CB', 'MC', 'AMC'];\r\n\r\n  //         if (mainFoot === 'right') {\r\n  //           arr.push('RB');\r\n  //         } else if (mainFoot === 'left') {\r\n  //           arr.push('LB');\r\n  //         } else {\r\n  //           arr.push('RB', 'LB');\r\n  //         }\r\n  //         // alternate positions\r\n  //         for (let i = 1; i < mainPositions.length; i++) {\r\n  //           const altIndex = arr.indexOf(mainPositions[i]);\r\n  //           if (altIndex > -1) {\r\n  //             arr.splice(altIndex, 1);\r\n  //           }\r\n  //         }\r\n  //         num = getRandomInt(0, arr.length - 1);\r\n  //         for (let i = 0; i < altPosCount; i++) {\r\n  //           if (arr.length > 0) {\r\n  //             if (num - i < 0) {\r\n  //               num = arr.length - 1;\r\n  //             } else {\r\n  //               num -= i;\r\n  //             }\r\n  //             // str = arr[num - i].split(', ');\r\n\r\n  //             altPos.push(arr[num]);\r\n  //             const index = arr.indexOf(arr[num]);\r\n  //             if (index > -1) {\r\n  //               arr.splice(index, 1);\r\n  //             }\r\n  //           }\r\n  //         }\r\n\r\n  //         if (mainFoot === 'right') {\r\n  //           arr.push('LB', 'LWB', 'RWB', 'MR', 'ML', 'ST');\r\n  //         } else if (mainFoot === 'left') {\r\n  //           arr.push('RB', 'LWB', 'RWB', 'MR', 'ML', 'ST');\r\n  //         } else {\r\n  //           arr.push('LWB', 'RWB', 'MR', 'ML', 'ST');\r\n  //         }\r\n\r\n  //         // competent positions\r\n  //         num = getRandomInt(0, arr.length - 1);\r\n  //         for (let i = 0; i < compPosCount; i++) {\r\n  //           if (arr.length > 0) {\r\n  //             if (num - i < 0) {\r\n  //               num = arr.length - 1;\r\n  //             } else {\r\n  //               num -= i;\r\n  //             }\r\n  //             // str = arr[num - i].split(', ');\r\n  //             compPos.push(arr[num]);\r\n  //             const index = arr.indexOf(arr[num]);\r\n  //             if (index > -1) {\r\n  //               arr.splice(index, 1);\r\n  //             }\r\n  //           }\r\n  //         }\r\n  //         arr.push('AMR', 'AML');\r\n  //         // unconvincing positions\r\n  //         num = getRandomInt(0, arr.length - 1);\r\n  //         for (let i = 0; i < unPosCount; i++) {\r\n  //           if (arr.length > 0) {\r\n  //             if (num - i < 0) {\r\n  //               num = arr.length - 1;\r\n  //             } else {\r\n  //               num -= i;\r\n  //             }\r\n  //             // str = arr[num - i].split(', ');\r\n  //             unconvincingPos.push(arr[num]);\r\n  //           }\r\n  //         }\r\n  //         break;\r\n  //       case 'MC':\r\n  //         arr = ['DM', 'AMC'];\r\n\r\n  //         if (mainFoot === 'right') {\r\n  //           arr.push('MR');\r\n  //         } else if (mainFoot === 'left') {\r\n  //           arr.push('ML');\r\n  //         } else {\r\n  //           arr.push('MR', 'ML');\r\n  //         }\r\n  //         // alternate positions\r\n  //         for (let i = 1; i < mainPositions.length; i++) {\r\n  //           const altIndex = arr.indexOf(mainPositions[i]);\r\n  //           if (altIndex > -1) {\r\n  //             arr.splice(altIndex, 1);\r\n  //           }\r\n  //         }\r\n  //         num = getRandomInt(0, arr.length - 1);\r\n  //         for (let i = 0; i < altPosCount; i++) {\r\n  //           if (arr.length > 0) {\r\n  //             if (num - i < 0) {\r\n  //               num = arr.length - 1;\r\n  //             } else {\r\n  //               num -= i;\r\n  //             }\r\n  //             // str = arr[num - i].split(', ');\r\n\r\n  //             altPos.push(arr[num]);\r\n  //             const index = arr.indexOf(arr[num]);\r\n  //             if (index > -1) {\r\n  //               arr.splice(index, 1);\r\n  //             }\r\n  //           }\r\n  //         }\r\n\r\n  //         if (mainFoot === 'right') {\r\n  //           arr.push('ML', 'RWB', 'LWB', 'CB', 'ST', 'RB', 'LB', 'AMR', 'AML');\r\n  //         } else if (mainFoot === 'left') {\r\n  //           arr.push('MR', 'RWB', 'LWB', 'CB', 'ST', 'RB', 'LB', 'AMR', 'AML');\r\n  //         } else {\r\n  //           arr.push('RWB', 'LWB', 'CB', 'ST', 'RB', 'LB', 'AMR', 'AML');\r\n  //         }\r\n\r\n  //         // competent positions\r\n  //         num = getRandomInt(0, arr.length - 1);\r\n  //         for (let i = 0; i < compPosCount; i++) {\r\n  //           if (arr.length > 0) {\r\n  //             if (num - i < 0) {\r\n  //               num = arr.length - 1;\r\n  //             } else {\r\n  //               num -= i;\r\n  //             }\r\n  //             // str = arr[num - i].split(', ');\r\n  //             compPos.push(arr[num]);\r\n  //             const index = arr.indexOf(arr[num]);\r\n  //             if (index > -1) {\r\n  //               arr.splice(index, 1);\r\n  //             }\r\n  //           }\r\n  //         }\r\n  //         // unconvincing positions\r\n  //         num = getRandomInt(0, arr.length - 1);\r\n  //         for (let i = 0; i < unPosCount; i++) {\r\n  //           if (arr.length > 0) {\r\n  //             if (num - i < 0) {\r\n  //               num = arr.length - 1;\r\n  //             } else {\r\n  //               num -= i;\r\n  //             }\r\n  //             // str = arr[num - i].split(', ');\r\n  //             unconvincingPos.push(arr[num]);\r\n  //           }\r\n  //         }\r\n  //         break;\r\n  //       case 'AMC':\r\n  //         arr = ['DM', 'MC', 'AMR', 'AML', 'ST'];\r\n\r\n  //         if (mainFoot === 'right') {\r\n  //           arr.push('MR');\r\n  //         } else if (mainFoot === 'left') {\r\n  //           arr.push('ML');\r\n  //         } else {\r\n  //           arr.push('MR', 'ML');\r\n  //         }\r\n  //         // alternate positions\r\n  //         for (let i = 1; i < mainPositions.length; i++) {\r\n  //           const altIndex = arr.indexOf(mainPositions[i]);\r\n  //           if (altIndex > -1) {\r\n  //             arr.splice(altIndex, 1);\r\n  //           }\r\n  //         }\r\n  //         num = getRandomInt(0, arr.length - 1);\r\n\r\n  //         for (let i = 0; i < altPosCount; i++) {\r\n  //           if (arr.length > 0) {\r\n  //             if (num - i < 0) {\r\n  //               num = arr.length - 1;\r\n  //             } else {\r\n  //               num -= i;\r\n  //             }\r\n  //             // str = arr[num - i].split(', ');\r\n\r\n  //             altPos.push(arr[num]);\r\n  //             const index = arr.indexOf(arr[num]);\r\n  //             if (index > -1) {\r\n  //               arr.splice(index, 1);\r\n  //             }\r\n  //           }\r\n  //         }\r\n\r\n  //         if (mainFoot === 'right') {\r\n  //           arr.push('ML');\r\n  //         } else if (mainFoot === 'left') {\r\n  //           arr.push('MR');\r\n  //         }\r\n\r\n  //         // competent positions\r\n  //         num = getRandomInt(0, arr.length - 1);\r\n  //         for (let i = 0; i < compPosCount; i++) {\r\n  //           if (arr.length > 0) {\r\n  //             if (num - i < 0) {\r\n  //               num = arr.length - 1;\r\n  //             } else {\r\n  //               num -= i;\r\n  //             }\r\n  //             // str = arr[num - i].split(', ');\r\n  //             compPos.push(arr[num]);\r\n  //             const index = arr.indexOf(arr[num]);\r\n  //             if (index > -1) {\r\n  //               arr.splice(index, 1);\r\n  //             }\r\n  //           }\r\n  //         }\r\n  //         arr.push('LWB', 'RWB', 'RB', 'LB', 'CB');\r\n  //         // unconvincing positions\r\n  //         num = getRandomInt(0, arr.length - 1);\r\n  //         for (let i = 0; i < unPosCount; i++) {\r\n  //           if (arr.length > 0) {\r\n  //             if (num - i < 0) {\r\n  //               num = arr.length - 1;\r\n  //             } else {\r\n  //               num -= i;\r\n  //             }\r\n  //             // str = arr[num - i].split(', ');\r\n  //             unconvincingPos.push(arr[num]);\r\n  //           }\r\n  //         }\r\n  //         break;\r\n  //       case 'ST':\r\n  //         arr = ['AMC', 'AMR', 'AML', 'MC'];\r\n  //         // alternate positions\r\n  //         for (let i = 1; i < mainPositions.length; i++) {\r\n  //           const altIndex = arr.indexOf(mainPositions[i]);\r\n  //           if (altIndex > -1) {\r\n  //             arr.splice(altIndex, 1);\r\n  //           }\r\n  //         }\r\n  //         num = getRandomInt(0, arr.length - 1);\r\n  //         for (let i = 0; i < altPosCount; i++) {\r\n  //           if (arr.length > 0) {\r\n  //             if (num - i < 0) {\r\n  //               num = arr.length - 1;\r\n  //             } else {\r\n  //               num -= i;\r\n  //             }\r\n  //             // str = arr[num - i].split(', ');\r\n\r\n  //             altPos.push(arr[num]);\r\n  //             const index = arr.indexOf(arr[num]);\r\n  //             if (index > -1) {\r\n  //               arr.splice(index, 1);\r\n  //             }\r\n  //           }\r\n  //         }\r\n  //         arr.push('DM', 'MR', 'ML');\r\n  //         // competent positions\r\n  //         num = getRandomInt(0, arr.length - 1);\r\n  //         for (let i = 0; i < compPosCount; i++) {\r\n  //           if (arr.length > 0) {\r\n  //             if (num - i < 0) {\r\n  //               num = arr.length - 1;\r\n  //             } else {\r\n  //               num -= i;\r\n  //             }\r\n  //             // str = arr[num - i].split(', ');\r\n  //             compPos.push(arr[num]);\r\n  //             const index = arr.indexOf(arr[num]);\r\n  //             if (index > -1) {\r\n  //               arr.splice(index, 1);\r\n  //             }\r\n  //           }\r\n  //         }\r\n  //         arr.push('RWB', 'LWB', 'CB');\r\n  //         // unconvincing positions\r\n  //         num = getRandomInt(0, arr.length - 1);\r\n  //         for (let i = 0; i < unPosCount; i++) {\r\n  //           if (arr.length > 0) {\r\n  //             if (num - i < 0) {\r\n  //               num = arr.length - 1;\r\n  //             } else {\r\n  //               num -= i;\r\n  //             }\r\n  //             // str = arr[num - i].split(', ');\r\n  //             unconvincingPos.push(arr[num]);\r\n  //           }\r\n  //         }\r\n  //         break;\r\n  //       default:\r\n  //         console.log('Error in the function getAltPositions()');\r\n  //         break;\r\n  //     }\r\n  //   }\r\n  //   return {\r\n  //     altPos,\r\n  //     compPos,\r\n  //     unconvincingPos,\r\n  //   };\r\n  // }\r\n\r\n  // getPositionRole(mainPosArr: string[], altPosArr: string[], foot: string, rating: number, age: number) {\r\n  //   let num1;\r\n  //   let num2;\r\n  //   let roles: string[];\r\n  //   let duties: string[];\r\n  //   let arr = [];\r\n  //   const pos = mainPosArr[0];\r\n  //   let chance: number;\r\n  //   switch (pos) {\r\n  //     case 'GK': // roles = ['GK', 'SK'];\r\n  //       chance = getRandomInt(1, 4);\r\n  //       // better gk is more likely to be sweeper keeper\r\n  //       if (rating > 69) {\r\n  //         num1 = chance > 1 ? 1 : 0;\r\n  //       } else {\r\n  //         num1 = chance > 1 ? 0 : 1;\r\n  //       }\r\n  //       num2 = getRandomInt(0, 2);\r\n  //       roles = ['GK', 'SK'];\r\n  //       duties = ['De', 'Su', 'At'];\r\n  //       if (num1 === 0) {\r\n  //         num2 = 0;\r\n  //       }\r\n  //       break;\r\n  //     case 'RB':\r\n  //     case 'LB': // roles = ['IWB', 'WB', 'FB', 'CWB', 'DFB'];\r\n  //       roles = ['IWB', 'WB', 'FB', 'CWB', 'DFB'];\r\n\r\n  //       if (rating > 64) {\r\n  //         chance = getRandomInt(1, 4);\r\n  //         if ((pos === 'RB' && foot === 'left') || (pos === 'LB' && foot === 'right')) {\r\n  //           num1 = 0;\r\n  //         } else if (mainPosArr.includes('CB')) {\r\n  //           num1 = chance > 1 ? 2 : 1;\r\n  //         } else {\r\n  //           num1 = chance > 1 ? getRandomInt(1, 2) : 3;\r\n  //         }\r\n  //       } else {\r\n  //         chance = getRandomInt(1, 4);\r\n  //         // 75% chance of full back and 25% for no nonsense full back\r\n  //         num1 = chance > 1 ? 2 : 4;\r\n  //       }\r\n\r\n  //       num2 = getRandomInt(0, 2);\r\n  //       duties = ['De', 'Su', 'At'];\r\n  //       if (num1 === 3) {\r\n  //         duties = ['Su', 'At'];\r\n  //         num2 = getRandomInt(0, 1);\r\n  //       } else if (num1 === 4) {\r\n  //         duties = ['De'];\r\n  //         num2 = 0;\r\n  //       }\r\n\r\n  //       break;\r\n  //     case 'RWB':\r\n  //     case 'LWB': // roles = ['IWB', 'WB', 'CWB'];\r\n  //       roles = ['IWB', 'WB', 'CWB'];\r\n  //       if (rating > 64) {\r\n  //         if ((pos === 'RWB' && foot === 'left') || (pos === 'LWB' && foot === 'right')) {\r\n  //           num1 = 0;\r\n  //         } else {\r\n  //           chance = getRandomInt(1, 4);\r\n  //           num1 = chance > 1 ? 1 : 2;\r\n  //         }\r\n  //       } else if ((pos === 'RWB' && foot === 'left') || (pos === 'LWB' && foot === 'right')) {\r\n  //         num1 = 0;\r\n  //       } else {\r\n  //         num1 = 1;\r\n  //       }\r\n\r\n  //       num2 = getRandomInt(0, 2);\r\n  //       duties = ['De', 'Su', 'At'];\r\n  //       if (num1 === 2) {\r\n  //         duties = ['Su', 'At'];\r\n  //         num2 = getRandomInt(0, 1);\r\n  //       }\r\n  //       break;\r\n  //     case 'CB': // roles = ['NCB', 'BPD', 'CD', 'WCB', 'L'];\r\n  //       roles = ['NCB', 'BPD', 'CD', 'WCB'];\r\n  //       chance = getRandomInt(1, 40);\r\n  //       if (rating > 70) {\r\n  //         if (chance > 38) {\r\n  //           num1 = 0;\r\n  //         } else if (chance > 34) {\r\n  //           num1 = 1;\r\n  //         } else {\r\n  //           num1 = 2;\r\n  //         }\r\n  //       } else if (chance > 38) {\r\n  //         num1 = 1;\r\n  //       } else if (chance > 34) {\r\n  //         num1 = 0;\r\n  //       } else {\r\n  //         num1 = 2;\r\n  //       }\r\n\r\n  //       num2 = getRandomInt(0, 2);\r\n  //       duties = ['De', 'Co', 'St'];\r\n  //       if (num1 > 2) {\r\n  //         duties = ['De', 'Su', 'At'];\r\n  //       }\r\n\r\n  //       break;\r\n  //     case 'DM': // roles = ['A', 'HB', 'DM', 'BWM', 'DLP', 'RGA', 'RPM', 'VOL'];\r\n  //       // A and VOL is 10%\r\n  //       // DM and DLP are 40%\r\n  //       // BWM is 50%\r\n  //       roles = ['VOL', 'A', 'DM', 'DLP', 'BWM'];\r\n  //       chance = getRandomInt(1, 10);\r\n  //       if (chance > 9) {\r\n  //         num1 = getRandomInt(0, 1);\r\n  //       } else if (chance > 5) {\r\n  //         num1 = getRandomInt(2, 3);\r\n  //       } else {\r\n  //         num1 = 4;\r\n  //       }\r\n\r\n  //       num2 = getRandomInt(0, 1);\r\n  //       duties = ['De', 'Su'];\r\n  //       if (num1 === 1) {\r\n  //         duties = ['De'];\r\n  //         num2 = 0;\r\n  //       } else if (num1 === 0) {\r\n  //         duties = ['Su', 'At'];\r\n  //         num2 = getRandomInt(0, 1);\r\n  //       }\r\n  //       break;\r\n  //     case 'MC': // roles = ['DLP', 'BWM', 'RPM', 'CM', 'CAR', 'BBM', 'MEZ', 'AP'];\r\n  //       roles = ['DLP', 'BWM', 'CM', 'CAR', 'BBM', 'MEZ', 'AP'];\r\n  //       // DLP and AP are 500 each\r\n  //       // BWM is 1000\r\n  //       // CM is 2000\r\n  //       // BBM 200\r\n  //       // Mez is 850\r\n  //       // CAR\r\n  //       if (rating > 64) {\r\n  //         chance = getRandomInt(1, 50);\r\n  //         if (chance > 49) {\r\n  //           num1 = 3;\r\n  //         } else if (chance > 45) {\r\n  //           num1 = 4;\r\n  //         } else {\r\n  //           arr = [getRandomInt(0, 2), getRandomInt(5, 6)];\r\n  //           num1 = arr[getRandomInt(0, 1)];\r\n  //         }\r\n\r\n  //         if (num1 < 2) {\r\n  //           duties = ['De', 'Su'];\r\n  //           num2 = getRandomInt(0, 1);\r\n  //         } else if (num1 > 4) {\r\n  //           duties = ['Su', 'At'];\r\n  //           num2 = getRandomInt(0, 1);\r\n  //         } else if (num1 === 2) {\r\n  //           duties = ['De', 'Su', 'At'];\r\n  //           num2 = getRandomInt(0, 2);\r\n  //         } else {\r\n  //           num2 = 0;\r\n  //           duties = ['Su'];\r\n  //         }\r\n  //       } else {\r\n  //         roles = ['CM', 'BWM', 'DLP', 'AP', 'BBM'];\r\n  //         //\r\n  //         chance = getRandomInt(1, 50);\r\n  //         if (chance > 49) {\r\n  //           num1 = 4;\r\n  //         } else if (chance > 35) {\r\n  //           num1 = getRandomInt(1, 2);\r\n  //         } else if (chance > 25) {\r\n  //           num1 = 1;\r\n  //         } else {\r\n  //           num1 = 0;\r\n  //         }\r\n\r\n  //         if (num1 < 1) {\r\n  //           duties = ['De', 'Su', 'At'];\r\n  //           num2 = getRandomInt(0, 2);\r\n  //         } else if (num1 < 3) {\r\n  //           duties = ['De', 'Su'];\r\n  //           num2 = getRandomInt(0, 1);\r\n  //         } else if (num1 < 4) {\r\n  //           duties = ['Su', 'At'];\r\n  //           num2 = getRandomInt(0, 1);\r\n  //         } else {\r\n  //           duties = ['Su'];\r\n  //           num2 = 0;\r\n  //         }\r\n  //       }\r\n  //       break;\r\n  //     case 'AMC': // roles = ['AP', 'AM', 'EG', 'T', 'SS'];\r\n  //       num1 = getRandomInt(0, 4);\r\n  //       num2 = getRandomInt(0, 1);\r\n  //       roles = ['AP', 'AM', 'EG', 'SS'];\r\n  //       if (age > 33) {\r\n  //         num1 = 2;\r\n  //       } else {\r\n  //         chance = getRandomInt(1, 4);\r\n  //         if (mainPosArr.includes('ST')) {\r\n  //           num1 = 3;\r\n  //         } else if (mainPosArr.includes('DM')) {\r\n  //           num1 = getRandomInt(0, 1);\r\n  //         } else {\r\n  //           num1 = chance > 1 ? getRandomInt(0, 1) : 3;\r\n  //         }\r\n  //       }\r\n\r\n  //       if (num1 === 3) {\r\n  //         duties = ['At'];\r\n  //         num2 = 0;\r\n  //       } else if (num1 === 2) {\r\n  //         duties = ['Su'];\r\n  //         num2 = 0;\r\n  //       } else {\r\n  //         duties = ['Su', 'At'];\r\n  //       }\r\n  //       break;\r\n  //     case 'MR':\r\n  //     case 'ML': // roles = ['W', 'IW', 'WP', 'WM', 'DW'];\r\n  //       roles = ['W', 'IW', 'WP', 'WM', 'DW'];\r\n  //       duties = ['Su', 'At'];\r\n  //       chance = getRandomInt(1, 10);\r\n  //       if (rating > 64) {\r\n  //         num1 = 0;\r\n  //         if ((foot === 'right' && pos === 'ML') || (foot === 'left' && pos === 'MR')) {\r\n  //           num1 = 1;\r\n  //         }\r\n  //       } else {\r\n  //         num1 = chance > 1 ? 0 : 4;\r\n  //         if ((foot === 'right' && pos === 'ML') || (foot === 'left' && pos === 'MR')) {\r\n  //           num1 = 1;\r\n  //         }\r\n  //       }\r\n  //       num2 = getRandomInt(0, 1);\r\n\r\n  //       if (num1 > 3) {\r\n  //         duties = ['De', 'Su'];\r\n  //       } else if (num1 > 2) {\r\n  //         duties = ['De', 'Su', 'At'];\r\n  //         num2 = getRandomInt(0, 2);\r\n  //       }\r\n  //       break;\r\n  //     case 'AMR':\r\n  //     case 'AML': // roles = ['W', 'IW', 'AP', 'IF', 'WT', 'T', 'RMD'];\r\n  //       roles = ['W', 'IW', 'AP', 'IF', 'WT', 'T', 'RMD'];\r\n  //       duties = ['Su', 'At'];\r\n  //       chance = getRandomInt(1, 20);\r\n\r\n  //       if ((pos === 'AMR' && foot === 'left') || (pos === 'AML' && foot === 'right')) {\r\n  //         num1 = chance > 1 ? 1 : 3;\r\n  //       } else {\r\n  //         num1 = chance > 1 ? 0 : 2;\r\n  //       }\r\n  //       num2 = getRandomInt(0, 1);\r\n  //       if (num1 > 4) {\r\n  //         duties = ['At'];\r\n  //         num2 = 0;\r\n  //       }\r\n  //       break;\r\n  //     case 'ST': // roles = ['AF', 'P', 'T', 'CF', 'TF', 'DLF', 'F9', 'PF'];\r\n  //       roles = ['P', 'AF', 'TF', 'PF', 'DLF'];\r\n  //       duties = ['Su', 'At'];\r\n  //       chance = getRandomInt(1, 2);\r\n  //       // 50% chance for Poacher / 50% for all other positions\r\n  //       num1 = chance > 1 ? 0 : getRandomInt(1, 4);\r\n  //       num2 = getRandomInt(0, 1);\r\n\r\n  //       if (num1 < 2) {\r\n  //         duties = ['At'];\r\n  //         num2 = 0;\r\n  //       } else if (num1 === 3) {\r\n  //         duties = ['De', 'Su', 'At'];\r\n  //         num2 = getRandomInt(0, 2);\r\n  //       }\r\n\r\n  //       break;\r\n  //     default:\r\n  //       roles = [];\r\n  //       duties = [];\r\n  //       num1 = 0;\r\n  //       num2 = 0;\r\n  //       break;\r\n  //   }\r\n  //   const role = roles[num1];\r\n  //   const duty = duties[num2];\r\n  //   return {\r\n  //     role,\r\n  //     duty,\r\n  //   };\r\n  // }\r\n\r\n  // getFoot(mainPos: string) {\r\n  //   const num = getRandomInt(1, 100);\r\n  //   switch (mainPos) {\r\n  //     case 'GK':\r\n  //     case 'CB':\r\n  //     case 'DM':\r\n  //     case 'MC':\r\n  //     case 'AMC':\r\n  //     case 'ST':\r\n  //       if (num < 76.5) {\r\n  //         return 'right';\r\n  //       }\r\n  //       return 'left';\r\n\r\n  //     case 'AML':\r\n  //     case 'ML':\r\n  //       if (num < 50) {\r\n  //         return 'left';\r\n  //       }\r\n  //       return 'right';\r\n\r\n  //     case 'LB':\r\n  //     case 'LWB':\r\n  //       if (num < 75) {\r\n  //         return 'left';\r\n  //       }\r\n  //       return 'right';\r\n\r\n  //     case 'AMR':\r\n  //     case 'MR':\r\n  //       if (num < 70) {\r\n  //         return 'right';\r\n  //       }\r\n  //       return 'left';\r\n\r\n  //     case 'RB':\r\n  //     case 'RWB':\r\n  //       if (num < 98) {\r\n  //         return 'right';\r\n  //       }\r\n  //       return 'left';\r\n\r\n  //     default:\r\n  //       console.log('Error in the function getPlayerFoot()');\r\n  //       return 'Error with getFoot(), check console';\r\n  //   }\r\n  // }\r\n\r\n  // getRatingAndClubRep(\r\n  //   i: number,\r\n  //   first: number,\r\n  //   second: number,\r\n  //   third: number,\r\n  //   fourth: number,\r\n  //   fifth: number,\r\n  //   sixth: number,\r\n  //   seventh: number,\r\n  //   eighth: number\r\n  // ) {\r\n  //   let rating = 0;\r\n  //   let clubRep = '';\r\n  //   const chance = getRandomInt(1, 20);\r\n  //   if (i < first) {\r\n  //     if (chance > 1) {\r\n  //       rating = Math.min(getRandomInt(82, 89), getRandomInt(82, 89));\r\n  //     } else {\r\n  //       rating = Math.min(getRandomInt(88, 99), getRandomInt(88, 99), getRandomInt(88, 99));\r\n  //     }\r\n  //     clubRep = 'top50';\r\n  //   } else if (i < first + second) {\r\n  //     rating = getRandomInt(76, 81);\r\n  //     clubRep = 'top200';\r\n  //   } else if (i < first + second + third) {\r\n  //     rating = getRandomInt(70, 75);\r\n  //     clubRep = 'regularInternational';\r\n  //   } else if (i < first + second + third + fourth) {\r\n  //     rating = getRandomInt(65, 69);\r\n  //     clubRep = 'averagePlayer';\r\n  //   } else if (i < first + second + third + fourth + fifth) {\r\n  //     rating = getRandomInt(60, 65);\r\n  //     clubRep = 'championshipPlayer';\r\n  //   } else if (i < first + second + third + fourth + fifth + sixth) {\r\n  //     rating = getRandomInt(55, 61);\r\n  //     clubRep = 'leagueOnePlayer';\r\n  //   } else if (i < first + second + third + fourth + fifth + sixth + seventh) {\r\n  //     rating = getRandomInt(48, 54);\r\n  //     clubRep = 'leagueTwoPlayer';\r\n  //   } else if (i < first + second + third + fourth + fifth + sixth + seventh + eighth) {\r\n  //     rating = getRandomInt(30, 47);\r\n  //     clubRep = 'fillerPlayer';\r\n  //   }\r\n\r\n  //   return {\r\n  //     rating,\r\n  //     clubRep,\r\n  //   };\r\n  // }\r\n\r\n  // getAttributes(\r\n  //   pos: string,\r\n  //   altPos: string[],\r\n  //   role: string,\r\n  //   duty: string,\r\n  //   rating: number,\r\n  //   age: number\r\n  // ): { height: number; weight: number; weakFoot: number; attributes: any } {\r\n  //   let height = 0; // in inches\r\n  //   let weight = 0; // in lbs\r\n  //   const weakFoot = 0; // 1-4 very weak, 5-8 weak, 8-11 reasonable, 12-14 fairly strong, 15-17 strong, 18-20 very strong\r\n  //   // very weak and weak is right/left only, reasonable and fairly strong is right/left, and strong and very strong is either footed\r\n  //   const bmi = median([getRandomInt(19, 29), getRandomInt(19, 29)]);\r\n\r\n  //   if (pos === 'GK') {\r\n  //     height = median([getRandomInt(69, 78), getRandomInt(69, 78)]);\r\n  //   } else {\r\n  //     height = median([getRandomInt(62, 78), getRandomInt(62, 78)]);\r\n  //   }\r\n\r\n  //   weight = Math.round((bmi * height ** 2) / 703);\r\n\r\n  //   // current ability / potential ability\r\n  //   const currentAbility = rating * 2;\r\n  //   let potentialAbility;\r\n  //   const gkAttributes = {} as GkAttributes;\r\n  //   const outAttributes = {} as OutfieldAttributes;\r\n  //   let attributes = {};\r\n  //   let attr25;\r\n  //   let attr17;\r\n  //   let attr09;\r\n  //   let attr06;\r\n  //   let attr04;\r\n  //   let attr01;\r\n  //   let attr0;\r\n  //   let ability;\r\n  //   switch (pos) {\r\n  //     case 'GK':\r\n  //       // 2.5, 1.65, 0.92, 0.6, 0.35, 0.125, 0\r\n  //       attr25 = ['handling', 'reflexes'];\r\n  //       attr17 = [\r\n  //         'aerialReach',\r\n  //         'commandOfArea',\r\n  //         'communication',\r\n  //         'kicking',\r\n  //         'oneOnOnes',\r\n  //         'bravery',\r\n  //         'concentration',\r\n  //         'decisions',\r\n  //         'positioning',\r\n  //         'agility',\r\n  //       ];\r\n  //       attr09 = ['throwing', 'acceleration', 'strength'];\r\n  //       attr06 = ['weakFoot'];\r\n  //       attr04 = ['anticipation', 'composure', 'leadership', 'teamwork', 'balance', 'pace'];\r\n  //       attr01 = ['firstTouch', 'vision', 'workRate', 'jumpingReach', 'stamina', 'technique'];\r\n  //       attr0 = [\r\n  //         'eccentricity',\r\n  //         'freeKickTaking',\r\n  //         'penalty taking',\r\n  //         'rushingOutTendency',\r\n  //         'punchingTendency',\r\n  //         'aggression',\r\n  //         'determination',\r\n  //         'flair',\r\n  //         'offTheBall',\r\n  //         'naturalFitness',\r\n  //       ];\r\n  //       for (let i = 0; i < attr0.length; i++) {\r\n  //         gkAttributes[attr0[i]] = getRandomInt(1, 20);\r\n  //       }\r\n  //       ability = 0;\r\n  //       while (ability < currentAbility) {\r\n  //         // green attributes\r\n  //         gkAttributes.reflexes = Math.max(getRandomInt(5, 20), getRandomInt(5, 20));\r\n  //         gkAttributes.kicking = Math.max(getRandomInt(5, 20), getRandomInt(5, 20));\r\n  //         gkAttributes.commandOfArea = Math.max(getRandomInt(5, 20), getRandomInt(5, 20));\r\n  //         gkAttributes.concentration = Math.max(getRandomInt(5, 20), getRandomInt(5, 20));\r\n  //         gkAttributes.positioning = Math.max(getRandomInt(5, 20), getRandomInt(5, 20));\r\n  //         gkAttributes.agility = Math.max(getRandomInt(5, 20), getRandomInt(5, 20));\r\n  //         // blue attributes\r\n  //         gkAttributes.throwing = getRandomInt(5, 20);\r\n  //         gkAttributes.decisions = getRandomInt(5, 20);\r\n  //         // others\r\n  //         gkAttributes.eccentricity = getRandomInt(1, 20);\r\n  //         gkAttributes.punchingTendency = getRandomInt(1, 20);\r\n  //         if (role === 'GK') {\r\n  //           // green attributes\r\n  //           gkAttributes.aerialReach = Math.max(getRandomInt(5, 20), getRandomInt(5, 20));\r\n  //           gkAttributes.communication = Math.max(getRandomInt(5, 20), getRandomInt(5, 20));\r\n  //           gkAttributes.handling = Math.max(getRandomInt(5, 20), getRandomInt(5, 20));\r\n  //           // blue attributes\r\n  //           gkAttributes.oneOnOnes = getRandomInt(5, 20);\r\n  //           gkAttributes.anticipation = getRandomInt(5, 20);\r\n  //           // others\r\n  //           gkAttributes.firstTouch = getRandomInt(1, 20);\r\n  //           gkAttributes.passing = getRandomInt(1, 20);\r\n  //           gkAttributes.rushingOutTendency = getRandomInt(1, 20);\r\n  //           gkAttributes.composure = getRandomInt(1, 20);\r\n  //           gkAttributes.vision = getRandomInt(1, 20);\r\n  //           gkAttributes.acceleration = getRandomInt(1, 20);\r\n  //         } else if (role === 'SK') {\r\n  //           // green attributes\r\n  //           gkAttributes.oneOnOnes = Math.max(getRandomInt(5, 20), getRandomInt(5, 20));\r\n  //           gkAttributes.rushingOutTendency = Math.max(getRandomInt(5, 20), getRandomInt(5, 20));\r\n  //           gkAttributes.anticipation = Math.max(getRandomInt(5, 20), getRandomInt(5, 20));\r\n  //           gkAttributes.composure = Math.max(getRandomInt(5, 20), getRandomInt(5, 20));\r\n  //           // blue attributes\r\n  //           gkAttributes.aerialReach = getRandomInt(5, 20);\r\n  //           gkAttributes.communication = getRandomInt(5, 20);\r\n  //           gkAttributes.handling = getRandomInt(5, 20);\r\n  //           gkAttributes.firstTouch = getRandomInt(5, 20);\r\n  //           gkAttributes.passing = getRandomInt(5, 20);\r\n  //           gkAttributes.vision = getRandomInt(5, 20);\r\n  //           gkAttributes.acceleration = getRandomInt(5, 20);\r\n  //           // others\r\n  //         }\r\n  //       }\r\n  //       attributes = gkAttributes;\r\n\r\n  //       break;\r\n  //     case 'CB':\r\n  //       break;\r\n  //     case 'RB':\r\n  //     case 'LB':\r\n  //       break;\r\n  //     case 'RWB':\r\n  //     case 'LWB':\r\n  //       break;\r\n  //     case 'DM':\r\n  //       break;\r\n  //     case 'MR':\r\n  //     case 'ML':\r\n  //       break;\r\n  //     case 'MC':\r\n  //       break;\r\n  //     case 'AMR':\r\n  //     case 'AML':\r\n  //       break;\r\n  //     case 'AMC':\r\n  //       break;\r\n  //     case 'ST':\r\n  //       break;\r\n  //     default:\r\n  //       attributes = outAttributes;\r\n  //       break;\r\n  //   }\r\n\r\n  //   return {\r\n  //     height,\r\n  //     weight,\r\n  //     weakFoot,\r\n  //     attributes,\r\n  //   };\r\n  // }\r\n\r\n  // getClub(clubRep: string, playerNation: string) {\r\n  //   const clubArr = this.clubs[clubRep];\r\n\r\n  //   const nationObj = this.nationsList.find(nation => nation.name === playerNation);\r\n  //   let clubName = '';\r\n  //   let clubLogoUrl = '';\r\n\r\n  //   shuffle(clubArr);\r\n  //   if (nationObj) {\r\n  //     // 50% chance for mainLeague\r\n  //     const main = getRandomInt(1, 2);\r\n\r\n  //     if (main < 2) {\r\n  //       for (let i = 0; i < clubArr.length; i++) {\r\n  //         if (nationObj.mainLeagues.includes(clubArr[i].league)) {\r\n  //           clubName = clubArr[i].club;\r\n  //           clubLogoUrl = clubArr[i].logo;\r\n  //           return {\r\n  //             clubName,\r\n  //             clubLogoUrl,\r\n  //           };\r\n  //         }\r\n  //       }\r\n  //     }\r\n  //     // 30% chance for secondLeague\r\n  //     const secondary = getRandomInt(1, 10);\r\n\r\n  //     if (secondary < 4 && clubName === '') {\r\n  //       for (let i = 0; i < clubArr.length; i++) {\r\n  //         if (nationObj.secondLeagues.includes(clubArr[i].league)) {\r\n  //           clubName = clubArr[i].club;\r\n  //           clubLogoUrl = clubArr[i].logo;\r\n  //           return {\r\n  //             clubName,\r\n  //             clubLogoUrl,\r\n  //           };\r\n  //         }\r\n  //       }\r\n  //     }\r\n  //     // 15% chance for thirdLeague\r\n  //     const tertiary = getRandomInt(1, 100);\r\n\r\n  //     if (tertiary < 16 && clubName === '') {\r\n  //       for (let i = 0; i < clubArr.length; i++) {\r\n  //         if (nationObj.thirdLeagues.includes(clubArr[i].league)) {\r\n  //           clubName = clubArr[i].club;\r\n  //           clubLogoUrl = clubArr[i].logo;\r\n  //           return {\r\n  //             clubName,\r\n  //             clubLogoUrl,\r\n  //           };\r\n  //         }\r\n  //       }\r\n  //     }\r\n\r\n  //     // 5% chance for thirdLeague\r\n  //     const rare = getRandomInt(1, 100);\r\n\r\n  //     if (rare < 6 && clubName === '') {\r\n  //       for (let i = 0; i < clubArr.length; i++) {\r\n  //         if (nationObj.rareLeagues.includes(clubArr[i].league)) {\r\n  //           clubName = clubArr[i].club;\r\n  //           clubLogoUrl = clubArr[i].logo;\r\n  //           return {\r\n  //             clubName,\r\n  //             clubLogoUrl,\r\n  //           };\r\n  //         }\r\n  //       }\r\n  //     }\r\n\r\n  //     // if still no club, choose a random club\r\n  //     for (let i = 0; i < clubArr.length; i++) {\r\n  //       if (!nationObj.excludeLeagues.includes(clubArr[i].league)) {\r\n  //         // check for excluded league\r\n  //         clubName = clubArr[i].club;\r\n  //         clubLogoUrl = clubArr[i].logo;\r\n  //         return {\r\n  //           clubName,\r\n  //           clubLogoUrl,\r\n  //         };\r\n  //       }\r\n  //     }\r\n\r\n  //     return {\r\n  //       clubName,\r\n  //       clubLogoUrl,\r\n  //     };\r\n  //   }\r\n  //   throw new Error('Club was not found');\r\n  // }\r\n\r\n  // getAge(rating: number, mainPos: string) {\r\n  //   // Average ages are based on this website https://football-observatory.com/IMG/sites/mr/mr49/en/\r\n  //   let ageIndex: number;\r\n  //   if (rating > 84) {\r\n  //     const arr = [getRandomInt(0, 1000), getRandomInt(0, 1000), getRandomInt(0, 1000)];\r\n  //     ageIndex = median(arr);\r\n  //   } else if (rating > 76) {\r\n  //     const sum = getRandomInt(0, 1000) + getRandomInt(0, 1000);\r\n  //     ageIndex = sum / 2;\r\n  //   } else {\r\n  //     ageIndex = getRandomInt(0, 1000);\r\n  //   }\r\n\r\n  //   if (mainPos === 'GK') {\r\n  //     if (ageIndex < 1) {\r\n  //       return 17;\r\n  //     }\r\n  //     if (ageIndex < 2) {\r\n  //       return 18;\r\n  //     }\r\n  //     if (ageIndex < 5) {\r\n  //       return 19;\r\n  //     }\r\n  //     if (ageIndex < 10) {\r\n  //       return 20;\r\n  //     }\r\n  //     if (ageIndex < 15) {\r\n  //       return 21;\r\n  //     }\r\n  //     if (ageIndex < 25) {\r\n  //       return 22;\r\n  //     }\r\n  //     if (ageIndex < 51) {\r\n  //       return 23;\r\n  //     }\r\n  //     if (ageIndex < 91) {\r\n  //       return 24;\r\n  //     }\r\n  //     if (ageIndex < 141) {\r\n  //       return 25;\r\n  //     }\r\n  //     if (ageIndex < 191) {\r\n  //       return 26;\r\n  //     }\r\n  //     if (ageIndex < 246) {\r\n  //       return 27;\r\n  //     }\r\n  //     if (ageIndex < 301) {\r\n  //       return 28;\r\n  //     }\r\n  //     if (ageIndex < 371) {\r\n  //       return 29;\r\n  //     }\r\n  //     if (ageIndex < 441) {\r\n  //       return 30;\r\n  //     }\r\n  //     if (ageIndex < 516) {\r\n  //       return 31;\r\n  //     }\r\n  //     if (ageIndex < 591) {\r\n  //       return 32;\r\n  //     }\r\n  //     if (ageIndex < 666) {\r\n  //       return 33;\r\n  //     }\r\n  //     if (ageIndex < 741) {\r\n  //       return 34;\r\n  //     }\r\n  //     if (ageIndex < 816) {\r\n  //       return 35;\r\n  //     }\r\n  //     if (ageIndex < 881) {\r\n  //       return 36;\r\n  //     }\r\n  //     if (ageIndex < 931) {\r\n  //       return 37;\r\n  //     }\r\n  //     if (ageIndex < 966) {\r\n  //       return 38;\r\n  //     }\r\n  //     if (995) {\r\n  //       return 39;\r\n  //     }\r\n  //     return 40;\r\n  //   }\r\n  //   if (ageIndex < 1) {\r\n  //     return 16;\r\n  //   }\r\n  //   if (ageIndex >= 1 && ageIndex <= 8) {\r\n  //     return 17;\r\n  //   }\r\n  //   if (ageIndex >= 9 && ageIndex <= 30) {\r\n  //     return 18;\r\n  //   }\r\n  //   if (ageIndex >= 31 && ageIndex <= 74) {\r\n  //     return 19;\r\n  //   }\r\n  //   if (ageIndex >= 75 && ageIndex <= 133) {\r\n  //     return 20;\r\n  //   }\r\n  //   if (ageIndex >= 134 && ageIndex <= 207) {\r\n  //     return 21;\r\n  //   }\r\n  //   if (ageIndex >= 208 && ageIndex <= 286) {\r\n  //     return 22;\r\n  //   }\r\n  //   if (ageIndex >= 287 && ageIndex <= 365) {\r\n  //     return 23;\r\n  //   }\r\n  //   if (ageIndex >= 365 && ageIndex <= 447) {\r\n  //     return 24;\r\n  //   }\r\n  //   if (ageIndex >= 448 && ageIndex <= 524) {\r\n  //     return 25;\r\n  //   }\r\n  //   if (ageIndex >= 525 && ageIndex <= 599) {\r\n  //     return 26;\r\n  //   }\r\n  //   if (ageIndex >= 600 && ageIndex <= 669) {\r\n  //     return 27;\r\n  //   }\r\n  //   if (ageIndex >= 670 && ageIndex <= 735) {\r\n  //     return 28;\r\n  //   }\r\n  //   if (ageIndex >= 736 && ageIndex <= 794) {\r\n  //     return 29;\r\n  //   }\r\n  //   if (ageIndex >= 795 && ageIndex <= 843) {\r\n  //     return 30;\r\n  //   }\r\n  //   if (ageIndex >= 844 && ageIndex <= 890) {\r\n  //     return 31;\r\n  //   }\r\n  //   if (ageIndex >= 891 && ageIndex <= 925) {\r\n  //     return 32;\r\n  //   }\r\n  //   if (ageIndex >= 926 && ageIndex <= 952) {\r\n  //     return 33;\r\n  //   }\r\n  //   if (ageIndex >= 953 && ageIndex <= 970) {\r\n  //     return 34;\r\n  //   }\r\n  //   if (ageIndex >= 971 && ageIndex <= 983) {\r\n  //     return 35;\r\n  //   }\r\n  //   if (ageIndex >= 984 && ageIndex <= 991) {\r\n  //     return 36;\r\n  //   }\r\n  //   if (ageIndex >= 992 && ageIndex <= 996) {\r\n  //     return 37;\r\n  //   }\r\n  //   return 38;\r\n  // }\r\n\r\n  // getRandomNationTier(rating: number) {\r\n  //   const randomNum = getRandomInt(1, 100);\r\n  //   const half = getRandomInt(0, 1);\r\n  //   const third = getRandomInt(0, 2);\r\n  //   const quarter = Math.min(getRandomInt(0, 3), getRandomInt(0, 3));\r\n  //   let tier = '';\r\n  //   if (rating > 75) {\r\n  //     if (randomNum > 50) {\r\n  //       if (third < 2) {\r\n  //         tier = 's';\r\n  //       } else {\r\n  //         tier = 'a';\r\n  //       }\r\n  //     } else if (randomNum > 22) {\r\n  //       if (half > 0) {\r\n  //         tier = 'b';\r\n  //       } else {\r\n  //         tier = 'c';\r\n  //       }\r\n  //     } else {\r\n  //       switch (quarter) {\r\n  //         case 0:\r\n  //           tier = 'd';\r\n  //           break;\r\n  //         case 1:\r\n  //           tier = 'e';\r\n  //           break;\r\n  //         case 2:\r\n  //           tier = 'f';\r\n  //           break;\r\n  //         case 3:\r\n  //           tier = 'g';\r\n  //           break;\r\n  //         default:\r\n  //           tier = 'd';\r\n  //           break;\r\n  //       }\r\n  //     }\r\n  //   } else if (rating > 59) {\r\n  //     if (randomNum > 50) {\r\n  //       switch (quarter) {\r\n  //         case 0:\r\n  //           tier = 's';\r\n  //           break;\r\n  //         case 1:\r\n  //           tier = 'a';\r\n  //           break;\r\n  //         case 2:\r\n  //           tier = 'b';\r\n  //           break;\r\n  //         case 3:\r\n  //           tier = 'c';\r\n  //           break;\r\n  //         default:\r\n  //           tier = 's';\r\n  //           break;\r\n  //       }\r\n  //     } else if (randomNum > 20) {\r\n  //       switch (quarter) {\r\n  //         case 0:\r\n  //           tier = 'd';\r\n  //           break;\r\n  //         case 1:\r\n  //           tier = 'e';\r\n  //           break;\r\n  //         case 2:\r\n  //           tier = 'f';\r\n  //           break;\r\n  //         case 3:\r\n  //           tier = 'g';\r\n  //           break;\r\n  //         default:\r\n  //           tier = 'd';\r\n  //           break;\r\n  //       }\r\n  //     } else {\r\n  //       switch (quarter) {\r\n  //         case 0:\r\n  //           tier = 'h';\r\n  //           break;\r\n  //         case 1:\r\n  //           tier = 'i';\r\n  //           break;\r\n  //         case 2:\r\n  //           tier = 'j';\r\n  //           break;\r\n  //         case 3:\r\n  //           tier = 'k';\r\n  //           break;\r\n  //         default:\r\n  //           tier = 'h';\r\n  //           break;\r\n  //       }\r\n  //     }\r\n  //   } else {\r\n  //     const arr = ['s', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l'];\r\n  //     const i = Math.min(getRandomInt(0, arr.length - 1), getRandomInt(0, arr.length - 1));\r\n  //     tier = arr[i];\r\n  //   }\r\n  //   tier += ' tier';\r\n  //   return tier;\r\n  // }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "afsService",
                        "type": "FirestoreService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "afsService",
                        "type": "FirestoreService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "CreateRosterService",
            "id": "injectable-CreateRosterService-f6b235c5148c4630bfa8b4f41e12c86a65bbc4670a3569c86f8acc21c032092c3e9bc894320355e3adc3a958ff3da4ad4a94c63b5910db254e7043980bf6b185",
            "file": "src/app/core/services/create-roster.service.ts",
            "properties": [
                {
                    "name": "clubs",
                    "defaultValue": "clubsModule as Club[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Club[]",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "nations",
                    "defaultValue": "nationsModule",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "pitchPositions",
                    "defaultValue": "pitchPositionsModule",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "positions",
                    "defaultValue": "positionsModule",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "shirtIcon",
                    "defaultValue": "'../../../assets/img/shirt-icon.jpg'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "squadRules",
                    "defaultValue": "SQUAD_RULES",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Roster, RosterData } from 'app/models/roster.model';\r\nimport { Observable, of } from 'rxjs';\r\nimport { Nation } from 'app/models/nation.model';\r\nimport { Club } from 'app/models/club.model';\r\nimport { SQUAD_RULES } from '@shared/constants/squad-rules.model';\r\nimport { compare, getRandomInt } from '@shared/utils';\r\nimport * as pitchPositionsModule from '../../../assets/json/pitchPositions.json';\r\nimport * as positionsModule from '../../../assets/json/positions.json';\r\nimport * as clubsModule from '../../../assets/json/clubs.json';\r\nimport * as nationsModule from '../../../assets/json/nations.json';\r\nimport { CreatePlayerService } from './create-player.service';\r\n\r\n@Injectable()\r\nexport class CreateRosterService {\r\n  // playerService;\r\n  // roster: Roster;\r\n  squadRules = SQUAD_RULES;\r\n\r\n  positions = positionsModule;\r\n  pitchPositions = pitchPositionsModule;\r\n\r\n  nations = nationsModule;\r\n  // nationsList: Nation[];\r\n  clubs: Club[] = clubsModule as Club[];\r\n\r\n  shirtIcon = '../../../assets/img/shirt-icon.jpg';\r\n\r\n  // roster$: Observable<Roster>;\r\n  // squadRules$: Observable<unknown>;\r\n\r\n  constructor(playerService: CreatePlayerService) {\r\n    // this.playerService = playerService;\r\n    // this.roster$.subscribe((val) => {\r\n    //   this.roster = val;\r\n    // });\r\n    // this.squadRules$ = of(this.squadRules);\r\n    // this.nationsList = [];\r\n    // this.nations\r\n    //   .map((tier) => tier.nations)\r\n    //   .forEach((nationsArr) =>\r\n    //     nationsArr.forEach((nation) => this.nationsList.push(nation as Nation))\r\n    //   );\r\n  }\r\n\r\n  // currentRoster() {\r\n  //   this.roster$ = of(this.roster);\r\n  // }\r\n\r\n  // createRoster(data: RosterData): Observable<Roster> {\r\n  //   // RESETS\r\n  //   this.positions.map((pos) => ({\r\n  //     ...pos,\r\n  //     amount: 0,\r\n  //   }));\r\n\r\n  //   this.squadRules.forEach((rule, i) => {\r\n  //     if (rule.check === '✅') {\r\n  //       this.squadRules[i].check = '❌';\r\n  //     }\r\n  //   });\r\n\r\n  //   let playerCount = 0;\r\n\r\n  //   const tier =\r\n  //     this.playerService.getNationOrTier(data.nationOrTier, 'tier').tier || '';\r\n  //   const numArray: number[] = this.getRatingBreakdown(tier);\r\n\r\n  //   const first = getRandomInt(numArray[0], numArray[1]);\r\n  //   const second = getRandomInt(numArray[2], numArray[3]);\r\n  //   const third = getRandomInt(numArray[4], numArray[5]);\r\n  //   const fourth = getRandomInt(numArray[6], numArray[7]);\r\n  //   const fifth = getRandomInt(numArray[8], numArray[9]);\r\n  //   const sixth = getRandomInt(numArray[10], numArray[11]);\r\n  //   const seventh = getRandomInt(numArray[12], numArray[13]);\r\n  //   const eighth = getRandomInt(numArray[14], numArray[15]);\r\n\r\n  //   // Loops 60 times for 60 players\r\n  //   while (playerCount < 60) {\r\n  //     this.roster.players.push(\r\n  //       this.playerService.createPlayer(data.nationOrTier, [\r\n  //         playerCount,\r\n  //         first,\r\n  //         second,\r\n  //         third,\r\n  //         fourth,\r\n  //         fifth,\r\n  //         sixth,\r\n  //         seventh,\r\n  //         eighth,\r\n  //       ])\r\n  //     );\r\n  //     playerCount++;\r\n  //   }\r\n\r\n  //   window.setTimeout(\r\n  //     () => {\r\n  //       this.roster.players = this.roster.players.sort((a, b) => {\r\n  //         const isAsc = false;\r\n  //         return compare(a.rating, b.rating, isAsc);\r\n  //       });\r\n  //       for (const player of this.players) {\r\n  //         const firstLastName = player.lastNames[0];\r\n\r\n  //         if (\r\n  //           firstLastName === 'da' ||\r\n  //           firstLastName === 'das' ||\r\n  //           firstLastName === 'dos' ||\r\n  //           firstLastName === 'do' ||\r\n  //           firstLastName === 'de' ||\r\n  //           firstLastName === 'bin'\r\n  //         ) {\r\n  //           player.singleLastName = player.lastNames[1];\r\n  //         } else {\r\n  //           player.singleLastName = player.lastNames[0];\r\n  //         }\r\n  //         player.firstInitial = player.firstNames[0].charAt(0);\r\n  //         if (player.firstInitial === \"'\") {\r\n  //           player.firstInitial = player.firstNames[0].charAt(1);\r\n  //         }\r\n  //       }\r\n\r\n  //       this.sortedData = this.players;\r\n  //       console.log(this.players);\r\n  //     },\r\n  //     20000,\r\n  //     this.players\r\n  //   );\r\n  //   return this.roster$;\r\n  // }\r\n\r\n  // getRatingBreakdown(tier: string): number[] {\r\n  //   switch (tier) {\r\n  //     case 's':\r\n  //       return [3, 9, 10, 30, 40, 70, 150, 200, 0, 0, 0, 0, 0, 0, 0, 0];\r\n  //     case 'a':\r\n  //       return [2, 5, 4, 12, 16, 45, 45, 70, 0, 0, 0, 0, 0, 0, 0, 0];\r\n  //     case 'b':\r\n  //       return [0, 4, 2, 5, 4, 15, 15, 60, 45, 100, 0, 0, 0, 0, 0, 0];\r\n  //     case 'c':\r\n  //       return [0, 2, 0, 3, 3, 12, 10, 25, 30, 70, 60, 160, 0, 0, 0, 0];\r\n  //     case 'd':\r\n  //       return [0, 2, 0, 3, 1, 7, 5, 25, 30, 65, 100, 200, 0, 0, 0, 0];\r\n  //     case 'e':\r\n  //       return [0, 1, 0, 3, 0, 6, 6, 18, 12, 40, 38, 75, 10, 10, 0, 0];\r\n  //     case 'f':\r\n  //       return [0, 1, 0, 2, 0, 4, 0, 8, 8, 22, 30, 100, 25, 25, 0, 0];\r\n  //     case 'g':\r\n  //       return [0, 1, 0, 1, 0, 4, 0, 6, 8, 18, 25, 45, 30, 30, 0, 0];\r\n  //     case 'h':\r\n  //       return [0, 0, 0, 1, 0, 2, 0, 5, 2, 10, 12, 35, 25, 115, 25, 25];\r\n  //     case 'i':\r\n  //       return [0, 0, 0, 1, 0, 1, 0, 4, 1, 7, 2, 18, 20, 90, 40, 40];\r\n  //     case 'j':\r\n  //       return [0, 0, 0, 1, 0, 1, 0, 4, 0, 5, 1, 12, 4, 50, 55, 55];\r\n  //     case 'k':\r\n  //       return [0, 0, 0, 0, 0, 1, 0, 1, 0, 2, 0, 4, 5, 25, 60, 60];\r\n  //     case 'l':\r\n  //       return [0, 0, 0, 0, 0, 1, 0, 1, 0, 2, 0, 3, 0, 10, 60, 60];\r\n  //     default:\r\n  //       throw new Error('getRatingBreakdown() had an error');\r\n  //   }\r\n  // }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "playerService",
                        "type": "CreatePlayerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "playerService",
                        "type": "CreatePlayerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "CustomStarRatingService",
            "id": "injectable-CustomStarRatingService-2b924d4dd4ee999003feefa4d36d5225fa9631ac07782d67ec6cb2afcc720a71b25c511cb5a9c01ee1c7c4497e6662f459afbd73af7f58214d93e1e7ebe0fd59",
            "file": "src/app/career/custom-star-rating.service.ts",
            "properties": [],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { StarRatingConfigService } from 'angular-star-rating';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class CustomStarRatingService extends StarRatingConfigService {\r\n  constructor() {\r\n    super();\r\n    this.staticColor = 'ok';\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 7
            },
            "extends": [
                "StarRatingConfigService"
            ],
            "type": "injectable"
        },
        {
            "name": "FirestoreService",
            "id": "injectable-FirestoreService-add737c16bf7ae93cbab99985499c3a29b762d8e8da130f8c3436f1f36324518517e722d00dd6ab6e778e4fa50990e64f474c27d570f67d6c0e7bb6d18b485b5",
            "file": "src/app/core/services/firestore.service.ts",
            "properties": [
                {
                    "name": "db",
                    "defaultValue": "inject(Firestore)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "nations",
                    "defaultValue": "nationsJson",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "nationsList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Nation[]",
                    "optional": false,
                    "description": "",
                    "line": 31
                }
            ],
            "methods": [
                {
                    "name": "getFirstNames",
                    "args": [
                        {
                            "name": "nation",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "literal type",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "nation",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFullName",
                    "args": [
                        {
                            "name": "nationality",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "[]",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "nationality",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getLastNames",
                    "args": [
                        {
                            "name": "nation",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "ethnicity",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "literal type",
                    "typeParameters": [],
                    "line": 158,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "nation",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "ethnicity",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getRoster",
                    "args": [
                        {
                            "name": "uid",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "rosterId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "DocumentReference<DocumentData, DocumentData>",
                    "typeParameters": [],
                    "line": 339,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "uid",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "rosterId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getRosterId",
                    "args": [
                        {
                            "name": "uid",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "CollectionReference<DocumentData, DocumentData>",
                    "typeParameters": [],
                    "line": 335,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "uid",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSubmittedRosters",
                    "args": [],
                    "optional": false,
                    "returnType": "Query<DocumentData, DocumentData>",
                    "typeParameters": [],
                    "line": 329,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "nameRequest",
                    "args": [
                        {
                            "name": "totalNames",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "nameCollection",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "ethnicity",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "operator",
                            "type": "WhereFilterOp",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'>='"
                        }
                    ],
                    "optional": false,
                    "returnType": "literal type",
                    "typeParameters": [],
                    "line": 238,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "totalNames",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "nameCollection",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "ethnicity",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "operator",
                            "type": "WhereFilterOp",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'>='",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "newRequest",
                    "args": [
                        {
                            "name": "totalNames",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "collectionPath",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "ethnicity",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "randomIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "randomQuery",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "operator",
                            "type": "WhereFilterOp",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Query<DocumentData, DocumentData>",
                    "typeParameters": [],
                    "line": 307,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "totalNames",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "collectionPath",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "ethnicity",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "randomIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "randomQuery",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "operator",
                            "type": "WhereFilterOp",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveRoster",
                    "args": [
                        {
                            "name": "uid",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "saveName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "benchReserves",
                            "type": "Player[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "starters",
                            "type": "Player[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "nationOrTier",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 255,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "uid",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "saveName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "benchReserves",
                            "type": "Player[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "starters",
                            "type": "Player[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "nationOrTier",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "submitRoster",
                    "args": [
                        {
                            "name": "roster",
                            "type": "Roster",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 276,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "roster",
                            "type": "Roster",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateRoster",
                    "args": [
                        {
                            "name": "uid",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "saveName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "benchReserves",
                            "type": "Player[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "starters",
                            "type": "Player[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "firestoreId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 265,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "uid",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "saveName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "benchReserves",
                            "type": "Player[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "starters",
                            "type": "Player[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "firestoreId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { inject, Injectable } from '@angular/core';\r\nimport { getRandomInt } from '@shared/utils';\r\nimport { Nation } from 'app/models/nation.model';\r\nimport { Player } from '../../models/player.model';\r\nimport { Roster } from '../../models/roster.model';\r\nimport * as nationsJson from '../../../assets/json/nations.json';\r\nimport {\r\n  addDoc,\r\n  collection,\r\n  CollectionReference,\r\n  doc,\r\n  DocumentData,\r\n  DocumentReference,\r\n  Firestore,\r\n  limit,\r\n  orderBy,\r\n  Query,\r\n  query,\r\n  setDoc,\r\n  updateDoc,\r\n  where,\r\n  WhereFilterOp,\r\n} from '@angular/fire/firestore';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class FirestoreService {\r\n  db = inject(Firestore);\r\n  nations = nationsJson;\r\n  nationsList: Nation[];\r\n\r\n  constructor() {\r\n    this.nationsList = [];\r\n    Object.values(this.nations).forEach(t => {\r\n      if (t.nations) {\r\n        this.nationsList.push(...(t.nations as Nation[]));\r\n      }\r\n    });\r\n  }\r\n\r\n  getFullName(nationality: string): (string | number | Query<DocumentData, DocumentData>)[] {\r\n    const firstNameObj = this.getFirstNames(nationality);\r\n    const lastNameObj = this.getLastNames(nationality, firstNameObj.ethnicity);\r\n    return [...Object.values(firstNameObj), ...Object.values(lastNameObj)];\r\n  }\r\n\r\n  getFirstNames(nation: string): {\r\n    nameQuery: Query<DocumentData, DocumentData>;\r\n    ethnicity: string;\r\n    totalNames: number;\r\n  } {\r\n    let randomNum = getRandomInt(1, 100);\r\n    if (randomNum > 25) {\r\n      randomNum = 0;\r\n    } else if (randomNum > 10) {\r\n      randomNum = 1;\r\n    } else if (randomNum > 5) {\r\n      randomNum = 2;\r\n    } else if (randomNum > 2) {\r\n      randomNum = 3;\r\n    } else if (randomNum > 0) {\r\n      randomNum = 4;\r\n    }\r\n\r\n    const usages = (this.nationsList.find(n => n.name === nation)?.firstNameUsages.length || 0 < 1\r\n      ? this.nationsList.find(n => n.name === nation)?.firstNameUsages\r\n      : ['English']) || ['English'];\r\n    // if (nameOrigin.length === 1 || !nameOrigin) {\r\n    //   console.log(nation, nameOrigin);\r\n    // } else {\r\n    //   console.log(nation, nameOrigin);\r\n    // }\r\n\r\n    let ethnicity: string;\r\n    if (usages.length === 1 || randomNum > usages.length - 1) {\r\n      [ethnicity] = usages;\r\n    } else if (randomNum <= usages.length - 1) {\r\n      ethnicity = usages[randomNum];\r\n    } else if (usages.includes('Northern African')) {\r\n      ethnicity = usages[1];\r\n    } else {\r\n      console.log('error with getFirstNames', nation, usages, randomNum);\r\n      ethnicity = 'English';\r\n    }\r\n\r\n    switch (ethnicity) {\r\n      case 'French':\r\n      case 'Dutch':\r\n      case 'Arabic':\r\n      case 'Persian':\r\n      case 'Kurdish': {\r\n        // chance for 1-4 given names\r\n        return this.nameRequest(getRandomInt(1, 4), 'firstNames_male', ethnicity);\r\n      }\r\n      case 'Western African': {\r\n        // chance for 1-3 given names\r\n        return this.nameRequest(getRandomInt(1, 3), 'firstNames_male', ethnicity);\r\n      }\r\n      case 'Russian':\r\n      case 'Ukrainian':\r\n      case 'Kazakh': {\r\n        // first name and patronym\r\n        return this.nameRequest(2, 'firstNames_male', ethnicity);\r\n      }\r\n      case 'Belarusian':\r\n      case 'Indian':\r\n      case 'English':\r\n      case 'Irish':\r\n      case 'Scottish':\r\n      case 'Welsh':\r\n      case 'Vietnamese':\r\n      case 'German':\r\n      case 'Polish':\r\n      case 'Danish':\r\n      case 'Norwegian':\r\n      case 'Swedish':\r\n      case 'Finnish':\r\n      case 'Lithuanian':\r\n      case 'Latvian':\r\n      case 'Azerbaijani':\r\n      case 'Eastern African':\r\n      case 'Southern African':\r\n      case 'Hebrew':\r\n      case 'Turkmen':\r\n      case 'Tajik':\r\n      case 'Romanian':\r\n      case 'Filipino':\r\n      case 'Portuguese': {\r\n        // one or two given names\r\n        return this.nameRequest(getRandomInt(1, 2), 'firstNames_male', ethnicity);\r\n      }\r\n      case 'Estonian':\r\n      case 'Turkish':\r\n      case 'Spanish':\r\n      case 'Galician':\r\n      case 'Basque':\r\n      case 'Catalan': {\r\n        // one or two given names where one is more common\r\n        const chance = getRandomInt(1, 10);\r\n        let names = 0;\r\n        if (chance > 8) {\r\n          names = 2;\r\n        } else {\r\n          names = 1;\r\n        }\r\n        return this.nameRequest(names, 'firstNames_male', ethnicity);\r\n      }\r\n\r\n      default: {\r\n        // only first name (Czech, Slovak, Polish, Bosnian, Serbian, Croatian, Montenegrin, Albanian, Slovene, Macedonian (male-ending),\r\n        // Chinese, Japanese, Korean, Icelandic, Faroese, Malay, Italian, Kyrgyz, Georgian, Armenian, Bulgarian, Uzbek (if no patronym), Hungarian, Greek, Thai)\r\n        return this.nameRequest(1, 'firstNames_male', ethnicity);\r\n      }\r\n    }\r\n  }\r\n\r\n  getLastNames(\r\n    nation: string,\r\n    ethnicity: string\r\n  ): {\r\n    nameQuery: Query<DocumentData, DocumentData>;\r\n    ethnicity: string;\r\n    totalNames: number;\r\n  } {\r\n    const nameOrigin = this.nationsList.find(n => n.name === nation)?.lastNameUsages || ['English'];\r\n\r\n    let origin = ethnicity;\r\n\r\n    if (nation === 'Argentina') {\r\n      // 1-2 surname countries\r\n      return this.nameRequest(getRandomInt(1, 2), 'lastNames', origin);\r\n    }\r\n\r\n    if (!nameOrigin.includes(origin)) {\r\n      let randomNum = getRandomInt(1, 100);\r\n      if (randomNum > 25) {\r\n        randomNum = 0;\r\n      } else if (randomNum > 10) {\r\n        randomNum = 1;\r\n      } else if (randomNum > 5) {\r\n        randomNum = 2;\r\n      } else if (randomNum > 2) {\r\n        randomNum = 3;\r\n      } else if (randomNum > 0) {\r\n        randomNum = 4;\r\n      }\r\n\r\n      if (randomNum > nameOrigin.length - 1) {\r\n        [origin] = nameOrigin;\r\n      } else {\r\n        origin = nameOrigin[randomNum];\r\n      }\r\n    }\r\n\r\n    switch (origin) {\r\n      case 'Spanish':\r\n      case 'Basque':\r\n      case 'Galician':\r\n      case 'Catalan':\r\n      case 'Bulgarian':\r\n      case 'Filipino':\r\n      case 'Spanish (Philippines)': {\r\n        // 2 surname countries\r\n        // need to fix bulgarian names to not include feminine surnames\r\n        return this.nameRequest(2, 'lastNames', origin);\r\n      }\r\n      case 'Portuguese': {\r\n        // 1-4 surname countries e.g. Portuguese\r\n        let names = 1;\r\n        const chance = getRandomInt(1, 10);\r\n\r\n        if (chance < 3) {\r\n          names = 1;\r\n        } else if (chance > 8) {\r\n          names = 4;\r\n        } else {\r\n          names = getRandomInt(2, 3);\r\n        }\r\n        return this.nameRequest(names, 'lastNames', origin);\r\n      }\r\n      case 'Icelandic':\r\n      case 'Faroese':\r\n      case 'Malay':\r\n      case 'Kyrgyz':\r\n      case 'Azerbaijani':\r\n      case 'Eastern African': {\r\n        // nordic/scandinavian/malay/kyrgyz/azerbaijani/eastern african patronym\r\n        return this.nameRequest(1, 'firstNames_male', origin);\r\n      }\r\n      default:\r\n        // just one last name (most countries)\r\n        // need more surnames for pacific islanders\r\n        return this.nameRequest(1, 'lastNames', origin);\r\n    }\r\n  }\r\n\r\n  nameRequest(\r\n    totalNames: number,\r\n    nameCollection: string,\r\n    ethnicity: string,\r\n    operator: WhereFilterOp = '>='\r\n  ): {\r\n    nameQuery: Query<DocumentData, DocumentData>;\r\n    ethnicity: string;\r\n    totalNames: number;\r\n  } {\r\n    const randomIndex = getRandomInt(1, 5);\r\n    // changed this to 5,000 from 0, 50,000 in order to fix, need to change back\r\n    const randomQuery = getRandomInt(0, 50000);\r\n    const nameQuery = this.newRequest(totalNames, nameCollection, ethnicity, randomIndex, randomQuery, operator);\r\n    return { nameQuery, ethnicity, totalNames };\r\n  }\r\n\r\n  saveRoster(uid: string, saveName: string, benchReserves: Player[], starters: Player[], nationOrTier: string) {\r\n    const rosterRef = doc(this.db, 'users', uid, 'savedRosters');\r\n    return setDoc(rosterRef, {\r\n      benchReserves,\r\n      starters,\r\n      nationOrTier,\r\n      saveName,\r\n    });\r\n  }\r\n\r\n  updateRoster(uid: string, saveName: string, benchReserves: Player[], starters: Player[], firestoreId: string) {\r\n    const rosterRef = doc(this.db, 'users', uid, 'savedRosters', firestoreId);\r\n    updateDoc(rosterRef, {\r\n      saveName,\r\n      benchReserves,\r\n      starters,\r\n    }).then(() => {\r\n      console.log('Document Updated');\r\n    });\r\n  }\r\n\r\n  submitRoster(roster: Roster) {\r\n    if (roster.id === '') {\r\n      const rostersCollection = collection(this.db, 'submittedRosters');\r\n      addDoc(rostersCollection, {\r\n        user: roster.user,\r\n        roster: roster.players,\r\n        tier: roster.tier,\r\n        nation: roster.nation,\r\n        squadRating: roster.squadRating,\r\n        startersRating: roster.startersRating,\r\n        formation: roster.formation,\r\n      }).then(docRef => {\r\n        console.log('New firestore id', docRef.id);\r\n        return docRef.id;\r\n      });\r\n    } else {\r\n      const rosterRef = doc(this.db, 'submittedRosters', roster.id);\r\n      setDoc(rosterRef, {\r\n        user: roster.user,\r\n        roster: roster.players,\r\n        tier: roster.tier,\r\n        nation: roster.nation,\r\n        squadRating: roster.squadRating,\r\n        startersRating: roster.startersRating,\r\n        formation: roster.formation,\r\n      });\r\n    }\r\n  }\r\n\r\n  // ============ THE BELOW FUNCTIONS NEED TO BE LISTENED TO USING THE onSnapshot() function\r\n\r\n  newRequest(\r\n    totalNames: number,\r\n    collectionPath: string,\r\n    ethnicity: string,\r\n    randomIndex: number,\r\n    randomQuery: number,\r\n    operator: WhereFilterOp\r\n  ): Query<DocumentData, DocumentData> {\r\n    if (!totalNames || !collectionPath || !ethnicity || !randomIndex || !randomQuery || !operator) {\r\n      console.log('error calling new request', totalNames, collectionPath, ethnicity, randomIndex, randomQuery, operator);\r\n    }\r\n    const collectionRef = collection(this.db, collectionPath);\r\n    const nameQuery = query(\r\n      collectionRef,\r\n      where(`randomNum.${randomIndex}`, operator, randomQuery),\r\n      where('usages', 'array-contains-any', [ethnicity]),\r\n      orderBy(`randomNum.${randomIndex}`),\r\n      limit(totalNames)\r\n    );\r\n    return nameQuery;\r\n  }\r\n\r\n  getSubmittedRosters(): Query<DocumentData, DocumentData> {\r\n    const collectionRef = collection(this.db, 'submittedRosters');\r\n    const top50Rosters = query(collectionRef, orderBy('startersRating', 'desc'), limit(50));\r\n    return top50Rosters;\r\n  }\r\n\r\n  getRosterId(uid: string): CollectionReference<DocumentData, DocumentData> {\r\n    return collection(this.db, 'users', uid, 'savedRosters');\r\n  }\r\n\r\n  getRoster(uid: string, rosterId: string): DocumentReference<DocumentData, DocumentData> {\r\n    return doc(this.db, 'users', uid, 'savedRosters', rosterId);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 31
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "LeaderboardService",
            "id": "injectable-LeaderboardService-63cd3faa42bcbc647b83777e0ba1296166a64722c7a220981ecc37abd649267eb72bdc161c2deaa774e937b5d003f2ebc79f68f9a4a0d9b6a579b46e64064384",
            "file": "src/app/pages/leaderboard/leaderboard.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "fetchLocalNames",
                    "args": [],
                    "optional": false,
                    "returnType": "[] | null",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "fetchLocalStorage",
                    "args": [],
                    "optional": false,
                    "returnType": "[] | null",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "fetchPersonalLeaderboards",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "fetchTournamentLeaderboards",
                    "args": [],
                    "optional": false,
                    "returnType": "{ worldLeaderboards: any; personalLeaderboards: any; }",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "fetchWorldLeaderboards",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "saveLocalStorage",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "arr",
                            "type": "(LeaderboardItem | Person)[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "arr",
                            "type": "(LeaderboardItem | Person)[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Person } from 'app/models/player.model';\r\n\r\nexport interface LeaderboardItem {\r\n  time: string;\r\n  tournament: {\r\n    winner: string;\r\n    winnerRank: number;\r\n    worst: string;\r\n    worstRank: number;\r\n    second: string;\r\n    third: string;\r\n  };\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class LeaderboardService {\r\n  constructor() {}\r\n\r\n  fetchLocalStorage(): LeaderboardItem[] | null {\r\n    const item = localStorage.getItem('tournamentSubmitted24Hours');\r\n    return item ? JSON.parse(item) : null;\r\n  }\r\n\r\n  saveLocalStorage(id: string, arr: (LeaderboardItem | Person)[]) {\r\n    const item = JSON.stringify(arr);\r\n    localStorage.setItem(id, item);\r\n  }\r\n\r\n  fetchLocalNames(): Person[] | null {\r\n    const item = localStorage.getItem('names');\r\n    return item ? JSON.parse(item) : null;\r\n  }\r\n\r\n  fetchTournamentLeaderboards() {\r\n    const personalLeaderboards = this.fetchPersonalLeaderboards();\r\n    const worldLeaderboards = this.fetchWorldLeaderboards();\r\n    return {\r\n      worldLeaderboards,\r\n      personalLeaderboards,\r\n    };\r\n  }\r\n\r\n  fetchPersonalLeaderboards() {\r\n    const localItems = this.fetchLocalStorage();\r\n    return localItems?.slice(0, 10) || null;\r\n  }\r\n\r\n  fetchWorldLeaderboards() {\r\n    return null;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 19
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "MobaService",
            "id": "injectable-MobaService-b90a762f45b8daafacf5ff9e231a5233697d26721457cc46e74bdc2b0074679d370e820e8c986bcce0c5bc867ce52d8aba0c5f9dd3060db7676f915efd2d0694",
            "file": "src/app/moba/moba.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getLocalStorage",
                    "args": [
                        {
                            "name": "key",
                            "type": "MobaStorageKey | MobaDraftKey",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "T | string",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "MobaStorageKey | MobaDraftKey",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeLocalStorage",
                    "args": [
                        {
                            "name": "key",
                            "type": "MobaStorageKey | MobaDraftKey",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "MobaStorageKey | MobaDraftKey",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setLocalStorage",
                    "args": [
                        {
                            "name": "key",
                            "type": "MobaStorageKey | MobaDraftKey",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "MobaStorageKey | MobaDraftKey",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\n\r\nexport type MobaStorageKey = 'moba_region' | 'moba_player_options' | 'moba_selected_players';\r\nexport type MobaDraftKey = 'draft_metaData';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class MobaService {\r\n  constructor() {}\r\n\r\n  setLocalStorage<T>(key: MobaStorageKey | MobaDraftKey, value: T) {\r\n    localStorage.setItem(key, JSON.stringify(value));\r\n  }\r\n\r\n  getLocalStorage<T>(key: MobaStorageKey | MobaDraftKey): T | '' {\r\n    const item = localStorage.getItem(key);\r\n    return item ? JSON.parse(item) : '';\r\n  }\r\n\r\n  removeLocalStorage(key: MobaStorageKey | MobaDraftKey) {\r\n    localStorage.removeItem(key);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "SimulationQualifiersService",
            "id": "injectable-SimulationQualifiersService-beee37f92320412be97052121f4799cf2ff2c0088eef14dec0b116800360d6833e33d4583b89d11fec8f7a69638f972d7e43f415686c2f289a572a2e94f961a3",
            "file": "src/app/simulation/simulation-qualifiers.service.ts",
            "properties": [
                {
                    "name": "drawData$",
                    "defaultValue": "new BehaviorSubject([] as GroupTeam[][])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<[][]>",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "extraTeams",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "simulator",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SimulationService",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "tournament",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Tournament | null",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methods": [
                {
                    "name": "autoBracketQualifiers",
                    "args": [
                        {
                            "name": "matches",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "availableNations",
                            "type": "GroupTeam[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "alreadyQualified",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "region",
                            "type": "Region | \"inter\"",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "isFinalQualifier",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "Match[]",
                    "typeParameters": [],
                    "line": 210,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "matches",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "availableNations",
                            "type": "GroupTeam[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "alreadyQualified",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "region",
                            "type": "Region | \"inter\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isFinalQualifier",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "chooseQualifyingTeams",
                    "args": [
                        {
                            "name": "regionsSelected",
                            "type": "Region[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "numberOfTeams",
                            "type": "\"32\" | \"48\"",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "nationsList",
                            "type": "GroupTeam[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "hostNations",
                            "type": "GroupTeam[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "GroupTeam[]",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "regionsSelected",
                            "type": "Region[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "numberOfTeams",
                            "type": "\"32\" | \"48\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "nationsList",
                            "type": "GroupTeam[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "hostNations",
                            "type": "GroupTeam[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "organizeGroups",
                    "args": [
                        {
                            "name": "teams",
                            "type": "GroupTeam[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "teamsInGroup",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "numberOfTeams",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "hostNations",
                            "type": "GroupTeam[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "availableRegions",
                            "type": "Region[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "teams",
                            "type": "GroupTeam[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "teamsInGroup",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "numberOfTeams",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "hostNations",
                            "type": "GroupTeam[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "availableRegions",
                            "type": "Region[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "potDraw",
                    "args": [
                        {
                            "name": "teams",
                            "type": "GroupTeam[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "teamsInGroup",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "hostNations",
                            "type": "GroupTeam[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "availableRegions",
                            "type": "Region[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 496,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "teams",
                            "type": "GroupTeam[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "teamsInGroup",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "hostNations",
                            "type": "GroupTeam[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "availableRegions",
                            "type": "Region[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "regionSpecificQualifiers32",
                    "args": [
                        {
                            "name": "teamsQualified",
                            "type": "GroupTeam[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "teamsByRegion",
                            "type": "TeamsByRegion",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "regions",
                            "type": "Region[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "hostNations",
                            "type": "GroupTeam[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "GroupTeam[]",
                    "typeParameters": [],
                    "line": 361,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "teamsQualified",
                            "type": "GroupTeam[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "teamsByRegion",
                            "type": "TeamsByRegion",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "regions",
                            "type": "Region[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "hostNations",
                            "type": "GroupTeam[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "regionSpecificQualifiers48",
                    "args": [
                        {
                            "name": "teamsQualified",
                            "type": "GroupTeam[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "teamsByRegion",
                            "type": "TeamsByRegion",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "regions",
                            "type": "Region[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "hostNations",
                            "type": "GroupTeam[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "alreadyQualified",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "GroupTeam[]",
                    "typeParameters": [],
                    "line": 244,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "teamsQualified",
                            "type": "GroupTeam[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "teamsByRegion",
                            "type": "TeamsByRegion",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "regions",
                            "type": "Region[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "hostNations",
                            "type": "GroupTeam[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "alreadyQualified",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "tournamentFormat",
                    "args": [
                        {
                            "name": "regions",
                            "type": "Region[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "nationsList",
                            "type": "GroupTeam[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "hostNations",
                            "type": "GroupTeam[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "numberOfTeams",
                            "type": "\"32\" | \"48\"",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "GroupTeam[]",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "regions",
                            "type": "Region[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "nationsList",
                            "type": "GroupTeam[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "hostNations",
                            "type": "GroupTeam[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "numberOfTeams",
                            "type": "\"32\" | \"48\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\r\nimport { getRandomInt, groupByProp } from '@shared/utils';\r\nimport { GroupTeam } from 'app/models/nation.model';\r\nimport { get } from 'lodash-es';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { drawAndSort } from './group-draw.utils';\r\nimport { Match, Region, RegionName, TeamsByRegion, Tournament } from './simulation.model';\r\nimport { SimulationService } from './simulation.service';\r\nimport { extraTimeResult, matchScore, regionQualifierHelper } from './simulation.utils';\r\n\r\n@UntilDestroy()\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class SimulationQualifiersService {\r\n  simulator: SimulationService;\r\n  extraTeams = 0;\r\n  drawData$: BehaviorSubject<GroupTeam[][]> = new BehaviorSubject([] as GroupTeam[][]);\r\n  tournament: Tournament | null = null;\r\n  constructor(simulator: SimulationService) {\r\n    this.simulator = simulator;\r\n\r\n    this.simulator.tournament$.pipe(untilDestroyed(this)).subscribe(t => (this.tournament = t));\r\n  }\r\n\r\n  chooseQualifyingTeams(\r\n    regionsSelected: Region[],\r\n    numberOfTeams: 32 | 48,\r\n    nationsList: GroupTeam[],\r\n    hostNations: GroupTeam[]\r\n  ): GroupTeam[] {\r\n    // resets\r\n    // create a list of the teams from each region and choose random teams from each region\r\n    // to take up all the spots that are alloted at the world cup for each region\r\n    // this should be realistic based on the number of teams in the tournament\r\n    // console.log('TESTS\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nCHOOSE QUALIFYING1', numberOfTeams);\r\n    return this.tournamentFormat(regionsSelected, nationsList, hostNations, numberOfTeams);\r\n  }\r\n\r\n  organizeGroups(teams: GroupTeam[], teamsInGroup: number, numberOfTeams: number, hostNations: GroupTeam[], availableRegions: Region[]) {\r\n    this.potDraw(teams, teamsInGroup, hostNations, availableRegions);\r\n  }\r\n\r\n  tournamentFormat(regions: Region[], nationsList: GroupTeam[], hostNations: GroupTeam[], numberOfTeams: 32 | 48): GroupTeam[] {\r\n    console.log('TESTING BUG', numberOfTeams, typeof numberOfTeams);\r\n    const teamsQualified: GroupTeam[] = [];\r\n    const regionValues = regions.map(r => r.value);\r\n\r\n    const nationsLeft: GroupTeam[] = nationsList.filter(team => regionValues.includes(team.region)).sort((a, b) => b.rating - a.rating);\r\n\r\n    hostNations.forEach((nation, i) => {\r\n      const host = nationsLeft.findIndex(t => t.name === nation.name);\r\n      teamsQualified.push(nationsLeft.splice(host, 1)[0]);\r\n      console.log(teamsQualified[i].name, teamsQualified[i].ranking, 'qualifies as host');\r\n    });\r\n\r\n    const cafHosts = hostNations.filter(h => h.region === RegionName.caf).length;\r\n    const afcHosts = hostNations.filter(h => h.region === RegionName.afc).length;\r\n    const ofcHosts = hostNations.filter(h => h.region === RegionName.ofc).length;\r\n    const uefaHosts = hostNations.filter(h => h.region === RegionName.uefa).length;\r\n    const concacafHosts = hostNations.filter(h => h.region === RegionName.concacaf).length;\r\n    const conmebolHosts = hostNations.filter(h => h.region === RegionName.conmebol).length;\r\n\r\n    const autoQualifying48 = {\r\n      uefa: 12 - uefaHosts,\r\n      conmebol: 6 - conmebolHosts,\r\n      caf: 9 - cafHosts,\r\n      afc: 8 - afcHosts,\r\n      concacaf: ofcHosts === 4 ? 5 : 6 - concacafHosts,\r\n      ofc: 0 - ofcHosts,\r\n    };\r\n\r\n    const autoQualifying32 = {\r\n      uefa: 10,\r\n      conmebol: 4,\r\n      caf: 0,\r\n      afc: 4,\r\n      concacaf: 3,\r\n      ofc: 0,\r\n    };\r\n\r\n    const autoQualifyingSpots = numberOfTeams === 48 ? autoQualifying48 : autoQualifying32;\r\n\r\n    // three options\r\n    // 1. one region that has all the teams\r\n    // x = region.numberOfTeams - 32, top ${32 - x - 1} and host qualify auto, x number of playoffs to determine rest\r\n    if (regions.length === 1) {\r\n      const [region] = regions;\r\n      const playoffMatches = region.numOfTeams - numberOfTeams;\r\n      this.extraTeams = playoffMatches;\r\n      const qualifyingSpots = numberOfTeams - playoffMatches - hostNations.length;\r\n      if (Math.random() > 0.8) {\r\n        const team = nationsLeft.splice(getRandomInt(1, qualifyingSpots), 1)[0];\r\n        nationsLeft.splice(numberOfTeams - playoffMatches, 0, team);\r\n      }\r\n      console.log(\r\n        `qualified automatically for World Cup from ${region.label}`,\r\n        hostNations.length > 1\r\n          ? teamsQualified.slice(0, hostNations.length).map(t => `${t.name} ${t.ranking}`)\r\n          : `${teamsQualified[0].name} ${teamsQualified[0].ranking}`,\r\n        nationsLeft.slice(0, qualifyingSpots).map(a => `${a.name} ${a.ranking}`)\r\n      );\r\n      console.log(\r\n        `didn't qualify automatically from ${region.label}`,\r\n        nationsLeft.slice(qualifyingSpots).map(t => `${t.name}-${t.ranking}`)\r\n      );\r\n      teamsQualified.push(...nationsLeft.slice(0, qualifyingSpots));\r\n\r\n      const qualifiers = this.autoBracketQualifiers(playoffMatches, nationsLeft, qualifyingSpots, region);\r\n\r\n      teamsQualified.push(...qualifiers.map(m => m.winner));\r\n\r\n      return teamsQualified;\r\n    }\r\n    // 2. multiple regions but not all the regions\r\n    else if (regions.length < 5 || (regionValues.includes(RegionName.ofc) && regions.length === 5)) {\r\n      const numOfNationsLeft = nationsLeft.length;\r\n      const ratio = numOfNationsLeft / (numberOfTeams - hostNations.length);\r\n      const teamsByRegion: TeamsByRegion = groupByProp(nationsLeft, 'region');\r\n      // console.log(teamsByRegion, 'Available Nations', numOfNationsLeft, 'Ratio', ratio);\r\n      // ====== Automatic Qualifiers =======\r\n      // assign qualifying spot to each region based on the total number of teams and then dividing by the same ratio\r\n      Object.entries(teamsByRegion).forEach(([region, nations]: [string, GroupTeam[]]) => {\r\n        const nationsInRegion = nations.length;\r\n        // const hosts = hostNations.filter(h => h.region === region).length;\r\n        const qualifyingSpots = Math.floor(nationsInRegion / ratio);\r\n        const extraSpots = Math.round(nationsInRegion % ratio);\r\n        console.log(\r\n          region.toLocaleUpperCase(),\r\n          '\\n',\r\n          '# of nations from region',\r\n          nationsInRegion,\r\n          '\\n',\r\n          'Qualifying spots from this region',\r\n          qualifyingSpots,\r\n          '\\n',\r\n          'Extra spots available for this region',\r\n          extraSpots\r\n        );\r\n        const index = regions.findIndex(r => r.value === region);\r\n        regions[index].qualifiers = {\r\n          auto: qualifyingSpots,\r\n          extra: extraSpots,\r\n        };\r\n        teamsQualified.push(...nations.slice(0, qualifyingSpots));\r\n        console.log(\r\n          `qualified automatically for World Cup from ${region.toLocaleUpperCase()}`,\r\n          nations.slice(0, regions[index].qualifiers.auto).map(a => `${a.name} ${a.ranking}`)\r\n        );\r\n        // console.log(\r\n        //   `didn't qualify automatically from ${region.toLocaleUpperCase()}`,\r\n        //   nations.slice(regions[index].qualifiers.auto).map(t => `${t.name}-${t.ranking}`)\r\n        // );\r\n      });\r\n\r\n      // console.log(\r\n      //   '# automatically qualified spots',\r\n      //   regions.reduce((a, b) => a + b.qualifiers.auto, 0) + 1,\r\n      //   '# of extra spots',\r\n      //   regions.reduce((a, b) => a + b.qualifiers.extra, 0),\r\n      //   teamsQualified\r\n      // );\r\n      // ====== Playoff Qualifiers =======\r\n      let numQualified = teamsQualified.length;\r\n      Object.entries(teamsByRegion).forEach(([region, nations]: [string, GroupTeam[]]) => {\r\n        const index = regions.findIndex(r => r.value === region);\r\n        const extra =\r\n          regions[index].qualifiers.extra + numQualified <= numberOfTeams ? regions[index].qualifiers.extra : numberOfTeams - numQualified;\r\n        const auto = regions[index].qualifiers.auto;\r\n        if (numQualified === numberOfTeams || extra === 0) {\r\n          return;\r\n        }\r\n        const qualifiers = this.autoBracketQualifiers(extra, nations, auto, regions[index]);\r\n        teamsQualified.push(...qualifiers.map(m => m.winner));\r\n        numQualified += extra;\r\n        this.extraTeams += extra;\r\n      });\r\n      return teamsQualified;\r\n    }\r\n    // 3. and the normal version with all the regions available\r\n    else {\r\n      this.extraTeams = 2;\r\n      const teamsByRegion: TeamsByRegion = groupByProp(nationsLeft, 'region');\r\n      // console.log(teamsByRegion, nationsLeft);\r\n\r\n      Object.entries(teamsByRegion).forEach(([region, nations]: [string, GroupTeam[]]) => {\r\n        const qualifyingSpot = get(autoQualifyingSpots, region, 0);\r\n        if (qualifyingSpot === 0) {\r\n          return;\r\n        }\r\n        console.log(\r\n          `qualified automatically for World Cup from ${region.toLocaleUpperCase()}`,\r\n          teamsQualified[0].region === region ? [`${teamsQualified[0].name} ${teamsQualified[0].ranking}`] : '',\r\n          nations.slice(0, qualifyingSpot).map(a => `${a.name} ${a.ranking}`)\r\n        );\r\n        // console.log(\r\n        //   `didn't qualify automatically from ${region.toLocaleUpperCase()}`,\r\n        //   nations.slice(qualifyingSpot).map(t => `${t.name}-${t.ranking}`)\r\n        // );\r\n        teamsQualified.push(...nations.slice(0, qualifyingSpot));\r\n      });\r\n      // console.log('TESTS\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n');\r\n      return numberOfTeams === 48\r\n        ? this.regionSpecificQualifiers48(teamsQualified, teamsByRegion, regions, hostNations, autoQualifyingSpots)\r\n        : this.regionSpecificQualifiers32(teamsQualified, teamsByRegion, regions, hostNations);\r\n    }\r\n  }\r\n\r\n  autoBracketQualifiers(\r\n    matches: number,\r\n    availableNations: GroupTeam[],\r\n    alreadyQualified: number,\r\n    region: Region | 'inter',\r\n    isFinalQualifier = true\r\n  ): Match[] {\r\n    const qualifiers: Match[] = [];\r\n    for (let i = 0; i < matches; i++) {\r\n      const wtIndex = alreadyQualified + (matches * 2 - 1 - i);\r\n      qualifiers.push(matchScore(availableNations[alreadyQualified + i], availableNations[wtIndex], true));\r\n    }\r\n    qualifiers.forEach(match => {\r\n      match.winner.matchHistory.qualifiers.push({ match, opp: match.loser });\r\n      match.loser.matchHistory.qualifiers.push({ match, opp: match.winner });\r\n      console.log(\r\n        `${region === 'inter' ? 'inter-confederation' : region.label + ' qualifier'} playoff where ${match.winner.name} defeated ${\r\n          match.loser.name\r\n        } with a score of ${match.score}${extraTimeResult(match)}`\r\n      );\r\n    });\r\n    if (isFinalQualifier && matches > 0) {\r\n      console.log(\r\n        `qualified from ${region === 'inter' ? 'inter-confederation' : region.label + ' via'} playoff`,\r\n        qualifiers.map(a => `${a.winner.name} ${a.winner.ranking}`)\r\n      );\r\n      console.log(\r\n        `didn't qualify from ${region === 'inter' ? 'inter-confederation' : region.label + ' via'} playoff`,\r\n        qualifiers.map(t => `${t.loser.name} ${t.loser.ranking}`)\r\n      );\r\n    }\r\n    return qualifiers;\r\n  }\r\n\r\n  regionSpecificQualifiers48(\r\n    teamsQualified: GroupTeam[],\r\n    teamsByRegion: TeamsByRegion,\r\n    regions: Region[],\r\n    hostNations: GroupTeam[],\r\n    alreadyQualified: {\r\n      uefa: number;\r\n      caf: number;\r\n      afc: number;\r\n      concacaf: number;\r\n      ofc: number;\r\n      conmebol: number;\r\n    }\r\n  ): GroupTeam[] {\r\n    // ====== Playoff Qualifiers =======\r\n    // ====== Confederation Qualifiers ======\r\n\r\n    const numOfTeams = 48;\r\n    const { uefa, afc, caf, concacaf, conmebol, ofc } = teamsByRegion;\r\n    if (caf && uefa && afc && concacaf && conmebol && ofc) {\r\n      // ====== CAF Qualifiers ======\r\n      // REAL LIFE QUALIFIER FORMAT:\r\n      // 9 groups of 6 teams : round robin matches of 10 total (5 home, 5 away) : top team from each qualifies (9)\r\n      // 4 best runner ups in a 2 round tournament : for 1 spot in inter-confederation play-off (+1)\r\n      const cafQualified = alreadyQualified.caf;\r\n      const { matches: cafMatches, matches2: cafMatches2 } = regionQualifierHelper(regions[1], numOfTeams, hostNations);\r\n      const cafFirstRound = this.autoBracketQualifiers(cafMatches, caf, cafQualified, regions[1], false);\r\n      const cafWinners = cafFirstRound.map(m => m.winner);\r\n      const cafQualifiers = this.autoBracketQualifiers(cafMatches2, cafWinners, 0, regions[1]);\r\n      const cafTeams = cafQualifiers.map(m => m.winner);\r\n\r\n      // ===== UEFA Qualifiers =====\r\n      // REAL LIFE QUALIFIER FORMAT:\r\n      // 1ST ROUND -- All teams compete in 12 groups of 4-5 teams (8-10 matches each team) : winners qualify automatically (12)\r\n      // 2ND ROUND -- 12 runner ups and 4 best nation league teams compete in a 2 round tournament : for 4 spots to qualify (4)\r\n\r\n      const uefaQualified = alreadyQualified.uefa;\r\n      const { matches: uefaMatches, matches2: uefaMatches2 } = regionQualifierHelper(regions[0], numOfTeams, hostNations);\r\n\r\n      const uefaFirstRound = this.autoBracketQualifiers(uefaMatches, uefa, uefaQualified, regions[0], false);\r\n      const uefaWinners = uefaFirstRound.map(m => m.winner);\r\n      const uefaQualifiers = this.autoBracketQualifiers(uefaMatches2, uefaWinners, 0, regions[0]);\r\n\r\n      teamsQualified.push(...uefaQualifiers.map(m => m.winner));\r\n\r\n      // ===== AFC Qualifier =====\r\n      // REAL LIFE QUALIFIER FORMAT:\r\n      // 3RD ROUND -- 18 teams compete in 3 groups of 6 teams (10 matches each team) : top 2 spots of each group qualify automatically (6)\r\n      // 4TH ROUND -- 6 leftover teams compte in 2 groups of 3 teams round robin (2 matches each team) : top spot qualifies (2)\r\n      // 5TH ROUND -- Two 2nd place teams face in a 2 legged playoff tie to make inter-confederation-playoffs (+1)\r\n      const afcQualified = alreadyQualified.afc;\r\n      const { matches: afcMatches } = regionQualifierHelper(regions[2], numOfTeams, hostNations);\r\n      const afcQualifiers = this.autoBracketQualifiers(afcMatches, afc, afcQualified, regions[2], false);\r\n      const afcTeams = afcQualifiers.map(m => m.winner);\r\n\r\n      // ===== OFC Qualifier =====\r\n      // REAL LIFE QUALIFIER FORMAT:\r\n      // 2ND ROUND -- 8 teams compete in 2 groups of 4 teams (3 or 6 matches - TBD) : top 2 spots of each group advance rounds\r\n      // 3RD ROUND -- 4 teams compete in a bracket (2 matches each team) : top spot qualifies (1+1)\r\n      const ofcQualified = alreadyQualified.ofc < -1 ? Math.abs(alreadyQualified.ofc) : 0;\r\n      const ofcTeams: GroupTeam[] = [];\r\n      if (ofcQualified === 0) {\r\n        const { matches: ofcMatches, matches2: ofcMatches2 } = regionQualifierHelper(regions[5], numOfTeams, hostNations);\r\n        const ofcFirstRound = this.autoBracketQualifiers(ofcMatches, ofc, ofcQualified, regions[5], false);\r\n        const ofcWinners = ofcFirstRound.map(m => m.winner);\r\n        const ofcFinalists = this.autoBracketQualifiers(ofcMatches2, ofcWinners, 0, regions[5]);\r\n        if (alreadyQualified.ofc === -1) {\r\n          ofcTeams.push(...ofcFinalists.map(m => m.winner));\r\n        } else {\r\n          teamsQualified.push(...ofcFinalists.map(m => m.winner));\r\n          ofcTeams.push(...ofcFinalists.map(m => m.loser));\r\n        }\r\n      }\r\n\r\n      // ===== CONCACAF Qualifier =====\r\n      // REAL LIFE QUALIFIER FORMAT:\r\n      // 3RD ROUND -- 3 groups of 4 teams compete in a round robin (6 matches each team) : top from each group qualifies and best 2 runner ups go to inter-confederation playoffs (3+2)\r\n      const concacafQualified = alreadyQualified.concacaf;\r\n      // const { matches: concacafMatches } = regionQualifierHelper(regions[3], numOfTeams, hostNations);\r\n      const concacafTeams = concacaf.slice(concacafQualified, concacafQualified + 2);\r\n      // const concacafQualifiers = this.autoBracketQualifiers(concacafMatches, afc, concacafQualified, regions[3]);\r\n      // teamsQualified.push(...concacafQualifiers.map(m => m.winner));\r\n\r\n      // ===== CONMEBOL Qualifier =====\r\n      // REAL LIFE QUALIFIER FORMAT:\r\n      // 1ST ROUND -- All 10 teams compete in a round robin group (18 matches each) : top 6 qualify and 7th goes to inter-confederation playoffs (6+1)\r\n      const conmebolQualified = alreadyQualified.conmebol;\r\n      const conmebolTeam = conmebol[conmebolQualified];\r\n\r\n      // ===== Inter-confederation Qualifiers =====\r\n      const sortedInterTeams = [conmebolTeam, ...concacafTeams, ...ofcTeams, ...afcTeams, ...cafTeams].sort((a, b) => b.rating - a.rating);\r\n      if (ofcQualified < 2) {\r\n        // 0 - 1 OFC HOSTS\r\n        const interFirstRound = this.autoBracketQualifiers(2, sortedInterTeams, 2, 'inter', false);\r\n        const interWinners = interFirstRound.map(m => m.winner);\r\n        // TOP 2 rated teams get a bye to second round\r\n        const interSecondRoundTeams = [...interWinners, ...sortedInterTeams.slice(0, 2)].sort((a, b) => b.rating - a.rating);\r\n        const interSecondRound = this.autoBracketQualifiers(2, interSecondRoundTeams, 0, 'inter');\r\n        teamsQualified.push(...interSecondRound.map(m => m.winner));\r\n      } else if (ofcQualified === 2) {\r\n        // 2 OFC HOSTS\r\n        // 1 TEAM QUALIFIES INTERNATIONALLY\r\n        // TOP rated team gets a bye to third round\r\n        const interFirstRound = this.autoBracketQualifiers(2, sortedInterTeams, 1, 'inter', false);\r\n        const interWinners = interFirstRound.map(m => m.winner);\r\n        const interSecondRound = this.autoBracketQualifiers(1, interWinners, 0, 'inter', false);\r\n        const interThirdRoundTeams = [sortedInterTeams[0], ...interSecondRound.map(m => m.winner)];\r\n        const interThirdRound = this.autoBracketQualifiers(1, interThirdRoundTeams, 0, 'inter', true);\r\n        teamsQualified.push(...interThirdRound.map(m => m.winner));\r\n      }\r\n      // 3-4 OFC HOSTS\r\n      // 0 TEAM QUALIFIES INTERNATIONALLY\r\n    }\r\n\r\n    return teamsQualified;\r\n  }\r\n\r\n  regionSpecificQualifiers32(\r\n    teamsQualified: GroupTeam[],\r\n    teamsByRegion: TeamsByRegion,\r\n    regions: Region[],\r\n    hostNations: GroupTeam[]\r\n  ): GroupTeam[] {\r\n    // ====== Playoff Qualifiers =======\r\n    // ====== Confederation Qualifiers ======\r\n\r\n    const { uefa, afc, caf, concacaf, conmebol, ofc } = teamsByRegion;\r\n    const hostRegions = hostNations.map(h => h.region);\r\n    let hasFirstPlayoff = true;\r\n    let hasSecondPlayoff = true;\r\n    if (caf) {\r\n      // ====== CAF Qualifiers ======\r\n      const multiHosts = hostNations.length > 1 && hostRegions.includes(RegionName.caf);\r\n      const matches = multiHosts ? 4 : 5;\r\n      const alreadyQualified = 0;\r\n      const region = regions[1];\r\n\r\n      const cafQualifiers = this.autoBracketQualifiers(matches, caf, alreadyQualified, region);\r\n\r\n      teamsQualified.push(...cafQualifiers.map(m => m.winner));\r\n\r\n      console.log(\r\n        `qualified from ${cafQualifiers[0].winner.region}`,\r\n        cafQualifiers.map(a => `${a.winner.name} ${a.winner.ranking}`)\r\n      );\r\n      console.log(\r\n        `didn't qualify from ${cafQualifiers[0].loser.region}`,\r\n        caf.slice(matches * 2).map(t => `${t.name} ${t.ranking}`),\r\n        cafQualifiers.map(t => `${t.loser.name}-${t.loser.ranking}`)\r\n      );\r\n    }\r\n    if (uefa) {\r\n      // ===== UEFA Qualifiers =====\r\n      const doubleHosts = hostNations.length === 2 && hostNations.every(n => n.region === RegionName.uefa);\r\n      const matches = doubleHosts ? 4 : 6;\r\n      const matches2 = doubleHosts ? 2 : 3;\r\n      const alreadyQualified = 10;\r\n      const region = regions[0];\r\n\r\n      const uefaFirstRound = this.autoBracketQualifiers(matches, uefa, alreadyQualified, region, false);\r\n      const winners = uefaFirstRound.map(m => m.winner);\r\n      const uefaQualifiers = this.autoBracketQualifiers(matches2, winners, 0, region);\r\n\r\n      teamsQualified.push(...uefaQualifiers.map(m => m.winner));\r\n      // console.log(\r\n      //   `didn't qualify from ${uefaQualifiers[0].loser.region}`,\r\n      //   uefa.slice(22).map(t => `${t.name}-${t.ranking}`),\r\n      //   uefaFirstRound.map(t => `${t.loser.name}-${t.loser.ranking}`),\r\n      //   uefaQualifiers.map(t => `${t.loser.name}-${t.loser.ranking}`)\r\n      // );\r\n    }\r\n    if (afc && conmebol && concacaf) {\r\n      // ===== AFC Qualifier =====\r\n      const matches =\r\n        (hostNations.length === 2 && hostNations.every(n => n.region === RegionName.afc)) ||\r\n        (hostRegions.includes(RegionName.uefa) && hostRegions.includes(RegionName.afc))\r\n          ? 0\r\n          : 1;\r\n      const alreadyQualified = 4;\r\n      const region = regions[2];\r\n      const afcQualifiers: (Match | undefined)[] = this.autoBracketQualifiers(matches, afc, alreadyQualified, region, false);\r\n      const ofcQualifiers: (Match | undefined)[] = [];\r\n      if (ofc) {\r\n        const ofcMatches = hostRegions.includes(RegionName.afc) && hostRegions.includes(RegionName.ofc) ? 0 : 1;\r\n        const ofcQualified = 0;\r\n        const ofcRegion = regions[5];\r\n        ofcQualifiers.push(...this.autoBracketQualifiers(ofcMatches, ofc, ofcQualified, ofcRegion, false));\r\n      }\r\n      // ===== Inter-confederation Qualifiers =====\r\n      if (afcQualifiers[0] === undefined) {\r\n        hasFirstPlayoff = false;\r\n        // console.log(`${conmebol[4].name} automatically qualified from CONMEBOL via bye`);\r\n      } else if (hostNations.length === 2 && hostNations.every(n => n.region === RegionName.conmebol)) {\r\n        hasFirstPlayoff = false;\r\n        // console.log(`${afcQualifiers[0].winner.name} automatically qualified from AFC via bye`);\r\n      } else {\r\n        const playoff1 = matchScore(afcQualifiers[0].winner, conmebol[4], true);\r\n        playoff1.winner.matchHistory.qualifiers.push({\r\n          match: playoff1,\r\n          opp: playoff1.loser,\r\n        });\r\n        playoff1.loser.matchHistory.qualifiers.push({\r\n          match: playoff1,\r\n          opp: playoff1.winner,\r\n        });\r\n        teamsQualified.push(playoff1.winner);\r\n        console.log(\r\n          `playoff between ${afcQualifiers[0].winner.name} and ${conmebol[4].name} resulted in a win for ${playoff1.winner.name}\r\n        with a score of ${playoff1.goalsFor}-${playoff1.goalsAg}${extraTimeResult(playoff1)}`\r\n        );\r\n      }\r\n\r\n      if (\r\n        (hostNations.length === 2 && hostNations.every(n => n.region === RegionName.concacaf)) ||\r\n        (ofcQualifiers[0] === undefined && ofc)\r\n      ) {\r\n        hasSecondPlayoff = false;\r\n      } else if (!ofc || ofcQualifiers[0] === undefined) {\r\n        teamsQualified.push(concacaf[3]);\r\n        console.log(`${concacaf[3].name} automatically qualified from CONCACAF via bye`);\r\n      } else {\r\n        const playoff2 = matchScore(ofcQualifiers[0].winner, concacaf[3], true);\r\n        playoff2.winner.matchHistory.qualifiers.push({\r\n          match: playoff2,\r\n          opp: playoff2.loser,\r\n        });\r\n        playoff2.loser.matchHistory.qualifiers.push({\r\n          match: playoff2,\r\n          opp: playoff2.winner,\r\n        });\r\n        teamsQualified.push(playoff2.winner);\r\n        console.log(\r\n          `playoff between ${concacaf[3].name} and ${ofcQualifiers[0].winner.name} resulted in a win for ${playoff2.winner.name}\r\n        with a score of ${playoff2.goalsFor}-${playoff2.goalsAg}${extraTimeResult(playoff2)}`\r\n        );\r\n      }\r\n    }\r\n    if (hasFirstPlayoff && hasSecondPlayoff) {\r\n      console.log(\r\n        teamsQualified.slice(-1)[0].name,\r\n        'and',\r\n        teamsQualified.slice(-2, -1)[0].name,\r\n        'qualify via inter-confederation play-off'\r\n      );\r\n    } else {\r\n      console.log(teamsQualified.slice(-1)[0].name, 'qualify via inter-confederation play-off');\r\n    }\r\n\r\n    console.log('TESTESTSDFDSFDSFSDFSDFDSFSDF', teamsQualified.length, teamsQualified);\r\n    return teamsQualified;\r\n  }\r\n\r\n  potDraw(teams: GroupTeam[], teamsInGroup: number, hostNations: GroupTeam[], availableRegions: Region[]) {\r\n    console.log('TESTSETSTST', groupByProp(teams, 'region'), teams.length);\r\n    const pots = teamsInGroup;\r\n    const teamsInPot = teams.length / pots;\r\n    const extraTeams = this.extraTeams;\r\n    // ====== remove playoff teams and put them at the back and sort teams by rating\r\n    const playoffTeams = teams.splice(-extraTeams, extraTeams);\r\n    const hosts = teams.splice(0, hostNations.length);\r\n    teams.sort((a, b) => b.rating - a.rating);\r\n    teams.push(...playoffTeams);\r\n    // ======= assign teams to pots ===========\r\n\r\n    const potTeams: GroupTeam[][] = [];\r\n    let index = teamsInPot - hostNations.length;\r\n    for (let i = 0; i < pots; i++) {\r\n      if (i === 0) {\r\n        potTeams.push([...hosts, ...teams.slice(0, index)]);\r\n      } else {\r\n        potTeams.push(teams.slice(index, index + teamsInPot));\r\n        index += teamsInPot;\r\n      }\r\n    }\r\n    console.log(\r\n      'potTeams',\r\n      potTeams.map(g => g.map(t => `${t.name} ${t.region}`))\r\n    );\r\n    const start = Date.now();\r\n\r\n    if (typeof Worker !== 'undefined') {\r\n      // Create a new\r\n      const worker = new Worker(new URL('./simulation.worker', import.meta.url));\r\n      worker.onmessage = ({ data }) => {\r\n        this.simulator.tournament$.next({ groups: data.draw });\r\n\r\n        this.simulator.isLoading$.next(false);\r\n      };\r\n      this.simulator.isLoading$.next(true);\r\n      worker.postMessage({ potTeams, teamsInPot, availableRegions, start, hosts });\r\n    } else {\r\n      console.log('test: worker not working');\r\n\r\n      this.simulator.tournament$.next({\r\n        groups: drawAndSort(\r\n          potTeams,\r\n          hosts.map(h => h.name),\r\n          teamsInPot,\r\n          availableRegions\r\n        ),\r\n      });\r\n    }\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "simulator",
                        "type": "SimulationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "simulator",
                        "type": "SimulationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "SimulationService",
            "id": "injectable-SimulationService-ef9c3c8e6f395a45620f9498676add2954378d37d3a2d208dfd70e249fe71a5629faa673dfaa9b503c23ef0232ab255036e97721dd86e3bd1d9313e5694b59ce",
            "file": "src/app/simulation/simulation.service.ts",
            "properties": [
                {
                    "name": "createPerson",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CreatePlayerService",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "destroyRef",
                    "defaultValue": "inject(DestroyRef)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "hostNations",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GroupTeam[]",
                    "optional": true,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "isLoading$",
                    "defaultValue": "new BehaviorSubject<boolean>(true)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "selectedNation$",
                    "defaultValue": "new BehaviorSubject<GroupTeam | null>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "tournament",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Tournament | null",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "tournament$",
                    "defaultValue": "new BehaviorSubject<Tournament | null>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methods": [
                {
                    "name": "changeSelectedNation",
                    "args": [
                        {
                            "name": "value",
                            "type": "null | GroupTeam",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "null | GroupTeam",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "checkForApp",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getTournamentAwards",
                    "args": [
                        {
                            "name": "bracket",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "groups",
                            "type": "GroupTeam[][]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "availableRegions",
                            "type": "Region[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "",
                    "typeParameters": [],
                    "line": 234,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "bracket",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "groups",
                            "type": "GroupTeam[][]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "availableRegions",
                            "type": "Region[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "simulateBracket",
                    "args": [
                        {
                            "name": "groups",
                            "type": "GroupTeam[][]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "literal type",
                    "typeParameters": [],
                    "line": 142,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "groups",
                            "type": "GroupTeam[][]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "simulateGroups",
                    "args": [
                        {
                            "name": "groupGamesPerOpponent",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "groups",
                            "type": "GroupTeam[][]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "[][]",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "groupGamesPerOpponent",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "groups",
                            "type": "GroupTeam[][]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { DestroyRef, Injectable, inject } from '@angular/core';\r\nimport { compare } from '@shared/utils';\r\nimport { findTeamInTournament, matchScore, roundOf32Helper } from './simulation.utils';\r\nimport { GroupTeam } from 'app/models/nation.model';\r\nimport { KnockoutRound, Region, Tournament } from './simulation.model';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { CreatePlayerService } from '@core/services/create-player.service';\r\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class SimulationService {\r\n  createPerson: CreatePlayerService;\r\n  selectedNation$ = new BehaviorSubject<GroupTeam | null>(null);\r\n  tournament$ = new BehaviorSubject<Tournament | null>(null);\r\n  isLoading$ = new BehaviorSubject<boolean>(true);\r\n  tournament: Tournament | null = null;\r\n  hostNations?: GroupTeam[];\r\n  destroyRef = inject(DestroyRef);\r\n\r\n  constructor(createPerson: CreatePlayerService) {\r\n    this.tournament$.pipe(takeUntilDestroyed(this.destroyRef)).subscribe(t => {\r\n      this.tournament = t;\r\n      this.hostNations = t?.hostNations;\r\n    });\r\n\r\n    this.createPerson = createPerson;\r\n  }\r\n\r\n  checkForApp() {\r\n    // not ideal to type this as any, but no choice until I find a better solution\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    if ((window.navigator as any).standalone === true) {\r\n      console.log('iOS app');\r\n      return true;\r\n    } else if (window.matchMedia('(display-mode: standalone)').matches) {\r\n      console.log('android app');\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  changeSelectedNation(value: null | GroupTeam) {\r\n    if (!this.tournament?.groups || !value) {\r\n      this.selectedNation$.next(value);\r\n      return;\r\n    }\r\n    const updatedNation = findTeamInTournament(this.tournament?.groups, value);\r\n    if (updatedNation) {\r\n      this.selectedNation$.next(updatedNation);\r\n    } else {\r\n      this.selectedNation$.next(value);\r\n    }\r\n  }\r\n\r\n  simulateGroups(groupGamesPerOpponent: number, groups: GroupTeam[][]): GroupTeam[][] {\r\n    const g: GroupTeam[][] = groups || [];\r\n\r\n    for (let i = 0; i < g.length; i++) {\r\n      for (let j = 0; j < g[i].length; j++) {\r\n        // resets\r\n        g[i][j].points = 0;\r\n        g[i][j].gDiff = 0;\r\n        g[i][j].gFor = 0;\r\n        g[i][j].gOpp = 0;\r\n        g[i][j].matchesPlayed = 0;\r\n        g[i][j].matchHistory = {\r\n          qualifiers: g[i][j].matchHistory.qualifiers,\r\n          group: [],\r\n          bracket: [],\r\n        };\r\n        g[i][j].reportCard = {\r\n          grade: null,\r\n          gradeStyle: null,\r\n          gradeSummary: null,\r\n          tournamentFinish: null,\r\n        };\r\n      }\r\n    }\r\n    // go through each group\r\n    // simulate each game and reward that team that many points\r\n    // sort the teams by points\r\n    for (let c = 0; c < groupGamesPerOpponent; c++) {\r\n      let goalsFor = 0;\r\n      let goalsAg = 0;\r\n      for (\r\n        let i = 0;\r\n        i < g.length;\r\n        i++ // for each group\r\n      ) {\r\n        for (let j = 0; j < g[i].length; j++) {\r\n          // for each team\r\n          const team = g[i][j];\r\n          for (let k = j + 1; k < g[i].length; k++) {\r\n            // for each of the other teams play a match\r\n            const otherTeam = g[i][k];\r\n            const match = matchScore(team, otherTeam, false);\r\n            match.winner.matchHistory.group.push({\r\n              match: match,\r\n              opp: match.loser,\r\n            });\r\n            match.loser.matchHistory.group.push({\r\n              match: match,\r\n              opp: match.winner,\r\n            });\r\n            goalsFor = match.goalsFor;\r\n            goalsAg = match.goalsAg;\r\n            if (goalsFor > goalsAg) {\r\n              team.points += 3;\r\n              team.gDiff += goalsFor - goalsAg;\r\n              otherTeam.gDiff += goalsAg - goalsFor;\r\n            } else if (goalsFor < goalsAg) {\r\n              otherTeam.points += 3;\r\n              team.gDiff += goalsFor - goalsAg;\r\n              otherTeam.gDiff += goalsAg - goalsFor;\r\n            } else {\r\n              team.points += 1;\r\n              otherTeam.points += 1;\r\n            }\r\n            team.gFor += goalsFor;\r\n            team.gOpp += goalsAg;\r\n            otherTeam.gFor += goalsAg;\r\n            otherTeam.gOpp += goalsFor;\r\n            team.matchesPlayed++;\r\n            otherTeam.matchesPlayed++;\r\n          }\r\n        }\r\n        g[i].sort((a, b) => b.points - a.points || b.gDiff - a.gDiff || b.gFor - a.gFor || compare(a.name, b.name, true));\r\n      }\r\n    }\r\n    // assign group finishes to teams\r\n    const groupLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L'].slice(0, groups.length);\r\n    for (let i = 0; i < groupLetters.length; i++) {\r\n      for (let j = 0; j < g[i].length; j++) {\r\n        g[i][j].groupFinish = groupLetters[i] + (j + 1).toString();\r\n      }\r\n    }\r\n    return g;\r\n  }\r\n\r\n  simulateBracket(groups: GroupTeam[][]): {\r\n    groupWinners: GroupTeam[];\r\n    bracket: {\r\n      roundOf16: KnockoutRound;\r\n      quarterFinals: KnockoutRound;\r\n      semiFinals: KnockoutRound;\r\n      finals: KnockoutRound;\r\n      roundOf32?: KnockoutRound;\r\n    };\r\n  } {\r\n    const { gWinners, roundOf32 } = roundOf32Helper(groups);\r\n\r\n    // assign numbers to letter values, to improve readability of code\r\n    // CAN BE REMOVED\r\n    const [a, b, c, d, e, f, g, h] = [0, 1, 2, 3, 4, 5, 6, 7, 8];\r\n\r\n    const roundOf16: KnockoutRound = [\r\n      [gWinners[a][0], gWinners[b][1], matchScore(gWinners[a][0], gWinners[b][1], true)],\r\n      [gWinners[c][0], gWinners[d][1], matchScore(gWinners[c][0], gWinners[d][1], true)],\r\n      [gWinners[e][0], gWinners[f][1], matchScore(gWinners[e][0], gWinners[f][1], true)],\r\n      [gWinners[g][0], gWinners[h][1], matchScore(gWinners[g][0], gWinners[h][1], true)],\r\n      [gWinners[d][0], gWinners[c][1], matchScore(gWinners[d][0], gWinners[c][1], true)],\r\n      [gWinners[b][0], gWinners[a][1], matchScore(gWinners[b][0], gWinners[a][1], true)],\r\n      [gWinners[f][0], gWinners[e][1], matchScore(gWinners[f][0], gWinners[e][1], true)],\r\n      [gWinners[h][0], gWinners[g][1], matchScore(gWinners[h][0], gWinners[g][1], true)],\r\n    ];\r\n\r\n    roundOf16.forEach(t => {\r\n      t[2].winner.matchHistory.bracket.push({ match: t[2], opp: t[2].loser });\r\n      t[2].loser.matchHistory.bracket.push({ match: t[2], opp: t[2].winner });\r\n    });\r\n\r\n    const quarterFinals: KnockoutRound = [\r\n      [roundOf16[0][2].winner, roundOf16[1][2].winner, matchScore(roundOf16[0][2].winner, roundOf16[1][2].winner, true)],\r\n      [roundOf16[2][2].winner, roundOf16[3][2].winner, matchScore(roundOf16[2][2].winner, roundOf16[3][2].winner, true)],\r\n      [roundOf16[4][2].winner, roundOf16[5][2].winner, matchScore(roundOf16[4][2].winner, roundOf16[5][2].winner, true)],\r\n      [roundOf16[6][2].winner, roundOf16[7][2].winner, matchScore(roundOf16[6][2].winner, roundOf16[7][2].winner, true)],\r\n    ];\r\n\r\n    quarterFinals.forEach(t => {\r\n      t[2].winner.matchHistory.bracket.push({ match: t[2], opp: t[2].loser });\r\n      t[2].loser.matchHistory.bracket.push({ match: t[2], opp: t[2].winner });\r\n    });\r\n\r\n    const semiFinals: KnockoutRound = [\r\n      [quarterFinals[0][2].winner, quarterFinals[1][2].winner, matchScore(quarterFinals[0][2].winner, quarterFinals[1][2].winner, true)],\r\n      [quarterFinals[2][2].winner, quarterFinals[3][2].winner, matchScore(quarterFinals[2][2].winner, quarterFinals[3][2].winner, true)],\r\n    ];\r\n\r\n    semiFinals.forEach(t => {\r\n      t[2].winner.matchHistory.bracket.push({ match: t[2], opp: t[2].loser });\r\n      t[2].loser.matchHistory.bracket.push({ match: t[2], opp: t[2].winner });\r\n    });\r\n\r\n    const finals: KnockoutRound = [\r\n      [semiFinals[0][2].winner, semiFinals[1][2].winner, matchScore(semiFinals[0][2].winner, semiFinals[1][2].winner, true)],\r\n      [semiFinals[0][2].loser, semiFinals[1][2].loser, matchScore(semiFinals[0][2].loser, semiFinals[1][2].loser, true)],\r\n    ];\r\n    finals.forEach(t => {\r\n      t[2].winner.matchHistory.bracket.push({ match: t[2], opp: t[2].loser });\r\n      t[2].loser.matchHistory.bracket.push({ match: t[2], opp: t[2].winner });\r\n    });\r\n\r\n    // console.log(groups.map(z => z.map(t => [t.name, t.ranking, `Pot${t.pot}`, t.tier, t.region])));\r\n\r\n    // TODO: groupWinners might need to change for 48 team tournament\r\n    const groupWinners = gWinners.flat() as GroupTeam[];\r\n\r\n    if (roundOf32) {\r\n      return {\r\n        groupWinners,\r\n        bracket: {\r\n          roundOf32,\r\n          roundOf16,\r\n          quarterFinals,\r\n          semiFinals,\r\n          finals,\r\n        },\r\n      };\r\n    }\r\n\r\n    return {\r\n      groupWinners,\r\n      bracket: {\r\n        roundOf16,\r\n        quarterFinals,\r\n        semiFinals,\r\n        finals,\r\n      },\r\n    };\r\n  }\r\n\r\n  getTournamentAwards(\r\n    bracket: {\r\n      roundOf32?: KnockoutRound;\r\n      roundOf16: KnockoutRound;\r\n      quarterFinals: KnockoutRound;\r\n      semiFinals: KnockoutRound;\r\n      finals: KnockoutRound;\r\n    },\r\n    groups: GroupTeam[][],\r\n    availableRegions?: Region[]\r\n  ): [GroupTeam, GroupTeam, GroupTeam, GroupTeam, GroupTeam, GroupTeam?, GroupTeam?, GroupTeam?, GroupTeam?, GroupTeam?, GroupTeam?] {\r\n    const first = bracket.finals[0][2].winner;\r\n    const second = bracket.finals[0][2].loser;\r\n    const third = bracket.finals[1][2].winner;\r\n\r\n    const finalists = bracket.finals.flatMap(m => [m[2].winner, m[2].loser]);\r\n\r\n    const overPerformer = finalists.find((t: GroupTeam) => {\r\n      if (t.ranking && availableRegions) {\r\n        return availableRegions.length > 4 ? t.ranking > 12 : t.ranking > 30;\r\n      }\r\n      return 0 > 1;\r\n    })\r\n      ? finalists.reduce((prev, curr) => (prev.rating < curr.rating ? prev : curr))\r\n      : groups.flatMap(group => group.slice(0, 2)).reduce((prev, curr) => (prev.rating < curr.rating ? prev : curr));\r\n    const underPerformer = groups.flatMap(group => group.slice(-2)).reduce((prev, curr) => (prev.rating > curr.rating ? prev : curr));\r\n\r\n    return [first, second, third, underPerformer, overPerformer];\r\n  }\r\n\r\n  // getCoachInfo(nations: GroupTeam[]): Observable<{\r\n  //   nationality: string;\r\n  //   lastNames: string[];\r\n  //   lastNameUsage: string;\r\n  //   firstNames: string[];\r\n  //   firstInitial: string;\r\n  //   firstNameUsage: string;\r\n  //   totalLastNames: number;\r\n  //   totalFirstNames: number;\r\n  // }>[] {\r\n  //   const updatedNations = [];\r\n  //   for (let i = 0; i < nations.length; i++) {\r\n  //     updatedNations.push(this.createPerson.getNames(nations[i].name).pipe(map(n => ({ ...n, nationality: nations[i].name }))));\r\n  //   }\r\n  //   return updatedNations;\r\n  // }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "createPerson",
                        "type": "CreatePlayerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "createPerson",
                        "type": "CreatePlayerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [
        {
            "name": "ClickStopPropagationDirective",
            "id": "directive-ClickStopPropagationDirective-206bd310a273ee3f7c0704d76b819bb07c9fd1e61b0c8e1f411caad0d72e8aec65333ba3ebd4f3d56f572cc2f322dcbc0f26e6741384f412badb7c0d1aee3f49",
            "file": "src/app/shared/directives/click-stop-propagation.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, HostListener } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[click-stop-propagation]',\r\n})\r\nexport class ClickStopPropagationDirective {\r\n  @HostListener('click', ['$event'])\r\n  public onClick(event: Event): void {\r\n    event.stopPropagation();\r\n  }\r\n}\r\n",
            "selector": "[click-stop-propagation]",
            "providers": [],
            "hostDirectives": [],
            "standalone": false,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "click",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 8
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'click', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "extends": []
        }
    ],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-b9d5e35d32cbe54a59d5794de142c4c80b267463401e216a412bd43f66670b1cb25b1ed0e72bb057ba3bd653465c41fb8b03ffd073589c06c8ace9f10e993b51",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'team-gen'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss'],\r\n})\r\nexport class AppComponent {\r\n  title = 'team-gen';\r\n\r\n  constructor() {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\r\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJhcHAuY29tcG9uZW50LnNjc3MifQ== */",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9
            },
            "extends": [],
            "templateData": "<app-nav-bar></app-nav-bar>\r\n<router-outlet></router-outlet>\r\n"
        },
        {
            "name": "BuildRosterComponent",
            "id": "component-BuildRosterComponent-d14a5a539d6cc8b2a3e41bd8c8b701f6950f1d20ad9487cfd13be0b61255fbb9681251bbff94f8b93d6106e19727d144b5b5f0dc1539f8b0c0ab2e6aa4f63161",
            "file": "src/app/pages/build-roster/build-roster.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "CreateRosterService",
                    "type": "injectable"
                }
            ],
            "selector": "app-build-roster",
            "styleUrls": [
                "./build-roster.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./build-roster.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "auth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "createRosterService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "nationSelectValue",
                    "defaultValue": "'s tier'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "roster",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Roster",
                    "optional": true,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "rosterId",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User",
                    "optional": true,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "createRoster",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { CreateRosterService } from '@core/services/create-roster.service';\r\nimport { Roster, RosterData } from 'app/models/roster.model';\r\nimport { Observable } from 'rxjs';\r\nimport { Club } from 'app/models/club.model';\r\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\r\nimport { AuthService } from '@core/services/auth.service';\r\nimport { User } from '@core/services/firestore.model';\r\n\r\n@UntilDestroy()\r\n@Component({\r\n  selector: 'app-build-roster',\r\n  templateUrl: './build-roster.component.html',\r\n  styleUrls: ['./build-roster.component.scss'],\r\n  providers: [CreateRosterService],\r\n})\r\nexport class BuildRosterComponent {\r\n  createRosterService;\r\n  auth;\r\n  user?: User;\r\n\r\n  roster?: Roster;\r\n  nationSelectValue = 's tier';\r\n  rosterId = '';\r\n\r\n  constructor(createRosterService: CreateRosterService, auth: AuthService) {\r\n    this.createRosterService = createRosterService;\r\n    this.auth = auth;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.auth.user$.pipe(untilDestroyed(this)).subscribe(user => {\r\n      if (user !== null && user !== undefined) {\r\n        this.user = user;\r\n      }\r\n    });\r\n  }\r\n\r\n  createRoster(): void {\r\n    if (this.nationSelectValue === '') {\r\n      alert('You must select a nation or random nationalities before generating a team');\r\n      // return;\r\n    }\r\n    // *** KEEP THIS COMMENTED FOR DEV BRANCH ***\r\n    // let lastTime: any = localStorage.getItem('Last request time');\r\n    // let currentTime = new Date().getTime();\r\n    // if (lastTime !== null) {\r\n    //   lastTime = parseInt(lastTime);\r\n    // }\r\n    // if (lastTime + 300000 > currentTime) { // if 5 minutes haven't passed since last request\r\n    //   let timeLeft = (lastTime + 300000) - currentTime;\r\n    //   let min = Math.floor(timeLeft / 60000);\r\n    //   let seconds = Math.round((timeLeft % 60000) / 1000)\r\n    //   let str = seconds == 60 ? (min+1) + \":00\" : min + \":\" + (seconds < 10 ? \"0\" : \"\") + seconds;\r\n\r\n    //   alert(`Please wait ${str} to generate a new team.`);\r\n    //   return\r\n    // }\r\n    // *** KEEP THIS COMMENTED FOR DEV BRANCH ***\r\n    // if (this.roster) {\r\n    //   if (window.confirm('Are you sure? Any unsaved data will be deleted.')) {\r\n    //     this.resetStarters(true);\r\n    //   } else {\r\n    //     return;\r\n    //   }\r\n    // }\r\n    // const timestamp = new Date().getTime().toString();\r\n    // localStorage.setItem('Last request time', timestamp);\r\n    // if (this.user) {\r\n    //   const rosterData: RosterData = {\r\n    //     user: this.user,\r\n    //     id: this.rosterId,\r\n    //     nationOrTier: this.nationSelectValue,\r\n    //   };\r\n    //   this.roster = this.createRosterService.createRoster(rosterData);\r\n    // }\r\n  }\r\n\r\n  // async savePlayers(saveLocation: string, saveName?: string) {\r\n  //   if (saveLocation === 'localStorage') {\r\n  //     if (localStorage.length > 1) {\r\n  //       if (\r\n  //         window.confirm(\r\n  //           'Are you sure you want to overwrite your current roster saved in Local Storage?'\r\n  //         )\r\n  //       ) {\r\n  //         const user = localStorage.getItem('user');\r\n  //         const rosters = [];\r\n  //         for (let i = 0; i < 100; i++) {\r\n  //           const roster = localStorage.getItem(`Roster #${i}`) || null;\r\n  //           if (roster === null) {\r\n  //             break;\r\n  //           }\r\n  //           rosters.push(roster);\r\n  //         }\r\n  //         localStorage.clear();\r\n  //         if (user !== null) {\r\n  //           localStorage.setItem('user', user);\r\n  //         }\r\n  //         if (rosters.length > 0) {\r\n  //           for (let i = 0; i < rosters.length; i++) {\r\n  //             localStorage.setItem(`Roster #${i}`, rosters[i]);\r\n  //           }\r\n  //         }\r\n  //       } else {\r\n  //         return false;\r\n  //       }\r\n  //     }\r\n  //     for (let i = 0; i < this.players.length; i++) {\r\n  //       localStorage.setItem(\r\n  //         `TEAMGEN - Player #${i}`,\r\n  //         JSON.stringify(this.players[i])\r\n  //       );\r\n  //     }\r\n  //     for (let i = 0; i < this.pitchPlayers.length; i++) {\r\n  //       localStorage.setItem(\r\n  //         `TEAMGEN - Starting Player #${i + 1}`,\r\n  //         JSON.stringify(this.pitchPlayers[i])\r\n  //       );\r\n  //     }\r\n  //     localStorage.setItem(\r\n  //       `TEAMGEN - Tier/Nationality`,\r\n  //       JSON.stringify(this.nationOrTier)\r\n  //     );\r\n  //     localStorage.setItem(`Firestore ID`, JSON.stringify(this.rosterId));\r\n  //     console.log('Roster ID: ', this.rosterId);\r\n  //   } else if (saveLocation === 'firestore' && saveName !== undefined) {\r\n  //     if (!this.isLoggedIn) {\r\n  //       alert('You must be logged in to save roster to cloud');\r\n  //       return false;\r\n  //     }\r\n  //     if (saveName.length < 4) {\r\n  //       alert('Must be 4-20 characters long.');\r\n  //       return false;\r\n  //     }\r\n  //     const user = JSON.parse(localStorage.getItem('user') || '');\r\n  //     if (this.savedData) {\r\n  //       const data = this.savedData.find((obj) => obj.id === this.rosterId);\r\n  //       console.log(this.rosterId, saveName);\r\n  //       if (data) {\r\n  //         // if it's a duplicate roster\r\n  //         if (data.id === this.rosterId) {\r\n  //           // duplicateId = true;\r\n  //           if (\r\n  //             window.confirm(\r\n  //               `This is already saved, would you like to update the save name and roster`\r\n  //             )\r\n  //           ) {\r\n  //             this.afs.updateRoster(\r\n  //               user.uid,\r\n  //               saveName,\r\n  //               this.players,\r\n  //               this.pitchPlayers,\r\n  //               this.rosterId\r\n  //             );\r\n  //             this.saveDataOverlayOpen = false;\r\n  //           } else {\r\n  //             return false;\r\n  //           }\r\n  //         }\r\n  //         // if it's a duplicate saveName\r\n  //         else if (data.saveName === saveName) {\r\n  //           // ask the user if they want to overwrite\r\n  //           if (\r\n  //             window.confirm(`${saveName} is already a roster name. Overwrite?`)\r\n  //           ) {\r\n  //             this.afs\r\n  //               .saveRoster(\r\n  //                 user.uid,\r\n  //                 saveName,\r\n  //                 this.players,\r\n  //                 this.pitchPlayers,\r\n  //                 this.nationOrTier\r\n  //               )\r\n  //               .then((docRef) => {\r\n  //                 this.rosterId = docRef.id;\r\n  //                 console.log('new roster id:\\n', this.rosterId);\r\n  //               });\r\n  //             this.saveDataOverlayOpen = false;\r\n  //           } else {\r\n  //             return false;\r\n  //           }\r\n  //         }\r\n  //       }\r\n  //     }\r\n  //     if (window.confirm('Are you sure you want to save?')) {\r\n  //       this.afs\r\n  //         .saveRoster(\r\n  //           user.uid,\r\n  //           saveName,\r\n  //           this.players,\r\n  //           this.pitchPlayers,\r\n  //           this.nationOrTier\r\n  //         )\r\n  //         .then((docRef) => {\r\n  //           this.rosterId = docRef.id;\r\n  //           console.log('new roster id:\\n', this.rosterId);\r\n  //         });\r\n  //       this.saveDataOverlayOpen = false;\r\n  //     } else {\r\n  //       return false;\r\n  //     }\r\n  //   }\r\n  //   throw new Error('Problem with savePlayers() function');\r\n  // }\r\n\r\n  // saveDataOverlay() {\r\n  //   this.loadDataOverlayOpen = false;\r\n  //   if (this.saveDataOverlayOpen === false) {\r\n  //     this.saveDataOverlayOpen = true;\r\n  //   } else {\r\n  //     this.saveDataOverlayOpen = false;\r\n  //   }\r\n  //   if (this.savedData.length < 1) {\r\n  //     console.time('label');\r\n  //     this.loadDataOverlay('save');\r\n  //   }\r\n  // }\r\n\r\n  // loadDataOverlay(loadMore?: string) {\r\n  //   if (loadMore !== 'save') {\r\n  //     this.loadDataOverlayOpen = true;\r\n  //     this.saveDataOverlayOpen = false;\r\n  //     if (loadMore !== 'check') {\r\n  //       return false;\r\n  //     }\r\n  //   }\r\n\r\n  //   if (!this.isLoggedIn) {\r\n  //     alert('You must be logged in to access cloud saved data');\r\n  //     return false;\r\n  //   }\r\n  //   const user = JSON.parse(localStorage.getItem('user') || '');\r\n  //   this.afs.getRosterId(user.uid).subscribe((obj: any) => {\r\n  //     console.log('Checking firestore for save data...\\n');\r\n  //     for (const roster of obj) {\r\n  //       const { id } = roster.payload.doc;\r\n  //       const save = roster.payload.doc.data().saveName;\r\n  //       let duplicateId = false;\r\n  //       for (let i = 0; i < this.savedData.length; i++) {\r\n  //         if (this.savedData[i].id === id) {\r\n  //           duplicateId = true;\r\n  //         }\r\n  //       }\r\n  //       if (!duplicateId) {\r\n  //         this.savedData.push({ id, saveName: save });\r\n  //       }\r\n  //     }\r\n  //     console.log(this.savedData);\r\n  //   });\r\n  // }\r\n\r\n  // closeLoadDataOverlay() {\r\n  //   this.loadDataOverlayOpen = false;\r\n  // }\r\n\r\n  // loadPlayers(saveLocation: string) {\r\n  //   this.loadDataOverlayOpen = false;\r\n  //   if (saveLocation === 'loadLocalStorage') {\r\n  //     if (localStorage.length > 1) {\r\n  //       this.players = [];\r\n  //       this.sortedData = [];\r\n  //       this.pitchPlayers = [];\r\n  //       this.nationOrTier =\r\n  //         localStorage.getItem(`TEAMGEN - Tier/Nationality`) || '';\r\n  //       this.nationOrTier = this.nationOrTier.slice(1, -1);\r\n  //       this.rosterId = localStorage.getItem(`Firestore ID`) || '';\r\n  //       this.rosterId = this.rosterId.slice(1, -1);\r\n  //       for (const index in this.positions) {\r\n  //         this.positions[index].amount = 0;\r\n  //       }\r\n  //       for (const box of this.positionBoxes) {\r\n  //         box.playerClass = 'inactive player-box';\r\n  //         box.posBoxClass = 'active pos-box';\r\n  //         box.pitchPlayer = undefined;\r\n  //       }\r\n\r\n  //       for (let i = 0; i < 60; i++) {\r\n  //         const playerString = localStorage.getItem(`TEAMGEN - Player #${i}`);\r\n  //         let player: Player;\r\n  //         if (playerString !== null) {\r\n  //           player = JSON.parse(playerString);\r\n  //           this.players.push(player);\r\n  //           this.sortedData.push(player);\r\n  //         }\r\n  //       }\r\n  //       for (let i = 0; i < 11; i++) {\r\n  //         const playerString = localStorage.getItem(\r\n  //           `TEAMGEN - Starting Player #${i + 1}`\r\n  //         );\r\n  //         let player: Player;\r\n  //         if (playerString !== null) {\r\n  //           player = JSON.parse(playerString);\r\n  //           this.pitchPlayers.push(player);\r\n  //           this.sortedData.unshift(player);\r\n  //         }\r\n  //       }\r\n\r\n  //       this.startersTotalRating = 0;\r\n  //       const ratingArr = [];\r\n  //       for (const player of this.pitchPlayers) {\r\n  //         if (player.pitchRating !== undefined) {\r\n  //           ratingArr.push(player.pitchRating);\r\n  //         }\r\n  //         for (let i = 0; i < this.pitchPositions.length; i++) {\r\n  //           if (player.pitchPositionIndex !== undefined) {\r\n  //             const { boxIndex } =\r\n  //               this.pitchPositions[player.pitchPositionIndex];\r\n  //             for (let j = 0; j < this.positionBoxes.length; j++) {\r\n  //               if (this.positionBoxes[j] === this.positionBoxes[boxIndex]) {\r\n  //                 this.positionBoxes[j].pitchPlayer = player;\r\n  //               }\r\n  //             }\r\n  //           }\r\n  //         }\r\n  //       }\r\n\r\n  //       this.calcStartersRating();\r\n  //       this.squadTotalRating = 0;\r\n  //       for (let i = 0; i < 12; i++) {\r\n  //         ratingArr.push(this.players[i].rating);\r\n  //       }\r\n\r\n  //       this.squadTotalRating = calcSumRating(ratingArr);\r\n\r\n  //       checkStars(this.startersTotalRating, this.squadTotalRating);\r\n\r\n  //       const combinedPlayers = this.pitchPlayers.concat(this.players);\r\n  //       for (const player of combinedPlayers) {\r\n  //         for (const pos of this.positions) {\r\n  //           if (player.mainPositions[0] === pos.position) {\r\n  //             pos.amount++;\r\n  //             break;\r\n  //           }\r\n  //         }\r\n  //       }\r\n\r\n  //       if (this.pitchPlayers.length > 1) {\r\n  //         this.sortedPitchPlayers = this.pitchPlayers.sort((a, b) => {\r\n  //           if (\r\n  //             a.pitchPositionIndex !== undefined &&\r\n  //             b.pitchPositionIndex !== undefined\r\n  //           ) {\r\n  //             if (a.pitchPositionIndex < b.pitchPositionIndex) {\r\n  //               return -1;\r\n  //             }\r\n  //             if (a.pitchPositionIndex > b.pitchPositionIndex) {\r\n  //               return 1;\r\n  //             }\r\n  //           }\r\n  //           return 0;\r\n  //         });\r\n  //       } else if (this.pitchPlayers.length > 0) {\r\n  //         this.sortedPitchPlayers = this.pitchPlayers;\r\n  //       }\r\n\r\n  //       for (const rule of this.squadRules) {\r\n  //         if (rule.check === '✅') {\r\n  //           rule.check = '❌';\r\n  //         }\r\n  //         this.squadRules[8].text = '';\r\n  //       }\r\n  //       if (this.pitchPlayers.length === 11) {\r\n  //         this.getBackupPositions();\r\n  //       } else {\r\n  //         this.squadRules[7].check = '❌';\r\n  //       }\r\n  //       console.log('Successfully loaded', this.players, this.pitchPlayers);\r\n  //     } else {\r\n  //       throw new Error('Local Storage Data not found');\r\n  //     }\r\n  //   } else {\r\n  //     const user = JSON.parse(localStorage.getItem('user') || '');\r\n  //     for (const box of this.positionBoxes) {\r\n  //       box.playerClass = 'inactive player-box';\r\n  //       box.posBoxClass = 'active pos-box';\r\n  //       box.pitchPlayer = undefined;\r\n  //     }\r\n  //     for (const index in this.positions) {\r\n  //       this.positions[index].amount = 0;\r\n  //     }\r\n  //     this.players = [];\r\n  //     this.sortedData = [];\r\n  //     this.pitchPlayers = [];\r\n  //     this.afs.getRoster(user.uid, saveLocation).subscribe((obj: any) => {\r\n  //       const data = obj.payload.data();\r\n  //       if (data !== undefined) {\r\n  //         this.players = data.benchReserves;\r\n  //         this.sortedData = data.starters.concat(data.benchReserves);\r\n  //         this.pitchPlayers = data.starters;\r\n  //         this.nationOrTier = data.nationOrTier;\r\n  //         this.rosterId = obj.payload.id;\r\n  //         console.log('Firestore ID', this.rosterId);\r\n  //       } else {\r\n  //         console.log('Problem loading data from firestore');\r\n  //       }\r\n\r\n  //       this.startersTotalRating = 0;\r\n  //       const ratingArr = [];\r\n  //       for (const player of this.pitchPlayers) {\r\n  //         if (player.pitchRating !== undefined) {\r\n  //           ratingArr.push(player.pitchRating);\r\n  //         }\r\n  //         for (let i = 0; i < this.pitchPositions.length; i++) {\r\n  //           if (player.pitchPositionIndex !== undefined) {\r\n  //             const { boxIndex } =\r\n  //               this.pitchPositions[player.pitchPositionIndex];\r\n  //             for (let j = 0; j < this.positionBoxes.length; j++) {\r\n  //               if (this.positionBoxes[j] === this.positionBoxes[boxIndex]) {\r\n  //                 this.positionBoxes[j].pitchPlayer = player;\r\n  //               }\r\n  //             }\r\n  //           }\r\n  //         }\r\n  //       }\r\n\r\n  //       this.calcStartersRating();\r\n\r\n  //       this.squadTotalRating = 0;\r\n  //       for (let i = 0; i < 12; i++) {\r\n  //         ratingArr.push(this.players[i].rating);\r\n  //       }\r\n\r\n  //       this.squadTotalRating = calcSumRating(ratingArr);\r\n\r\n  //       checkStars(this.startersTotalRating, this.squadTotalRating);\r\n\r\n  //       const combinedPlayers = this.pitchPlayers.concat(this.players);\r\n\r\n  //       combinedPlayers.forEach((player) => {\r\n  //         const position = this.positions.find(\r\n  //           (pos) => player.mainPositions[0] === pos.position\r\n  //         );\r\n  //         if (position) {\r\n  //           position.amount++;\r\n  //         }\r\n  //       });\r\n\r\n  //       if (this.pitchPlayers.length > 1) {\r\n  //         this.sortedPitchPlayers = this.pitchPlayers.sort((a, b) => {\r\n  //           if (\r\n  //             a.pitchPositionIndex !== undefined &&\r\n  //             b.pitchPositionIndex !== undefined\r\n  //           ) {\r\n  //             if (a.pitchPositionIndex < b.pitchPositionIndex) {\r\n  //               return -1;\r\n  //             }\r\n  //             if (a.pitchPositionIndex > b.pitchPositionIndex) {\r\n  //               return 1;\r\n  //             }\r\n  //           }\r\n  //           return 0;\r\n  //         });\r\n  //       } else if (this.pitchPlayers.length > 0) {\r\n  //         this.sortedPitchPlayers = this.pitchPlayers;\r\n  //       }\r\n  //       this.squadRules.map((rule) => {\r\n  //         if (rule.check === '✅') {\r\n  //           return { ...rule, check: '❌' };\r\n  //         }\r\n  //         return rule;\r\n  //       });\r\n\r\n  //       this.squadRules[8].text = '';\r\n\r\n  //       if (this.pitchPlayers.length === 11) {\r\n  //         this.getBackupPositions();\r\n  //       } else {\r\n  //         this.squadRules[7].check = '❌';\r\n  //       }\r\n  //     });\r\n  //   }\r\n  // }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./build-roster.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "createRosterService",
                        "type": "CreateRosterService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "auth",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "createRosterService",
                        "type": "CreateRosterService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "auth",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<!-- <mat-form-field class=\"team-generator-form\">\r\n  <mat-label>-- Choose a Nation --</mat-label>\r\n  <mat-select\r\n    #nationSelect\r\n    appearance=\"fill\"\r\n    [(value)]=\"nationSelectValue\"\r\n    class=\"select-nations\"\r\n  >\r\n    <mat-optgroup\r\n      *ngFor=\"let tierGroup of this.nations\"\r\n      [label]=\"tierGroup.tier\"\r\n    >\r\n      <mat-option [value]=\"tierGroup.tier\" class=\"nation-option\">\r\n        Random Nationalities\r\n      </mat-option>\r\n      <mat-option\r\n        *ngFor=\"let nation of tierGroup.nations\"\r\n        [value]=\"nation.name\"\r\n        class=\"nation-option\"\r\n      >\r\n        <img [src]=\"nation.logo\" alt=\"\" /> {{ nation.name }}\r\n      </mat-option>\r\n    </mat-optgroup>\r\n  </mat-select>\r\n</mat-form-field>\r\n<div class=\"form-buttons\">\r\n  <button\r\n    mat-raised-button\r\n    color=\"primary\"\r\n    class=\"generate\"\r\n    type=\"button\"\r\n    (click)=\"createRoster()\"\r\n  >\r\n    Generate\r\n  </button>\r\n  <div class=\"load-data-buttons\">\r\n    <button\r\n      mat-raised-button\r\n      color=\"primary\"\r\n      class=\"load-button\"\r\n      type=\"button\"\r\n      (click)=\"loadDataOverlay()\"\r\n      cdkOverlayOrigin\r\n      #trigger=\"cdkOverlayOrigin\"\r\n    >\r\n      Load\r\n    </button>\r\n    <button\r\n      mat-raised-button\r\n      color=\"warn\"\r\n      *ngIf=\"loadDataOverlayOpen\"\r\n      type=\"button\"\r\n      (click)=\"closeLoadDataOverlay()\"\r\n      cdkOverlayOrigin\r\n      #trigger=\"cdkOverlayOrigin\"\r\n    >\r\n      Close Overlay\r\n    </button>\r\n  </div>\r\n</div>\r\n<div class=\"save-buttons\" *ngIf=\"players.length > 0\">\r\n  <button\r\n    class=\"save-button\"\r\n    type=\"button\"\r\n    (click)=\"saveDataOverlay()\"\r\n    mat-raised-button\r\n    color=\"primary\"\r\n    cdkOverlayOrigin\r\n    #trigger=\"cdkOverlayOrigin\"\r\n  >\r\n    Save to Cloud\r\n  </button>\r\n  <button\r\n    class=\"save-button\"\r\n    type=\"button\"\r\n    (click)=\"savePlayers('localStorage')\"\r\n    mat-raised-button\r\n    color=\"primary\"\r\n  >\r\n    Save to Local Storage\r\n  </button>\r\n</div>\r\n<ng-container *ngIf=\"saveDataOverlayOpen\">\r\n  <div class=\"save-data-overlay\">\r\n    <div class=\"exit-container\">\r\n      <button mat-button (click)=\"saveDataOverlay()\">\r\n        <mat-icon>close</mat-icon>\r\n      </button>\r\n    </div>\r\n\r\n    <input\r\n      type=\"text\"\r\n      #saveFile\r\n      placeholder=\"Roster Name\"\r\n      required\r\n      minlength=\"4\"\r\n      maxlength=\"20\"\r\n    />\r\n    <label>* name must be 4-20 characters long</label>\r\n    <button\r\n      mat-raised-button\r\n      type=\"submit\"\r\n      (click)=\"savePlayers('firestore', saveFile.value)\"\r\n      class=\"save-button\"\r\n    >\r\n      Save\r\n    </button>\r\n  </div>\r\n</ng-container>\r\n<ng-template\r\n  cdkConnectedOverlay\r\n  [cdkConnectedOverlayOrigin]=\"trigger\"\r\n  [cdkConnectedOverlayOpen]=\"loadDataOverlayOpen\"\r\n>\r\n  <ul class=\"load-roster-overlay\">\r\n    <li>\r\n      <button type=\"button\" (click)=\"loadPlayers('loadLocalStorage')\">\r\n        Load from local storage\r\n      </button>\r\n    </li>\r\n    <li>\r\n      <button type=\"button\" (click)=\"loadDataOverlay('check')\">\r\n        Check cloud saved data\r\n      </button>\r\n    </li>\r\n    <ul>\r\n      Save Data Ids:\r\n      <li *ngFor=\"let data of savedData\">\r\n        <button type=\"button\" (click)=\"loadPlayers(data.id)\">\r\n          {{ data.id }}\r\n        </button>\r\n      </li>\r\n    </ul>\r\n  </ul>\r\n</ng-template> -->\r\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-86e2311c54fbca7431c12e070d0fd5b0ebe343eec0553a392f182ba0e04a8f86613233d26ee47718fd0e7a65078f580c76a1fcc928ce55de81193d6618025bc4",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhat background color to use\n",
                    "description": "<p>What background color to use</p>\n",
                    "line": 29,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 798,
                            "end": 811,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 799,
                                "end": 807,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 43,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs this the principal call to action on the page?\n",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 23,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHow large should the button be?\n",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 35,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional click handler\n",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 49,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  standalone: true,\n  imports: [CommonModule],\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 51
                    }
                }
            }
        },
        {
            "name": "CareerComponent",
            "id": "component-CareerComponent-92e74f4871c1947eb6b3436700abd158bd982b3d6531af3c655db851c9e89b02831cdd25828b5f53cf62e010c03f2f703f2b41e1ed927923490fa6dba2eb1493",
            "file": "src/app/career/career.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-career",
            "styleUrls": [
                "./career.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./career.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "clubList",
                    "defaultValue": "clubsJson.filter(c => c.leagueDifficulty && c.clubRating && c.marketValue && c.gamesInSeason) as Club[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Club[]",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "currentCareerOverview",
                    "defaultValue": "{\r\n    seasons: '',\r\n    yearsActive: 0,\r\n    totalStats: { ...defaultSeasonStats },\r\n    totalEarnings: 0,\r\n    score: {\r\n      totalScore: 0,\r\n      abilityScore: 0,\r\n      peakClubScore: 0,\r\n      avgLeagueScore: 0,\r\n      availabilityScore: 0,\r\n      goalScore: 0,\r\n    },\r\n    peakAbility: 0,\r\n    peakClubAbility: 0,\r\n    avgLeagueAbility: 0,\r\n    totalPossibleApps: 0,\r\n    clubStats: [],\r\n    nationality: this.currentNationality,\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CareerOverview",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "currentNationality",
                    "defaultValue": "{ name: 'random' }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Partial<Nation> | Nation",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "currentSeason",
                    "defaultValue": "{\r\n    year: '2023/24',\r\n    id: 0,\r\n    stats: { ...defaultSeasonStats },\r\n    leagueDifficulty: 'medium',\r\n    age: 14,\r\n    currentAbility: 65,\r\n    potentialAbility: 200,\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Season",
                    "optional": false,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "currentTransferOptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TransferOption[]",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "finalStats",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CareerOverview[]",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "getAbbrevNumber",
                    "defaultValue": "getAbbrevNumber",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "getAbbrevString",
                    "defaultValue": "getAbbrevString",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "hasNationality",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "isLoanOption",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "leagueList",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "nationList",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Nation[]",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "originalOrder",
                    "defaultValue": "originalOrder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "screenWidth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "seasons",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Season[]",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "starRatingModal",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLDialogElement>",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'starRatingModal'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "tableHeaders",
                    "defaultValue": "tableHeaders",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "methodsClass": [
                {
                    "name": "compareFn",
                    "args": [
                        {
                            "name": "o1",
                            "type": "Partial<Nation>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "o2",
                            "type": "Partial<Nation>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "o1",
                            "type": "Partial<Nation>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "o2",
                            "type": "Partial<Nation>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "consoleLogCareer",
                    "args": [
                        {
                            "name": "career",
                            "type": "CareerOverview",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "career",
                            "type": "CareerOverview",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getScreenSize",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'window:resize', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "getTransferChoices",
                    "args": [
                        {
                            "name": "careerStats",
                            "type": "Season",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "nation",
                            "type": "Nation | Partial<Nation>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "parentClub",
                            "type": "TransferOption | ",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        },
                        {
                            "name": "hasLoanOption",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "TransferOption[]",
                    "typeParameters": [],
                    "line": 158,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "careerStats",
                            "type": "Season",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "nation",
                            "type": "Nation | Partial<Nation>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "parentClub",
                            "type": "TransferOption | ",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "hasLoanOption",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "pickNationality",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "simulateSeason",
                    "args": [
                        {
                            "name": "transferChoice",
                            "type": "TransferOption",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "transferChoice",
                            "type": "TransferOption",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "window:resize",
                    "args": [],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 77
                }
            ],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ElementRef, HostListener, OnInit, ViewChild } from '@angular/core';\r\nimport nationsJson from 'assets/json/nations.json';\r\nimport clubsJson from 'assets/json/clubs.json';\r\nimport { Nation } from 'app/models/nation.model';\r\nimport { Club } from 'app/models/club.model';\r\nimport { newSeasonStr, adjustClubStats } from './career.utils';\r\nimport { getAbbrevNumber, getAbbrevString, originalOrder } from '@shared/utils';\r\nimport { CareerService } from './career.service';\r\nimport { fringeRoles, tableHeaders } from './career.constants';\r\nimport { sample as _sample } from 'lodash-es';\r\nimport { TransferOption } from './club/club.model';\r\nimport { CareerOverview, Season, defaultSeasonStats } from './player/player.model';\r\n\r\n@Component({\r\n  selector: 'app-career',\r\n  templateUrl: './career.component.html',\r\n  styleUrls: ['./career.component.scss'],\r\n})\r\nexport class CareerComponent implements OnInit {\r\n  @ViewChild('starRatingModal') starRatingModal!: ElementRef<HTMLDialogElement>;\r\n  originalOrder = originalOrder;\r\n  getAbbrevString = getAbbrevString;\r\n  getAbbrevNumber = getAbbrevNumber;\r\n  tableHeaders = tableHeaders;\r\n\r\n  screenWidth: number;\r\n  hasNationality = false;\r\n  currentNationality: Partial<Nation> | Nation = { name: 'random' };\r\n  currentTransferOptions: TransferOption[] = [];\r\n  isLoanOption = false;\r\n  nationList: Nation[] = [];\r\n  clubList: Club[] = clubsJson.filter(c => c.leagueDifficulty && c.clubRating && c.marketValue && c.gamesInSeason) as Club[];\r\n  leagueList: string[] = [];\r\n  seasons: Season[] = [];\r\n  finalStats: CareerOverview[] = [];\r\n  currentCareerOverview: CareerOverview = {\r\n    seasons: '',\r\n    yearsActive: 0,\r\n    totalStats: { ...defaultSeasonStats },\r\n    totalEarnings: 0,\r\n    score: {\r\n      totalScore: 0,\r\n      abilityScore: 0,\r\n      peakClubScore: 0,\r\n      avgLeagueScore: 0,\r\n      availabilityScore: 0,\r\n      goalScore: 0,\r\n    },\r\n    peakAbility: 0,\r\n    peakClubAbility: 0,\r\n    avgLeagueAbility: 0,\r\n    totalPossibleApps: 0,\r\n    clubStats: [],\r\n    nationality: this.currentNationality,\r\n  };\r\n\r\n  currentSeason: Season = {\r\n    year: '2023/24',\r\n    id: 0,\r\n    stats: { ...defaultSeasonStats },\r\n    leagueDifficulty: 'medium',\r\n    age: 14,\r\n    currentAbility: 65,\r\n    potentialAbility: 200,\r\n  };\r\n\r\n  constructor(private service: CareerService) {\r\n    this.screenWidth = window.innerWidth;\r\n    this.getScreenSize();\r\n    this.leagueList = [...new Set(this.clubList.map(a => a.league.slice(0, 3)))];\r\n    this.nationList = nationsJson\r\n      .flatMap(tier => tier.nations as Nation[])\r\n      .filter(n => this.leagueList.includes(n.abbreviation)) as Nation[];\r\n  }\r\n\r\n  @HostListener('window:resize', ['$event'])\r\n  getScreenSize() {\r\n    this.screenWidth = window.innerWidth;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    const store = localStorage.getItem('career_overview');\r\n    if (store) {\r\n      this.finalStats = JSON.parse(store).slice(0, 4);\r\n    }\r\n  }\r\n\r\n  compareFn(o1: Partial<Nation>, o2: Partial<Nation>): boolean {\r\n    return o1?.name === o2?.name;\r\n  }\r\n\r\n  consoleLogCareer(career: CareerOverview) {\r\n    console.log(career);\r\n  }\r\n\r\n  pickNationality() {\r\n    if (this.currentNationality.name === 'random') {\r\n      this.currentNationality = _sample(this.nationList) || this.currentNationality;\r\n    }\r\n    this.currentTransferOptions = this.getTransferChoices(this.currentSeason, this.currentNationality);\r\n    this.currentCareerOverview.nationality = this.currentNationality;\r\n    this.hasNationality = true;\r\n  }\r\n\r\n  simulateSeason(transferChoice: TransferOption) {\r\n    if (this.currentSeason.age > 39) {\r\n      return;\r\n    }\r\n    if (fringeRoles.includes(transferChoice.playingTime) && !this.isLoanOption) {\r\n      this.currentTransferOptions = this.getTransferChoices(this.currentSeason, this.currentNationality, transferChoice, true);\r\n      this.isLoanOption = true;\r\n      return;\r\n    }\r\n    this.currentSeason = this.service.simulateSeasonStats(transferChoice, this.currentSeason, this.currentCareerOverview);\r\n    const season: Season = {\r\n      ...this.currentSeason,\r\n      currentClub: transferChoice,\r\n    };\r\n\r\n    // console.log('Age: ', this.currentSeason.age, 'Current Ability: ', this.currentSeason.currentAbility, this.currentSeason);\r\n\r\n    // Take the currentSeason and adjust the club stats for that club, will either add a new club to clubStats array or update an existing club\r\n    this.currentCareerOverview.clubStats = adjustClubStats(this.currentCareerOverview.clubStats, season);\r\n    this.currentCareerOverview.yearsActive++;\r\n    this.currentCareerOverview.totalStats.allComps.appearances.starts += season.stats.allComps.appearances.starts;\r\n    this.currentCareerOverview.totalStats.allComps.goals += season.stats.allComps.goals;\r\n    this.currentCareerOverview.totalStats.allComps.assists += season.stats.allComps.assists;\r\n    this.currentCareerOverview.totalEarnings += (season.currentClub?.wage || 0) * 52;\r\n    this.currentCareerOverview.totalPossibleApps += season.currentClub?.club.gamesInSeason || 0;\r\n\r\n    if (this.currentCareerOverview.peakAbility < season.currentAbility) {\r\n      this.currentCareerOverview.peakAbility = season.currentAbility;\r\n    }\r\n\r\n    if (season.currentClub && this.currentCareerOverview.peakClubAbility < season.currentClub?.club.clubRating) {\r\n      this.currentCareerOverview.peakClubAbility = season.currentClub.club.clubRating;\r\n    }\r\n\r\n    this.seasons.push(season);\r\n\r\n    this.currentSeason = {\r\n      ...this.currentSeason,\r\n      stats: { ...defaultSeasonStats },\r\n      age: this.currentSeason.age + 1,\r\n      id: this.currentSeason.id + 1,\r\n      year: newSeasonStr(season.year),\r\n    };\r\n    console.log('TEST1', this.seasons, this.currentSeason);\r\n\r\n    this.isLoanOption = false;\r\n    this.currentTransferOptions = this.getTransferChoices(\r\n      this.currentSeason,\r\n      this.currentNationality,\r\n      season.currentClub?.parentClub || false\r\n    );\r\n  }\r\n\r\n  getTransferChoices(\r\n    careerStats: Season,\r\n    nation: Nation | Partial<Nation>,\r\n    parentClub: TransferOption | false = false,\r\n    hasLoanOption: boolean = false\r\n  ): TransferOption[] {\r\n    const league = nation.name !== 'random' && nation.abbreviation ? nation.abbreviation : 'random';\r\n    const eligibleClubs = this.service.getEligibleClubs(careerStats, this.clubList, league, parentClub, hasLoanOption);\r\n    if (eligibleClubs.length < 1 && this.currentSeason.id > 1) {\r\n      this.finalStats.unshift(this.service.calcFinalStats(this.seasons, this.currentSeason, this.currentCareerOverview));\r\n      localStorage.setItem('career_overview', JSON.stringify(this.finalStats));\r\n    }\r\n\r\n    return eligibleClubs;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\r\n\r\n",
                    "styleUrl": "./career.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "service",
                        "type": "CareerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 65,
                "jsdoctags": [
                    {
                        "name": "service",
                        "type": "CareerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"form-control w-full items-center\" *ngIf=\"!hasNationality\">\r\n  <div>\r\n    <label class=\"label\">\r\n      <span class=\"label-text\">Pick a Nationailty</span>\r\n    </label>\r\n    <select class=\"select select-bordered max-w-xs\" [(ngModel)]=\"currentNationality\" [compareWith]=\"compareFn\">\r\n      <option selected [ngValue]=\"{ name: 'random' }\">Random Nationality</option>\r\n      <option *ngFor=\"let nation of nationList\" [ngValue]=\"nation\">\r\n        <span>\r\n          <img class=\"h-4 w-6 object-cover\" [src]=\"nation.logo\" [alt]=\"nation.name\" />\r\n          <span>{{ nation.name }}</span>\r\n        </span>\r\n      </option>\r\n    </select>\r\n  </div>\r\n  <button class=\"btn btn-primary m-4\" (click)=\"pickNationality()\">Start Career</button>\r\n</div>\r\n\r\n<div class=\"max-w-screen-xl mx-auto\">\r\n  <h2 class=\"text-2xl mb-4 flex justify-center items-center\" *ngIf=\"currentTransferOptions.length > 0 && currentNationality.name\">\r\n    <span>Season {{ currentSeason.year }} ( Age: {{ currentSeason.age }} )</span>\r\n    <img class=\"h-6 w-8 object-cover mx-2\" [src]=\"currentNationality.logo\" [alt]=\"currentNationality.name\" />\r\n    <span>{{ isLoanOption ? 'LOAN' : '' }}</span>\r\n  </h2>\r\n  <div class=\"my-8 sm:mx-8 px-2 py-4 overflow-x-auto\" *ngIf=\"currentTransferOptions.length > 0 && currentNationality.name\">\r\n    <legend>Click a club to choose them</legend>\r\n    <table class=\"table table-xs xl:table-md table-zebra\">\r\n      <thead class=\"uppercase\">\r\n        <tr>\r\n          <th>club</th>\r\n          <th>{{ screenWidth < 640 ? 'offer' : 'transfer offer' }}</th>\r\n          <th>play time</th>\r\n          <th>{{ screenWidth < 640 ? 'wage' : 'weekly wage' }}</th>\r\n        </tr>\r\n      </thead>\r\n      <tr *ngFor=\"let transfer of currentTransferOptions\" class=\"cursor-pointer hover:bg-base-200\" (click)=\"simulateSeason(transfer)\">\r\n        <td>\r\n          <div class=\"flex items-center space-x-3\">\r\n            <div>\r\n              <div class=\"w-8 h-8 sm:w-16 sm:h-16\">\r\n                <img [src]=\"transfer.club.logo\" [alt]=\"transfer.club.name\" class=\"h-full w-full object-contain rounded\" />\r\n              </div>\r\n            </div>\r\n            <div>\r\n              <div class=\"text-sm sm:text-base\">{{ transfer.club.name }}</div>\r\n              <div class=\"text-xs sm:text-sm opacity-50 uppercase\">{{ transfer.club.league }}</div>\r\n              <app-star-rating [rating]=\"(transfer.club.clubRating / 450) * 5\"></app-star-rating>\r\n            </div>\r\n          </div>\r\n        </td>\r\n        <td>\r\n          <div class=\"flex flex-col\">\r\n            <div *ngIf=\"screenWidth < 640\">{{ getAbbrevNumber(transfer.transferFee) }}</div>\r\n            <div *ngIf=\"screenWidth >= 640\">{{ transfer.transferFee | currency: 'EUR' : 'symbol' : '1.0-0' }}</div>\r\n            <div class=\"text-sm opacity-50 capitalize\">{{ transfer.transferType }}</div>\r\n          </div>\r\n        </td>\r\n        <td class=\"capitalize\">{{ transfer.playingTime }}</td>\r\n        <td>{{ transfer.wage | currency: 'EUR' : 'symbol' : '1.0-0' }}</td>\r\n      </tr>\r\n    </table>\r\n  </div>\r\n  <div>\r\n    <h2 *ngIf=\"finalStats.length && currentTransferOptions.length < 1\" class=\"text-3xl mb-4 text-center\">\r\n      {{ finalStats.length > 1 ? 'Last 5 Careers' : 'Career Overview' }}\r\n    </h2>\r\n  </div>\r\n  <div *ngIf=\"finalStats.length && currentTransferOptions.length < 1\" class=\"flex-1 mx-2 sm:mx-8 overflow-x-auto\">\r\n    <table class=\"table table-zebra table-xs xl:table-md\">\r\n      <thead class=\"uppercase\">\r\n        <th>{{ screenWidth < 640 ? 'age / years' : 'age / years active' }}</th>\r\n        <th>{{ screenWidth < 640 ? 'most apps' : 'most appearances' }}</th>\r\n        <th>{{ screenWidth < 640 ? 'grade' : 'career grade' }}</th>\r\n        <th *ngIf=\"screenWidth < 640\">app/g/a</th>\r\n        <th *ngIf=\"screenWidth >= 640\">app</th>\r\n        <th *ngIf=\"screenWidth >= 640\">goals</th>\r\n        <th *ngIf=\"screenWidth >= 640\">assists</th>\r\n        <th>{{ screenWidth < 640 ? 'rating' : 'avg rating' }}</th>\r\n        <th>{{ screenWidth < 640 ? 'earnings (€)' : 'total earnings (€)' }}</th>\r\n      </thead>\r\n      <tbody>\r\n        <tr *ngFor=\"let career of finalStats\">\r\n          <td>\r\n            <div class=\"flex flex-col\">\r\n              <div>{{ career.seasons }}</div>\r\n              <div class=\"text-xs sm:text-sm opacity-50\">{{ career.yearsActive }}</div>\r\n            </div>\r\n          </td>\r\n          <td class=\"flex items-center\">\r\n            <div class=\"flex items-center space-x-3\">\r\n              <div class=\"avatar\">\r\n                <div class=\"mask mask-square w-8 h-8 sm:w-14 sm:h-14\">\r\n                  <img [src]=\"career.longestServedClub?.logo\" [alt]=\"career.longestServedClub?.name\" />\r\n                </div>\r\n              </div>\r\n              <div>\r\n                <div>{{ career.longestServedClub?.name }}</div>\r\n                <div class=\"text-sm opacity-50 uppercase\">\r\n                  {{ career.longestServedClub?.clubStats?.allComps?.appearances }}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </td>\r\n          <td *ngIf=\"career.score\">\r\n            <div class=\"cursor-pointer\" (click)=\"starRatingModal.showModal(); consoleLogCareer(career)\">\r\n              <app-star-rating [rating]=\"career.score.totalScore\"></app-star-rating>\r\n            </div>\r\n            <dialog #starRatingModal class=\"modal\">\r\n              <div class=\"modal-box\">\r\n                <form method=\"dialog\">\r\n                  <button class=\"btn btn-sm btn-circle btn-ghost absolute right-2 top-2\">✕</button>\r\n                </form>\r\n                <h3 class=\"text-xl\">Star Rating Details</h3>\r\n                <label>Ability</label>\r\n                <p>\r\n                  <app-star-rating [rating]=\"career.score.abilityScore\"></app-star-rating>\r\n                </p>\r\n                <label>Club</label>\r\n                <p>\r\n                  <app-star-rating [rating]=\"career.score.peakClubScore\"></app-star-rating>\r\n                </p>\r\n                <label>League</label>\r\n                <p>\r\n                  <app-star-rating [rating]=\"career.score.avgLeagueScore\"></app-star-rating>\r\n                </p>\r\n                <label>Availability</label>\r\n                <p>\r\n                  <app-star-rating [rating]=\"career.score.availabilityScore\"></app-star-rating>\r\n                </p>\r\n                <label>Scoring</label>\r\n                <p>\r\n                  <app-star-rating [rating]=\"career.score.goalScore\"></app-star-rating>\r\n                </p>\r\n              </div>\r\n              <form method=\"dialog\" class=\"modal-backdrop\">\r\n                <button>close</button>\r\n              </form>\r\n            </dialog>\r\n          </td>\r\n          <td *ngIf=\"screenWidth < 640\">\r\n            {{\r\n              career.totalStats.allComps.appearances.total +\r\n                '/' +\r\n                career.totalStats.allComps.goals +\r\n                '/' +\r\n                career.totalStats.allComps.assists\r\n            }}\r\n          </td>\r\n          <td *ngIf=\"screenWidth >= 640\">\r\n            {{ career.totalStats.allComps.appearances.total }}\r\n          </td>\r\n          <td *ngIf=\"screenWidth >= 640\">\r\n            {{ career.totalStats.allComps.goals }}\r\n          </td>\r\n          <td *ngIf=\"screenWidth >= 640\">\r\n            {{ career.totalStats.allComps.assists }}\r\n          </td>\r\n          <td>\r\n            {{ career.totalStats.allComps.avgRating }}\r\n          </td>\r\n          <td>\r\n            {{ career.totalEarnings | currency: 'EUR' : 'symbol' : '1.0-0' }}\r\n          </td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n  </div>\r\n  <div *ngIf=\"currentTransferOptions.length > 0 && currentNationality.name\" class=\"overflow-x-auto flex-1 m-8\">\r\n    <table class=\"table table-xs xl:table-md table-zebra\">\r\n      <thead class=\"uppercase\">\r\n        <tr>\r\n          <th>Career Stats</th>\r\n        </tr>\r\n        <tr>\r\n          <th *ngIf=\"screenWidth >= 640\">year</th>\r\n          <th>age</th>\r\n          <th>team</th>\r\n          <th>{{ screenWidth < 640 ? 'info' : 'info (transfer)' }}</th>\r\n          <th *ngIf=\"screenWidth < 640\">app/g/a</th>\r\n          <th *ngIf=\"screenWidth >= 640\">app</th>\r\n          <th *ngIf=\"screenWidth >= 640\">goals</th>\r\n          <th *ngIf=\"screenWidth >= 640\">assists</th>\r\n          <th>{{ screenWidth < 640 ? 'rating' : 'avg rating' }}</th>\r\n          <th>{{ screenWidth < 640 ? 'wage' : 'wage (€/week)' }}</th>\r\n          <th>{{ screenWidth < 640 ? 'role' : 'player role' }}</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr *ngFor=\"let season of seasons\">\r\n          <td *ngIf=\"screenWidth >= 640\">{{ season.year }}</td>\r\n          <td>{{ season.age }}</td>\r\n          <td>\r\n            <div class=\"flex flex-row items-center space-x-3\" *ngIf=\"season.currentClub\">\r\n              <div class=\"flex items-center space-x-3\">\r\n                <div *ngIf=\"season.currentClub?.parentClub && screenWidth >= 640\">\r\n                  <div class=\"w-8 h-8 sm:w-14 sm:h-14\">\r\n                    <img\r\n                      [src]=\"season.currentClub.parentClub?.club?.logo\"\r\n                      [alt]=\"season.currentClub.parentClub?.club?.name\"\r\n                      class=\"h-full w-full object-contain rounded\" />\r\n                  </div>\r\n                </div>\r\n                <span *ngIf=\"season.currentClub?.parentClub && screenWidth >= 640\" class=\"text-lg\">/</span>\r\n                <div>\r\n                  <div class=\"w-6 h-6 sm:w-12 sm:h-12\">\r\n                    <img\r\n                      [src]=\"season.currentClub.club.logo\"\r\n                      [alt]=\"season.currentClub.club.name\"\r\n                      class=\"h-full w-full object-contain rounded-full ring-2 ring-accent ring-offset-base-300 ring-offset-2\" />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div>\r\n                <div>\r\n                  <span *ngIf=\"season.currentClub.parentClub && screenWidth >= 640\" class=\"opacity-50\">\r\n                    {{\r\n                      screenWidth < 768\r\n                        ? season.currentClub.parentClub.club.abbreviation?.toLocaleUpperCase() ||\r\n                          getAbbrevString(season.currentClub.club.name).toLocaleUpperCase()\r\n                        : season.currentClub.parentClub.club.name\r\n                    }}\r\n                  </span>\r\n                  <span *ngIf=\"season.currentClub.parentClub && screenWidth >= 640\"> / </span>\r\n                  <span class=\"font-extrabold\">\r\n                    {{\r\n                      (screenWidth < 768 && season.currentClub.parentClub) || screenWidth < 640\r\n                        ? season.currentClub.club.abbreviation?.toLocaleUpperCase() ||\r\n                          getAbbrevString(season.currentClub.club.name).toLocaleUpperCase()\r\n                        : season.currentClub.club.name\r\n                    }}\r\n                  </span>\r\n                </div>\r\n                <div class=\"text-xs uppercase\">\r\n                  <span *ngIf=\"season.currentClub.parentClub && screenWidth >= 640\" class=\"opacity-40\">\r\n                    {{ season.currentClub.parentClub.club.league }}\r\n                  </span>\r\n                  <span *ngIf=\"season.currentClub.parentClub && screenWidth >= 640\"> / </span>\r\n                  <span class=\"opacity-70\">\r\n                    {{ season.currentClub.club.league }}\r\n                  </span>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </td>\r\n          <td *ngIf=\"screenWidth < 640\" class=\"capitalize\">\r\n            {{\r\n              season.currentClub?.transferType === 'transfer' || season.currentClub?.transferType === 'transfer/loan'\r\n                ? getAbbrevNumber(season.currentClub?.transferFee || 0)\r\n                : season.currentClub?.transferType === 'loan'\r\n                  ? 'loan'\r\n                  : ''\r\n            }}\r\n          </td>\r\n          <td *ngIf=\"screenWidth >= 640\" class=\"capitalize\">\r\n            {{\r\n              season.currentClub?.transferType === 'transfer' || season.currentClub?.transferType === 'transfer/loan'\r\n                ? (season.currentClub?.transferFee | currency: 'EUR' : 'symbol' : '1.0-0')\r\n                : season.currentClub?.transferType === 'loan'\r\n                  ? 'loan'\r\n                  : ''\r\n            }}\r\n          </td>\r\n          <td *ngIf=\"screenWidth < 640\">\r\n            {{ season.stats.allComps.appearances.total + '/' + season.stats.allComps.goals + '/' + season.stats.allComps.assists }}\r\n          </td>\r\n          <td *ngIf=\"screenWidth >= 640\">{{ season.stats.allComps.appearances.total }}</td>\r\n          <td *ngIf=\"screenWidth >= 640\">{{ season.stats.allComps.goals }}</td>\r\n          <td *ngIf=\"screenWidth >= 640\">{{ season.stats.allComps.assists }}</td>\r\n          <td>{{ season.stats.allComps.avgRating === 0 ? 'N/A' : season.stats.allComps.avgRating.toFixed(1) }}</td>\r\n          <td>{{ season.currentClub?.wage | currency: 'EUR' : 'symbol' : '1.0-0' }}</td>\r\n          <td class=\"capitalize\">{{ season.currentClub?.playingTime }}</td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "DashboardComponent",
            "id": "component-DashboardComponent-7077bff6e13dd8161f4ed7be9b97388a47336fab1e7cd2368357378f6433077bf40fd804d8f57fbe6f11f6155c907e34848008b6e2584e97cff36a9da657ce03",
            "file": "src/app/shared/components/dashboard/dashboard.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-dashboard",
            "styleUrls": [
                "./dashboard.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./dashboard.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-dashboard',\r\n  templateUrl: './dashboard.component.html',\r\n  styleUrls: ['./dashboard.component.scss']\r\n})\r\nexport class DashboardComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./dashboard.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<nav role=\"tablist\" class=\"tabs tabs-boxed\">\r\n  <a [routerLink]=\"'group-stage'\" [routerLinkActive]=\"['tab-active']\" class=\"tab tab-lg h-20 text-lg\" role=\"tab\">Groups</a>\r\n  <a [routerLink]=\"'bracket'\" [routerLinkActive]=\"['tab-active']\" class=\"tab tab-lg h-20 text-lg\" role=\"tab\">Bracket</a>\r\n  <a [routerLink]=\"'stats-overview'\" [routerLinkActive]=\"['tab-active']\" class=\"tab tab-lg h-20 text-lg\" role=\"tab\">Statistics</a>\r\n</nav>\r\n"
        },
        {
            "name": "DraftComponent",
            "id": "component-DraftComponent-dbca3fb57d03372309644d59e50399d7be70447c5cede2015ae3030b44e5b2fe1b89c24200249722ac6265cb55eb9fcadd4e97e9755ea7fd531521a427cafe43",
            "file": "src/app/moba/draft/draft.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-draft",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./draft.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "aiTimer",
                    "defaultValue": "-1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "availableChampions",
                    "defaultValue": "computed(() => {\n    const redBans = this.redSideBans();\n    const blueBans = this.blueSideBans();\n    const redSideChamps = this.redSideChamps();\n    const blueSideChamps = this.blueSideChamps();\n    const selectedChampionsIds = [...redBans, ...blueBans, ...redSideChamps, ...blueSideChamps].map(c => c.id);\n    return this.champions.filter(c => !selectedChampionsIds.includes(c.id));\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Signal<DraftChampion[]>",
                    "optional": false,
                    "description": "",
                    "line": 108
                },
                {
                    "name": "blueRounds",
                    "defaultValue": "[...blueSideBanRounds, ...blueSidePickRounds]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 63
                },
                {
                    "name": "blueSideBanRounds",
                    "defaultValue": "blueSideBanRounds",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "blueSideBans",
                    "defaultValue": "signal([...emptyDraftBans])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "WritableSignal<Partial[]>",
                    "optional": false,
                    "description": "",
                    "line": 152
                },
                {
                    "name": "blueSideChamps",
                    "defaultValue": "signal([...emptyDraftPicks])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "WritableSignal<Partial[]>",
                    "optional": false,
                    "description": "",
                    "line": 154
                },
                {
                    "name": "blueSideDraftScores",
                    "defaultValue": "signal([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "WritableSignal<number[]>",
                    "optional": false,
                    "description": "",
                    "line": 81
                },
                {
                    "name": "blueSideMasteries",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DraftPlayer[]",
                    "optional": false,
                    "description": "",
                    "line": 83
                },
                {
                    "name": "blueSidePlayers",
                    "defaultValue": "{\n    top: [],\n    jungle: [],\n    mid: [],\n    adc: [],\n    support: [],\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 85
                },
                {
                    "name": "champions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DraftChampion[]",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "currentDraftRound",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "draftForm",
                    "defaultValue": "new FormGroup({\n    patchVersion: new FormControl<PatchName>('MSI 24'),\n    userIsRedSide: new FormControl<boolean>(false),\n    useAiOpponent: new FormControl<boolean>(false),\n    difficulty: new FormControl<'easy' | 'medium' | 'hard'>('medium'),\n    useRandomTeam: new FormControl<boolean>({ value: true, disabled: true }),\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 66
                },
                {
                    "name": "draftPhase",
                    "defaultValue": "'Blue Ban 1'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DraftPhase",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "draftStarted",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "filteredChampions",
                    "defaultValue": "computed(() => {\n    const availableChampions = this.availableChampions();\n    const searchValue = this.searchControlValue();\n    const roleFilterValue = this.roleFilter();\n    const sortBy = this.sortBy();\n    const redBans = this.redSideBans();\n    const blueBans = this.blueSideBans();\n    const redSideChamps = this.redSideChamps();\n    const blueSideChamps = this.blueSideChamps();\n    const selectedChampionIds = [...redBans, ...blueBans, ...redSideChamps, ...blueSideChamps].map(c => c.id);\n    const champions = availableChampions\n      .filter(c => {\n        if (selectedChampionIds.includes(c.id)) {\n          return false;\n        }\n        if (!searchValue && roleFilterValue === 'all') {\n          return true;\n        }\n        if (searchValue && roleFilterValue === 'all') {\n          return c.name.toLowerCase().includes(searchValue.toLowerCase());\n        }\n\n        if (roleFilterValue !== 'all' && !searchValue) {\n          return c.roles.includes(roleFilterValue);\n        }\n\n        if (roleFilterValue !== 'all' && searchValue) {\n          return c.roles.includes(roleFilterValue) && c.name.toLowerCase().includes(searchValue.toLowerCase());\n        }\n      })\n      .sort((a, b) => a.name.localeCompare(b.name))\n      .sort((a, b) => this.getDisplayMetaScore(b) - this.getDisplayMetaScore(a));\n    return this.chooseSortBy(champions, sortBy);\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Signal<DraftChampion[]>",
                    "optional": false,
                    "description": "",
                    "line": 117
                },
                {
                    "name": "getChampPropFromDraftPhase",
                    "defaultValue": "getChampPropFromDraftPhase",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "getRoleFromFilter",
                    "defaultValue": "getRoleFromFilter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "isAiChoosing",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "isBanPhase",
                    "defaultValue": "signal(true)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 75
                },
                {
                    "name": "isBlueSideChoosing",
                    "defaultValue": "signal(true)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 74
                },
                {
                    "name": "isUserChoosing",
                    "defaultValue": "computed(() => {\n    const blueSideChoosing = this.isBlueSideChoosing();\n    return this.userIsRedSide ? !blueSideChoosing : blueSideChoosing;\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 76
                },
                {
                    "name": "notification",
                    "defaultValue": "{\n    isActive: false,\n    message: '',\n    type: 'success',\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "positionFilters",
                    "defaultValue": "positionFilters",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "redRounds",
                    "defaultValue": "[...redSideBanRounds, ...redSidePickRounds]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "redSideBanRounds",
                    "defaultValue": "redSideBanRounds",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "redSideBans",
                    "defaultValue": "signal([...emptyDraftBans])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "WritableSignal<Partial[]>",
                    "optional": false,
                    "description": "",
                    "line": 151
                },
                {
                    "name": "redSideChamps",
                    "defaultValue": "signal([...emptyDraftPicks])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "WritableSignal<Partial[]>",
                    "optional": false,
                    "description": "",
                    "line": 153
                },
                {
                    "name": "redSideDraftScores",
                    "defaultValue": "signal([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "WritableSignal<number[]>",
                    "optional": false,
                    "description": "",
                    "line": 82
                },
                {
                    "name": "redSideMasteries",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DraftPlayer[]",
                    "optional": false,
                    "description": "",
                    "line": 84
                },
                {
                    "name": "redSidePlayers",
                    "defaultValue": "{\n    top: [],\n    jungle: [],\n    mid: [],\n    adc: [],\n    support: [],\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 94
                },
                {
                    "name": "roleFilter",
                    "defaultValue": "signal('all')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "WritableSignal<Role | \"all\">",
                    "optional": false,
                    "description": "",
                    "line": 105
                },
                {
                    "name": "screenWidth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "searchControl",
                    "defaultValue": "new FormControl<string>('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 103
                },
                {
                    "name": "searchControlValue",
                    "defaultValue": "toSignal(this.searchControl.valueChanges)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 104
                },
                {
                    "name": "sortBy",
                    "defaultValue": "signal('mastery')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "WritableSignal<DraftSortHeader>",
                    "optional": false,
                    "description": "",
                    "line": 106
                }
            ],
            "methodsClass": [
                {
                    "name": "callNotification",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "color",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'green'"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 294,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "color",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'green'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "checkAndStartAiTimer",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 635,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "checkPickPhase",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 744,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "chooseAiChampion",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 661,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "chooseChampion",
                    "args": [
                        {
                            "name": "champ",
                            "type": "DraftChampion",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "isAiChoice",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 683,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "champ",
                            "type": "DraftChampion",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isAiChoice",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "chooseSortBy",
                    "args": [
                        {
                            "name": "champs",
                            "type": "DraftChampion[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "sortBy",
                            "type": "DraftSortHeader",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 557,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "champs",
                            "type": "DraftChampion[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "sortBy",
                            "type": "DraftSortHeader",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "displaySynergyAndCounter",
                    "args": [],
                    "optional": false,
                    "returnType": "\"n/a\" | \"roleSpecific\"",
                    "typeParameters": [],
                    "line": 791,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getBadgeClass",
                    "args": [
                        {
                            "name": "dmgType",
                            "type": "DamageType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 209,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "dmgType",
                            "type": "DamageType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getChampionFromId",
                    "args": [
                        {
                            "name": "id",
                            "type": "number | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 311,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCompositionAdvice",
                    "args": [
                        {
                            "name": "isBlueSide",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 781,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isBlueSide",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCounterScore",
                    "args": [
                        {
                            "name": "evaluatedChamp",
                            "type": "DraftChampion",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "playerSide",
                            "type": "\"player\" | \"opponent\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 524,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "evaluatedChamp",
                            "type": "DraftChampion",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "playerSide",
                            "type": "\"player\" | \"opponent\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDisplayMasteryScore",
                    "args": [
                        {
                            "name": "champ",
                            "type": "DraftChampion",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "specificRole",
                            "type": "Role",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "playerSide",
                            "type": "\"player\" | \"opponent\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 376,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "champ",
                            "type": "DraftChampion",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "specificRole",
                            "type": "Role",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "playerSide",
                            "type": "\"player\" | \"opponent\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDisplayMetaScore",
                    "args": [
                        {
                            "name": "champ",
                            "type": "DraftChampion",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "specificRole",
                            "type": "Role",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 369,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "champ",
                            "type": "DraftChampion",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "specificRole",
                            "type": "Role",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getLetterRank",
                    "args": [
                        {
                            "name": "rating",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "LetterRank",
                    "typeParameters": [],
                    "line": 353,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "rating",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMasteryScore",
                    "args": [
                        {
                            "name": "champ",
                            "type": "DraftChampion",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "specificRole",
                            "type": "Role",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "playerSide",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 383,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "champ",
                            "type": "DraftChampion",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "specificRole",
                            "type": "Role",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "playerSide",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMetaScore",
                    "args": [
                        {
                            "type": "DraftChampion",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "specificRole",
                            "type": "Role",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 393,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "type": "DraftChampion",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "specificRole",
                            "type": "Role",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPickScore",
                    "args": [
                        {
                            "name": "champ",
                            "type": "DraftChampion",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 543,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "champ",
                            "type": "DraftChampion",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getScreenSize",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 206,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'window:resize', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "getSynergyScore",
                    "args": [
                        {
                            "name": "evaluatedChamp",
                            "type": "DraftChampion",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "playerSide",
                            "type": "\"player\" | \"opponent\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 450,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "evaluatedChamp",
                            "type": "DraftChampion",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "playerSide",
                            "type": "\"player\" | \"opponent\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTopChampsForEachRole",
                    "args": [
                        {
                            "name": "player",
                            "type": "DraftPlayer",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "isBlueSide",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 618,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "player",
                            "type": "DraftPlayer",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isBlueSide",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTopChampsInMeta",
                    "args": [
                        {
                            "name": "masteries",
                            "type": "TierListRankings",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "role",
                            "type": "Role",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "DraftChampion[]",
                    "typeParameters": [],
                    "line": 607,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "masteries",
                            "type": "TierListRankings",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "role",
                            "type": "Role",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "incrementAiTimer",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 657,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "initiateMasteries",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 237,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isOneRoleAvailable",
                    "args": [
                        {
                            "name": "champ",
                            "type": "DraftChampion",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 582,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "champ",
                            "type": "DraftChampion",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resetDraft",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 259,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "selectRole",
                    "args": [
                        {
                            "name": "role",
                            "type": "Role",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "champ",
                            "type": "Partial<DraftChampion>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "isBlueSide",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 316,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "role",
                            "type": "Role",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "champ",
                            "type": "Partial<DraftChampion>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isBlueSide",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setCounterScore",
                    "args": [
                        {
                            "name": "evaluatedChamp",
                            "type": "DraftChampion",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "playerSide",
                            "type": "\"opponent\" | \"player\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 470,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "evaluatedChamp",
                            "type": "DraftChampion",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "playerSide",
                            "type": "\"opponent\" | \"player\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setSynergyScore",
                    "args": [
                        {
                            "name": "evaluatedChamp",
                            "type": "DraftChampion",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "playerSide",
                            "type": "\"player\" | \"opponent\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 408,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "evaluatedChamp",
                            "type": "DraftChampion",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "playerSide",
                            "type": "\"player\" | \"opponent\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "startDraft",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 221,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "window:resize",
                    "args": [],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 206
                }
            ],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, HostListener, Signal, WritableSignal, computed, signal } from '@angular/core';\nimport * as championsJson from 'assets/json/moba/champions.json';\nimport { Champion, DamageType } from '../champion/champion.model';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport {\n  DraftChampion,\n  emptyDraftBans,\n  emptyDraftPicks,\n  blueSideBanRounds,\n  blueSidePickRounds,\n  redSideBanRounds,\n  redSidePickRounds,\n  LetterRank,\n  defaultOpponentMasteries,\n  defaultPlayerMasteries,\n  DraftPlayer,\n  DraftPhase,\n  TierListRankings,\n  getRoleFromFilter,\n  tierValues,\n  DraftSortHeader,\n  PatchName,\n  TierValue,\n} from './draft.model';\nimport {\n  checkForAvailableRoles,\n  getDraftChampions,\n  getRandomMasteries,\n  getChampMasteries,\n  getChampPropFromDraftPhase,\n  getPatchData,\n} from './draft.utils';\nimport { toSignal } from '@angular/core/rxjs-interop';\nimport { AllRoles, Role, positionFilters } from '../player/player.model';\nimport { shuffle } from 'lodash-es';\nimport { MobaService } from '../moba.service';\nimport { patchMSI24 } from '../patch-lists/msi-24';\nimport { getCompositionAdviceAndGrade } from './draft-grader';\n\n@Component({\n  selector: 'app-draft',\n  templateUrl: './draft.component.html',\n  styleUrl: './draft.component.scss',\n})\nexport class DraftComponent {\n  screenWidth: number;\n  draftStarted = false;\n  draftPhase: DraftPhase = 'Blue Ban 1';\n  currentDraftRound = 1;\n  aiTimer = -1;\n  champions: DraftChampion[] = [];\n  getRoleFromFilter = getRoleFromFilter;\n  getChampPropFromDraftPhase = getChampPropFromDraftPhase;\n  positionFilters = positionFilters;\n  notification = {\n    isActive: false,\n    message: '',\n    type: 'success',\n  };\n  isAiChoosing = false;\n  blueSideBanRounds = blueSideBanRounds;\n  redSideBanRounds = redSideBanRounds;\n  blueRounds = [...blueSideBanRounds, ...blueSidePickRounds];\n  redRounds = [...redSideBanRounds, ...redSidePickRounds];\n\n  draftForm: FormGroup = new FormGroup({\n    patchVersion: new FormControl<PatchName>('MSI 24'),\n    userIsRedSide: new FormControl<boolean>(false),\n    useAiOpponent: new FormControl<boolean>(false),\n    difficulty: new FormControl<'easy' | 'medium' | 'hard'>('medium'),\n    useRandomTeam: new FormControl<boolean>({ value: true, disabled: true }),\n  });\n\n  isBlueSideChoosing = signal(true);\n  isBanPhase = signal(true);\n  isUserChoosing = computed(() => {\n    const blueSideChoosing = this.isBlueSideChoosing();\n    return this.userIsRedSide ? !blueSideChoosing : blueSideChoosing;\n  });\n\n  blueSideDraftScores: WritableSignal<number[]> = signal([]);\n  redSideDraftScores: WritableSignal<number[]> = signal([]);\n  blueSideMasteries: DraftPlayer[] = [];\n  redSideMasteries: DraftPlayer[] = [];\n  blueSidePlayers: {\n    [key: string]: DraftChampion[];\n  } = {\n    top: [],\n    jungle: [],\n    mid: [],\n    adc: [],\n    support: [],\n  };\n  redSidePlayers: {\n    [key: string]: DraftChampion[];\n  } = {\n    top: [],\n    jungle: [],\n    mid: [],\n    adc: [],\n    support: [],\n  };\n  searchControl = new FormControl<string>('');\n  searchControlValue = toSignal(this.searchControl.valueChanges);\n  roleFilter: WritableSignal<Role | 'all'> = signal('all');\n  sortBy: WritableSignal<DraftSortHeader> = signal('mastery');\n\n  availableChampions: Signal<DraftChampion[]> = computed(() => {\n    const redBans = this.redSideBans();\n    const blueBans = this.blueSideBans();\n    const redSideChamps = this.redSideChamps();\n    const blueSideChamps = this.blueSideChamps();\n    const selectedChampionsIds = [...redBans, ...blueBans, ...redSideChamps, ...blueSideChamps].map(c => c.id);\n    return this.champions.filter(c => !selectedChampionsIds.includes(c.id));\n  });\n\n  filteredChampions: Signal<DraftChampion[]> = computed(() => {\n    const availableChampions = this.availableChampions();\n    const searchValue = this.searchControlValue();\n    const roleFilterValue = this.roleFilter();\n    const sortBy = this.sortBy();\n    const redBans = this.redSideBans();\n    const blueBans = this.blueSideBans();\n    const redSideChamps = this.redSideChamps();\n    const blueSideChamps = this.blueSideChamps();\n    const selectedChampionIds = [...redBans, ...blueBans, ...redSideChamps, ...blueSideChamps].map(c => c.id);\n    const champions = availableChampions\n      .filter(c => {\n        if (selectedChampionIds.includes(c.id)) {\n          return false;\n        }\n        if (!searchValue && roleFilterValue === 'all') {\n          return true;\n        }\n        if (searchValue && roleFilterValue === 'all') {\n          return c.name.toLowerCase().includes(searchValue.toLowerCase());\n        }\n\n        if (roleFilterValue !== 'all' && !searchValue) {\n          return c.roles.includes(roleFilterValue);\n        }\n\n        if (roleFilterValue !== 'all' && searchValue) {\n          return c.roles.includes(roleFilterValue) && c.name.toLowerCase().includes(searchValue.toLowerCase());\n        }\n      })\n      .sort((a, b) => a.name.localeCompare(b.name))\n      .sort((a, b) => this.getDisplayMetaScore(b) - this.getDisplayMetaScore(a));\n    return this.chooseSortBy(champions, sortBy);\n  });\n  redSideBans: WritableSignal<Partial<DraftChampion>[]> = signal([...emptyDraftBans]);\n  blueSideBans: WritableSignal<Partial<DraftChampion>[]> = signal([...emptyDraftBans]);\n  redSideChamps: WritableSignal<Partial<DraftChampion>[]> = signal([...emptyDraftPicks]);\n  blueSideChamps: WritableSignal<Partial<DraftChampion>[]> = signal([...emptyDraftPicks]);\n\n  constructor(private service: MobaService) {\n    const draftMetaData = this.service.getLocalStorage<{\n      userIsRedSide: boolean;\n      patchVersion: PatchName;\n      useAiOpponent: boolean;\n      difficulty: string;\n      useRandomTeam: boolean;\n    }>('draft_metaData');\n    if (draftMetaData && draftMetaData.difficulty) {\n      this.draftForm.setValue(draftMetaData);\n    }\n    this.screenWidth = window.innerWidth;\n    this.getScreenSize();\n    this.initiateMasteries();\n  }\n\n  get userIsRedSide(): boolean {\n    return this.draftForm.get('userIsRedSide')?.value;\n  }\n\n  get patchVersion(): PatchName {\n    return this.draftForm.get('patchVersion')?.value;\n  }\n\n  get useAiOpponent(): boolean {\n    return this.draftForm.get('useAiOpponent')?.value;\n  }\n\n  get useRandomTeam(): boolean {\n    return this.draftForm.get('useRandomTeam')?.value;\n  }\n\n  get difficulty(): 'easy' | 'medium' | 'hard' {\n    return this.draftForm.get('difficulty')?.value;\n  }\n\n  get masteriesForSide(): DraftPlayer[] {\n    return this.userIsRedSide ? this.redSideMasteries : this.blueSideMasteries;\n  }\n\n  get selectedRoleFilter(): Role {\n    const role = this.roleFilter();\n    if (role === 'all') {\n      return 'top';\n    } else {\n      return role;\n    }\n  }\n\n  @HostListener('window:resize', ['$event'])\n  getScreenSize() {\n    this.screenWidth = window.innerWidth;\n  }\n  getBadgeClass(dmgType: DamageType): string {\n    if (dmgType.includes('ad')) {\n      return 'badge-error';\n    } else if (dmgType.includes('ap')) {\n      return 'badge-info';\n    } else if (dmgType.includes('mix')) {\n      return 'badge-primary';\n    } else {\n      return 'badge-accent';\n    }\n  }\n\n  startDraft() {\n    this.draftStarted = true;\n    this.service.setLocalStorage('draft_metaData', {\n      userIsRedSide: this.userIsRedSide,\n      useAiOpponent: this.useAiOpponent,\n      difficulty: this.difficulty,\n      patchVersion: this.patchVersion,\n      useRandomTeam: this.useRandomTeam,\n    });\n    this.initiateMasteries();\n    console.log(this.difficulty);\n    console.log('blueSide', this.blueSideMasteries, '\\nredSide', this.redSideMasteries);\n    console.log('blueSide', this.blueSidePlayers, '\\nredSide', this.redSidePlayers);\n    this.checkAndStartAiTimer();\n  }\n\n  initiateMasteries() {\n    const champions = Array.from(championsJson) as Champion[];\n    const patchData = getPatchData(this.patchVersion);\n    const playerMasteries: DraftPlayer[] = this.useRandomTeam ? getRandomMasteries(patchData) : [...defaultPlayerMasteries];\n    const opponentMasteries: DraftPlayer[] = this.useRandomTeam\n      ? getRandomMasteries(patchData, this.difficulty)\n      : [...defaultOpponentMasteries];\n\n    this.champions = getDraftChampions(champions, patchData, playerMasteries, opponentMasteries);\n\n    this.blueSideMasteries = this.userIsRedSide ? opponentMasteries : playerMasteries;\n    this.redSideMasteries = this.userIsRedSide ? playerMasteries : opponentMasteries;\n\n    for (const player of this.blueSideMasteries) {\n      this.getTopChampsForEachRole(player, true);\n    }\n\n    for (const player of this.redSideMasteries) {\n      this.getTopChampsForEachRole(player, false);\n    }\n  }\n\n  resetDraft() {\n    this.isBlueSideChoosing.set(true);\n    this.isBanPhase.set(true);\n    this.draftStarted = false;\n    this.draftPhase = 'Blue Ban 1';\n    this.currentDraftRound = 1;\n    this.aiTimer = -1;\n    this.champions = [];\n    this.initiateMasteries();\n\n    this.isAiChoosing = false;\n\n    this.blueSideDraftScores.set([]);\n    this.redSideDraftScores.set([]);\n    this.blueSidePlayers = {\n      top: [],\n      jungle: [],\n      mid: [],\n      adc: [],\n      support: [],\n    };\n    this.redSidePlayers = {\n      top: [],\n      jungle: [],\n      mid: [],\n      adc: [],\n      support: [],\n    };\n\n    this.redSideBans.set([...emptyDraftBans]);\n    this.blueSideBans.set([...emptyDraftBans]);\n    this.redSideChamps.set([...emptyDraftPicks]);\n    this.blueSideChamps.set([...emptyDraftPicks]);\n  }\n\n  callNotification(message: string, color = 'green') {\n    if (color === 'blue') {\n      this.notification.type = 'info';\n    } else if (color === 'red') {\n      this.notification.type = 'error';\n    } else {\n      this.notification.type = 'success';\n    }\n\n    this.notification.message = message;\n    this.notification.isActive = true;\n    setTimeout(() => {\n      this.notification.isActive = false;\n      this.notification.message = '';\n    }, 4000);\n  }\n\n  getChampionFromId(id: number | undefined) {\n    const champion = this.champions.find(c => c.id === id);\n    return champion;\n  }\n\n  selectRole(role: Role, champ: Partial<DraftChampion>, isBlueSide: boolean, index: number) {\n    if ((isBlueSide && !this.userIsRedSide) || !this.useAiOpponent) {\n      champ.selectedRole = role;\n      const updatedChamps = [...this.blueSideChamps()];\n      updatedChamps[index] = champ;\n      this.blueSideChamps.set(updatedChamps);\n      console.log(this.blueSideChamps().map(c => c.selectedRole));\n    } else if ((!isBlueSide && this.userIsRedSide) || !this.useAiOpponent) {\n      champ.selectedRole = role;\n      const updatedChamps = [...this.redSideChamps()];\n      updatedChamps[index] = champ;\n      this.redSideChamps.set(updatedChamps);\n      console.log(this.redSideChamps().map(c => c.selectedRole));\n    }\n    for (const filteredChamp of this.filteredChampions()) {\n      this.setSynergyScore(filteredChamp);\n      this.setCounterScore(filteredChamp);\n    }\n\n    // this should\n    // if (isBlueSide) {\n    //   this.blueSideDraftScores.update(arr => {\n    //     const newArr = [...arr];\n    //     newArr.splice(index, 1, this.getPickScore(champ as DraftChampion));\n    //     // console.log()\n    //     return newArr;\n    //   });\n    // } else {\n    //   this.redSideDraftScores.update(arr => {\n    //     const newArr = [...arr];\n    //     newArr[index] = this.getPickScore(champ as DraftChampion);\n    //     return newArr;\n    //   });\n    // }\n    console.log('blueside scores', this.blueSideDraftScores(), 'redside scores', this.redSideDraftScores());\n  }\n\n  getLetterRank(rating: number): LetterRank {\n    if (rating > 18) {\n      return 'S';\n    } else if (rating > 14) {\n      return 'A';\n    } else if (rating > 10) {\n      return 'B';\n    } else if (rating > 6) {\n      return 'C';\n    } else if (rating > 2) {\n      return 'D';\n    } else {\n      return 'F';\n    }\n  }\n\n  getDisplayMetaScore(champ: DraftChampion, specificRole?: Role) {\n    if (this.roleFilter() === 'all') {\n      return this.isOneRoleAvailable(champ) ? this.getMetaScore(champ, specificRole) : TierValue.F;\n    }\n    return this.getMetaScore(champ, this.roleFilter() as Role);\n  }\n\n  getDisplayMasteryScore(champ: DraftChampion, specificRole?: Role, playerSide?: 'player' | 'opponent') {\n    if (this.roleFilter() === 'all') {\n      return this.isOneRoleAvailable(champ) ? this.getMasteryScore(champ, specificRole) : TierValue.F;\n    }\n    return this.getMasteryScore(champ, this.roleFilter() as Role, playerSide);\n  }\n\n  getMasteryScore(champ: DraftChampion, specificRole?: Role, playerSide?: string) {\n    const ratings = getChampMasteries(champ, this.draftPhase, this.currentDraftRound, this.userIsRedSide, playerSide);\n    if (!specificRole) {\n      return Math.max(...ratings);\n    }\n    const roles = [...AllRoles];\n    const index = roles.indexOf(specificRole);\n    return ratings[index];\n  }\n\n  getMetaScore({ metaStrength }: DraftChampion, specificRole?: Role) {\n    if (specificRole) {\n      const roles = [...AllRoles];\n      const index = roles.indexOf(specificRole);\n      return metaStrength[index];\n    }\n    // this should accurately give multiRole champs in edge in metaScore\n    const weightedStrength = metaStrength.filter(r => r >= 2).sort((a, b) => b - a);\n    return weightedStrength.length < 2\n      ? Math.max(...weightedStrength)\n      : weightedStrength.length === 2\n        ? Math.max(...weightedStrength) + weightedStrength[1] / 12\n        : Math.max(...weightedStrength) + weightedStrength[1] / 12 + weightedStrength[2] / 12;\n  }\n\n  setSynergyScore(evaluatedChamp: DraftChampion, playerSide?: 'player' | 'opponent') {\n    const side = playerSide ?? getChampPropFromDraftPhase(this.draftPhase, this.currentDraftRound, this.userIsRedSide);\n    let currentSelectedChamps: Partial<DraftChampion>[];\n    if (blueSideBanRounds.includes(this.currentDraftRound) || redSidePickRounds.includes(this.currentDraftRound)) {\n      currentSelectedChamps = this.redSideChamps();\n    } else {\n      currentSelectedChamps = this.blueSideChamps();\n    }\n\n    currentSelectedChamps = currentSelectedChamps.filter(c => !c.isPlaceholder);\n    if (currentSelectedChamps.length < 1) {\n      if (side === 'player') {\n        evaluatedChamp.currentSynergy.player = TierValue.F;\n        return TierValue.F;\n      } else {\n        evaluatedChamp.currentSynergy.opp = TierValue.F;\n        return TierValue.F;\n      }\n    }\n    for (const champ of currentSelectedChamps as DraftChampion[]) {\n      const tierList = champ.synergies[champ.selectedRole];\n      for (const [letter, championIds] of Object.entries(tierList)) {\n        if (championIds.includes(evaluatedChamp.id)) {\n          if (side === 'player') {\n            evaluatedChamp.currentSynergy.player = tierValues[letter];\n            return tierValues[letter];\n          } else {\n            evaluatedChamp.currentSynergy.opp = tierValues[letter];\n            return tierValues[letter];\n          }\n        }\n      }\n    }\n    if (side === 'player') {\n      evaluatedChamp.currentSynergy.player = TierValue.F;\n      return TierValue.F;\n    } else {\n      evaluatedChamp.currentSynergy.opp = TierValue.F;\n      return TierValue.F;\n    }\n  }\n\n  getSynergyScore(evaluatedChamp: DraftChampion, playerSide?: 'player' | 'opponent'): number {\n    // if champ hasn't been evaluated for synergy or the selectedRole has changed for a selectedChamp then get the synergy score otherwise use the existing score\n\n    const side = playerSide ?? getChampPropFromDraftPhase(this.draftPhase, this.currentDraftRound, this.userIsRedSide);\n    // if (evaluatedChamp.currentSynergy.player && side === 'player') {\n    //   return evaluatedChamp.currentSynergy.player;\n    // }\n    // if (evaluatedChamp.currentSynergy.opp && side === 'opponent') {\n    //   return evaluatedChamp.currentSynergy.opp;\n    // }\n    const score = this.setSynergyScore(evaluatedChamp, playerSide);\n    if (side === 'player') {\n      evaluatedChamp.currentSynergy.player = score;\n      return score;\n    } else {\n      evaluatedChamp.currentSynergy.opp = score;\n      return score;\n    }\n  }\n\n  setCounterScore(evaluatedChamp: DraftChampion, playerSide?: 'opponent' | 'player'): number {\n    const side = playerSide ?? getChampPropFromDraftPhase(this.draftPhase, this.currentDraftRound, this.userIsRedSide);\n    let currentSelectedChamps: Partial<DraftChampion>[];\n    if (blueSideBanRounds.includes(this.currentDraftRound) || redSidePickRounds.includes(this.currentDraftRound)) {\n      currentSelectedChamps = this.blueSideChamps();\n    } else {\n      currentSelectedChamps = this.redSideChamps();\n    }\n\n    currentSelectedChamps = currentSelectedChamps.filter(c => !c.isPlaceholder);\n    if (currentSelectedChamps.length < 1) {\n      if (side === 'player') {\n        evaluatedChamp.currentCounter.player[evaluatedChamp.selectedRole] = TierValue.F;\n        return TierValue.F;\n      } else {\n        evaluatedChamp.currentCounter.opp[evaluatedChamp.selectedRole] = TierValue.F;\n        return TierValue.F;\n      }\n    }\n    for (const champ of currentSelectedChamps as DraftChampion[]) {\n      const tierList = champ.counters[champ.selectedRole];\n      for (const [letter, championIds] of Object.entries(tierList)) {\n        if (championIds.includes(evaluatedChamp.id)) {\n          if (side === 'player') {\n            const score = tierValues[letter];\n            evaluatedChamp.currentCounter.player[champ.selectedRole] = score;\n            const adviceTags = evaluatedChamp.adviceTags.player[evaluatedChamp.selectedRole];\n            if (score >= 12 && !adviceTags.includes('Counter Pick')) {\n              console.log('counter pick for player');\n              adviceTags.push('Counter Pick');\n            }\n            return score;\n          } else {\n            const score = tierValues[letter];\n            evaluatedChamp.currentCounter.opp[champ.selectedRole] = score;\n            const adviceTags = evaluatedChamp.adviceTags.opp[evaluatedChamp.selectedRole];\n            if (score >= 12 && !adviceTags.includes('Counter Pick')) {\n              console.log('counter pick for opp');\n              adviceTags.push('Counter Pick');\n            }\n            return score;\n          }\n        }\n      }\n    }\n    if (side === 'player') {\n      evaluatedChamp.currentCounter.player[evaluatedChamp.selectedRole] = TierValue.F;\n      return TierValue.F;\n    } else {\n      evaluatedChamp.currentCounter.opp[evaluatedChamp.selectedRole] = TierValue.F;\n      return TierValue.F;\n    }\n  }\n\n  getCounterScore(evaluatedChamp: DraftChampion, playerSide?: 'player' | 'opponent'): number {\n    const side = playerSide ?? getChampPropFromDraftPhase(this.draftPhase, this.currentDraftRound, this.userIsRedSide);\n\n    // if (evaluatedChamp.currentCounter.player && side === 'player') {\n    //   return evaluatedChamp.currentCounter.player;\n    // }\n    // if (evaluatedChamp.currentCounter.opp && side === 'opponent') {\n    //   return evaluatedChamp.currentCounter.opp;\n    // }\n    const score = this.setCounterScore(evaluatedChamp, side);\n    if (side === 'player') {\n      evaluatedChamp.currentCounter.player[evaluatedChamp.selectedRole] = score;\n      return score;\n    } else {\n      evaluatedChamp.currentCounter.opp[evaluatedChamp.selectedRole] = score;\n      return score;\n    }\n  }\n\n  getPickScore(champ: DraftChampion) {\n    const mastery = this.getMasteryScore(champ);\n    const metaStrength = this.getMetaScore(champ);\n    const synergy = this.getSynergyScore(champ);\n    if (mastery === TierValue.F) {\n      return TierValue.F;\n    }\n    if (!this.isOneRoleAvailable(champ)) {\n      return TierValue.F;\n    }\n    const avg = (mastery * 0.75 + metaStrength * 1.25 + synergy * 0.5) / 2;\n    return avg;\n  }\n\n  chooseSortBy(champs: DraftChampion[], sortBy: DraftSortHeader) {\n    const playerSide =\n      (this.isUserChoosing() && this.isBanPhase()) || (!this.isUserChoosing() && !this.isBanPhase()) ? 'opponent' : 'player';\n    if (sortBy === 'name') {\n      return champs.sort((a, b) => a.name.localeCompare(b.name));\n    }\n    if (sortBy === 'synergy') {\n      return champs.sort((a, b) => this.getSynergyScore(b) - this.getSynergyScore(a));\n    }\n    if (sortBy === 'mastery') {\n      return champs.sort(\n        (a, b) =>\n          this.getDisplayMasteryScore(b, this.roleFilter() === 'all' ? undefined : (this.roleFilter() as Role), playerSide) -\n          this.getDisplayMasteryScore(a, this.roleFilter() === 'all' ? undefined : (this.roleFilter() as Role), playerSide)\n      );\n    }\n    if (sortBy === 'meta') {\n      return champs.sort((a, b) => this.getDisplayMetaScore(b) - this.getDisplayMetaScore(a));\n    }\n    if (sortBy === 'counter') {\n      return champs.sort((a, b) => this.getCounterScore(b) - this.getCounterScore(a));\n    }\n    return champs;\n  }\n\n  isOneRoleAvailable(champ: DraftChampion) {\n    if (this.draftPhase.includes('Red Ban') || this.draftPhase.includes('Blue Pick')) {\n      // When red team is banning or blue team is picking\n      // if champ has only one role and the same role as one of the selected blueSideChamps return 0\n      const pickedChampRoles = this.blueSideChamps().map(c => c.selectedRole);\n      const availableRoles = checkForAvailableRoles(pickedChampRoles);\n      // console.log(availableRoles);\n      // if any of the availableRoles is in the currentChamp's roles then it can be returned as normal\n      if (!availableRoles.some(r => champ.roles.includes(r))) {\n        return TierValue.F;\n      }\n    } else if (this.draftPhase.includes('Blue Ban') || this.draftPhase.includes('Red Pick')) {\n      // When blue team is banning or red team is picking\n      // if champ has only one role and the same role as one of the selected redSideChamps return 0\n      const pickedChampRoles = this.redSideChamps().map(c => c.selectedRole);\n      const availableRoles = checkForAvailableRoles(pickedChampRoles);\n      // console.log(availableRoles);\n      // if any of the availableRoles is in the currentChamp's roles then it can be returned as normal\n      if (!availableRoles.some(r => champ.roles.includes(r))) {\n        return 0;\n      }\n    }\n    return true;\n  }\n\n  getTopChampsInMeta(masteries: TierListRankings, role: Role): DraftChampion[] {\n    if (this.patchVersion !== 'MSI 24') {\n      return [];\n    }\n    const masteredChamps = [...masteries.s, ...masteries.a, ...masteries.b, ...masteries.c];\n    const metaChamps = [...patchMSI24[role].s, ...patchMSI24[role].a, ...patchMSI24[role].b];\n    const mainChamps = masteredChamps.filter(id => metaChamps.includes(id)).map(id => this.getChampionFromId(id));\n    const filteredChamps: DraftChampion[] = [...mainChamps].filter((champ): champ is DraftChampion => !!champ);\n    return filteredChamps.slice(0, 3);\n  }\n\n  getTopChampsForEachRole(player: DraftPlayer, isBlueSide: boolean) {\n    const role = player.mainRole;\n    if (!role) {\n      return;\n    }\n    const champs = Array.from(\n      this.filteredChampions()\n        .filter(c => c.roles.includes(role as Role) && player.championMastery?.s.includes(c.id))\n        .concat(...this.filteredChampions().filter(c => c.roles.includes(role as Role) && player.championMastery?.a.includes(c.id)))\n    );\n    if (isBlueSide) {\n      this.blueSidePlayers[role] = champs;\n    } else {\n      this.redSidePlayers[role] = champs;\n    }\n  }\n\n  checkAndStartAiTimer() {\n    if (!this.useAiOpponent || this.isAiChoosing) {\n      return;\n    }\n    if (\n      (this.userIsRedSide && this.blueRounds.includes(this.currentDraftRound)) ||\n      (!this.userIsRedSide && this.redRounds.includes(this.currentDraftRound))\n    ) {\n      this.isAiChoosing = true;\n      const intervalId = setInterval(() => {\n        this.incrementAiTimer();\n        if (this.aiTimer >= 100) {\n          clearInterval(intervalId);\n          this.chooseAiChampion();\n          this.aiTimer = -1;\n          this.isAiChoosing = false;\n          this.checkAndStartAiTimer();\n        }\n      }, 25);\n    }\n  }\n\n  incrementAiTimer() {\n    this.aiTimer += 1;\n  }\n\n  chooseAiChampion() {\n    let champOptions = [];\n    // if AI is Blue Side and is currently picking a champ\n    if (this.userIsRedSide && blueSidePickRounds.includes(this.currentDraftRound)) {\n      const selectedRoles = this.blueSideChamps()\n        .filter(c => c.selectedRole)\n        .map(c => c.selectedRole as Role);\n      champOptions = [...this.availableChampions().filter(c => !selectedRoles.includes(c.selectedRole))];\n    } else if (!this.userIsRedSide && redSidePickRounds.includes(this.currentDraftRound)) {\n      // if AI is Red Side and is currently picking a champ\n      const selectedRoles = this.redSideChamps()\n        .filter(c => c.selectedRole)\n        .map(c => c.selectedRole as Role);\n      champOptions = [...this.availableChampions().filter(c => !selectedRoles.includes(c.selectedRole))];\n    } else {\n      champOptions = [...this.availableChampions()]; // this will return all champions\n    }\n    const sortedChamps = champOptions.sort((a, b) => this.getPickScore(b) - this.getPickScore(a));\n    const draftChampion = shuffle(sortedChamps.slice(0, 3))[0];\n    this.chooseChampion(draftChampion, true);\n  }\n\n  chooseChampion(champ: DraftChampion, isAiChoice = false) {\n    if (!isAiChoice) {\n      this.isAiChoosing = false;\n    }\n    if (this.currentDraftRound > 20 || (this.aiTimer > -1 && !isAiChoice)) {\n      return;\n    }\n\n    const draftPickScore = this.getPickScore(champ);\n    // BANS\n    // red bans on 2, 4, 6, 13, 15\n    // blue bans on 1, 3, 5, 14, 16\n    const firstBanPhase = this.currentDraftRound < 7;\n    const secondBanPhase = this.currentDraftRound > 12 && this.currentDraftRound < 17;\n    const firstPickPhase = this.currentDraftRound > 6 && this.currentDraftRound < 13;\n    const secondPickPhase = this.currentDraftRound > 16;\n    if (firstBanPhase || secondBanPhase) {\n      const isRed = redSideBanRounds.includes(this.currentDraftRound);\n      if (isRed) {\n        const arr = [...this.redSideBans()];\n        const index = redSideBanRounds.indexOf(this.currentDraftRound);\n        arr[index] = champ;\n        this.redSideBans.set(arr);\n        this.callNotification(`Red side has banned ${champ.name}.`, 'red');\n      } else {\n        const arr = [...this.blueSideBans()];\n        const index = blueSideBanRounds.indexOf(this.currentDraftRound);\n        arr[index] = champ;\n        this.blueSideBans.set(arr);\n        this.callNotification(`Blue side has banned ${champ.name}.`, 'blue');\n      }\n    } else if (firstPickPhase || secondPickPhase) {\n      // PICKS\n      // red chooses on 8, 9, 12, 17, 20\n      // blue chooses on 7, 10, 11, 18, 19\n\n      const isRed = redSidePickRounds.includes(this.currentDraftRound);\n      if (isRed) {\n        const arr = [...this.redSideChamps()];\n        const index = redSidePickRounds.indexOf(this.currentDraftRound);\n        arr[index] = champ;\n        this.redSideDraftScores.set([...this.redSideDraftScores(), draftPickScore]);\n        this.redSideChamps.set(arr);\n        this.callNotification(`Red side has chosen ${champ.name}.`, `'red'`);\n        console.log(`Red side has chosen ${champ.name}.`, `With a score of ${draftPickScore}/20`);\n      } else {\n        const arr = [...this.blueSideChamps()];\n        const index = blueSidePickRounds.indexOf(this.currentDraftRound);\n        arr[index] = champ;\n        this.blueSideDraftScores.set([...this.blueSideDraftScores(), draftPickScore]);\n        this.blueSideChamps.set(arr);\n        this.callNotification(`Blue side has chosen ${champ.name}.`, 'blue');\n        console.log(`Blue side has chosen ${champ.name}.`, `With a score of ${draftPickScore}/20`);\n      }\n    }\n    console.log(this.blueSideDraftScores(), this.redSideDraftScores());\n    this.currentDraftRound++;\n    this.checkPickPhase();\n    this.checkAndStartAiTimer();\n  }\n\n  checkPickPhase() {\n    if (this.currentDraftRound > 20) {\n      this.draftPhase = 'Draft Complete';\n      return;\n    }\n\n    const firstBanPhase = this.currentDraftRound < 7;\n    const secondBanPhase = this.currentDraftRound > 12 && this.currentDraftRound < 17;\n    const firstPickPhase = this.currentDraftRound > 6 && this.currentDraftRound < 13;\n    const secondPickPhase = this.currentDraftRound > 16;\n    let index = 0;\n    let firstPhrase = '';\n    if (firstBanPhase || secondBanPhase) {\n      const isRed = redSideBanRounds.includes(this.currentDraftRound);\n      if (isRed) {\n        index = redSideBanRounds.indexOf(this.currentDraftRound);\n        firstPhrase = 'Red Ban ';\n      } else {\n        index = blueSideBanRounds.indexOf(this.currentDraftRound);\n        firstPhrase = 'Blue Ban ';\n      }\n    } else if (firstPickPhase || secondPickPhase) {\n      // PICKS\n      // red chooses on 8, 9, 12, 17, 20\n      // blue chooses on 7, 10, 11, 18, 19\n      const isRed = redSidePickRounds.includes(this.currentDraftRound);\n      if (isRed) {\n        index = redSidePickRounds.indexOf(this.currentDraftRound);\n        firstPhrase = 'Red Pick ';\n      } else {\n        index = blueSidePickRounds.indexOf(this.currentDraftRound);\n        firstPhrase = 'Blue Pick ';\n      }\n    }\n    this.draftPhase = (firstPhrase + (index + 1).toString()) as DraftPhase;\n  }\n\n  getCompositionAdvice(isBlueSide: boolean): string[] {\n    return getCompositionAdviceAndGrade(\n      isBlueSide,\n      this.blueSideChamps,\n      this.redSideChamps,\n      this.blueSideDraftScores,\n      this.redSideDraftScores\n    );\n  }\n\n  displaySynergyAndCounter() {\n    if (this.currentDraftRound < 7) {\n      return 'n/a';\n    } else if (this.screenWidth > 640 && this.roleFilter() !== 'all') {\n      return 'roleSpecific';\n    } else {\n      return;\n    }\n  }\n}\n",
            "styleUrl": "./draft.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "service",
                        "type": "MobaService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 154,
                "jsdoctags": [
                    {
                        "name": "service",
                        "type": "MobaService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "accessors": {
                "userIsRedSide": {
                    "name": "userIsRedSide",
                    "getSignature": {
                        "name": "userIsRedSide",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 172
                    }
                },
                "patchVersion": {
                    "name": "patchVersion",
                    "getSignature": {
                        "name": "patchVersion",
                        "type": "",
                        "returnType": "PatchName",
                        "line": 176
                    }
                },
                "useAiOpponent": {
                    "name": "useAiOpponent",
                    "getSignature": {
                        "name": "useAiOpponent",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 180
                    }
                },
                "useRandomTeam": {
                    "name": "useRandomTeam",
                    "getSignature": {
                        "name": "useRandomTeam",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 184
                    }
                },
                "difficulty": {
                    "name": "difficulty",
                    "getSignature": {
                        "name": "difficulty",
                        "type": "",
                        "returnType": "\"easy\" | \"medium\" | \"hard\"",
                        "line": 188
                    }
                },
                "masteriesForSide": {
                    "name": "masteriesForSide",
                    "getSignature": {
                        "name": "masteriesForSide",
                        "type": "[]",
                        "returnType": "DraftPlayer[]",
                        "line": 192
                    }
                },
                "selectedRoleFilter": {
                    "name": "selectedRoleFilter",
                    "getSignature": {
                        "name": "selectedRoleFilter",
                        "type": "",
                        "returnType": "Role",
                        "line": 196
                    }
                }
            },
            "templateData": "<div class=\"toast toast-top toast-center z-20\" *ngIf=\"notification.isActive\">\n  <div class=\"alert\" [class.alert-info]=\"notification.type === 'info'\" [class.alert-error]=\"notification.type === 'error'\">\n    <span>{{ notification.message }}</span>\n  </div>\n</div>\n\n<div *ngIf=\"!draftStarted\" class=\"container flex flex-col items-center\">\n  <h1 class=\"text-3xl font-bold\">Pro LoL Draft Sim</h1>\n  <!-- DRAFT FORM -->\n  <form class=\"flex flex-col w-full\" [formGroup]=\"draftForm\">\n    <label class=\"form-control w-full max-w-xs m-2 self-center\">\n      <div class=\"label\">\n        <span class=\"label-text\">Selected Patch</span>\n      </div>\n      <select class=\"select select-bordered\" formControlName=\"patchVersion\">\n        <option selected>MSI 24</option>\n      </select>\n    </label>\n\n    <div class=\"form-control\">\n      <label class=\"label cursor-pointer flex justify-center\">\n        <span class=\"label-text\">Blue Side</span>\n        <input\n          type=\"checkbox\"\n          class=\"toggle mx-2\"\n          [ngClass]=\"{\n            'bg-blue-500 hover:bg-blue-700 border-blue-500': !userIsRedSide,\n            'bg-red-500 hover:bg-red-700 border-red-500': userIsRedSide\n          }\"\n          formControlName=\"userIsRedSide\" />\n        <span class=\"label-text\">Red Side</span>\n      </label>\n    </div>\n\n    <div class=\"form-control\">\n      <label class=\"label cursor-pointer flex justify-center\">\n        <input type=\"checkbox\" class=\"toggle mx-2\" formControlName=\"useAiOpponent\" />\n        <span class=\"label-text\">Use AI Opponent</span>\n      </label>\n    </div>\n\n    <div class=\"form-control\" *ngIf=\"useAiOpponent\">\n      <!-- <label>AI Difficulty</label> -->\n      <div class=\"join justify-center\">\n        <input class=\"join-item btn\" type=\"radio\" value=\"easy\" aria-label=\"Easy\" formControlName=\"difficulty\" />\n        <input class=\"join-item btn\" type=\"radio\" value=\"medium\" aria-label=\"Normal\" formControlName=\"difficulty\" />\n        <input class=\"join-item btn\" type=\"radio\" value=\"hard\" aria-label=\"Hard\" formControlName=\"difficulty\" />\n      </div>\n    </div>\n\n    <div class=\"form-control\">\n      <label class=\"label cursor-pointer flex justify-center\">\n        <span class=\"label-text\">Fixed Team</span>\n        <input type=\"checkbox\" class=\"toggle mx-2\" formControlName=\"useRandomTeam\" />\n        <span class=\"label-text\">Random Team</span>\n      </label>\n    </div>\n\n    <div>\n      <h1 class=\"text-xl font-bold\">Current Team Strengths</h1>\n      <table class=\"table table-zebra table-xs\">\n        <tbody>\n          <tr *ngFor=\"let player of masteriesForSide\" class=\"hover\">\n            <th>{{ player.mainRole | uppercase }}</th>\n            <ng-container *ngFor=\"let champ of getTopChampsInMeta(player.championMastery, player.mainRole); let i = index\">\n              <td *ngIf=\"champ; else emptySlot\">\n                <div class=\"flex items-center gap-3\">\n                  <div class=\"avatar\">\n                    <div class=\"rounded w-10 sm:w-12\">\n                      <img [src]=\"champ.img\" [alt]=\"champ.name\" />\n                    </div>\n                  </div>\n                  <div *ngIf=\"screenWidth > 640\">\n                    <div class=\"font-bold\">{{ champ.name }}</div>\n                  </div>\n                </div>\n              </td>\n              <ng-template #emptySlot>\n                <td></td>\n              </ng-template>\n            </ng-container>\n            <ng-container *ngFor=\"let i of [].constructor(3 - getTopChampsInMeta(player.championMastery, player.mainRole).length)\">\n              <td></td>\n            </ng-container>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n\n    <button class=\"btn btn-primary\" (click)=\"startDraft()\" type=\"button\">Start Draft</button>\n  </form>\n</div>\n\n<!-- DRAFT INTERFACE -->\n<div *ngIf=\"draftStarted\" class=\"flex flex-col max-w-screen-lg mx-auto\">\n  <!-- HEADER -->\n  <div class=\"flex flex-col md:flex-row justify-center items-center mb-4 gap-4\">\n    <div class=\"flex\">\n      <h1 class=\"text-2xl mx-4\">{{ draftPhase }}</h1>\n      <button class=\"btn btn-secondary btn-sm\" (click)=\"resetDraft()\">Reset</button>\n    </div>\n    <div *ngIf=\"useAiOpponent\" class=\"text-center\">\n      <p *ngIf=\"aiTimer > -1; else playerPick\">\n        AI is {{ blueSideBanRounds.concat(redSideBanRounds).includes(currentDraftRound) ? 'banning' : 'picking' }} a champion<span\n          class=\"loading loading-dots loading-xs ml-1 relative top-2\"></span>\n      </p>\n      <ng-template #playerPick>\n        <p>{{ blueSideBanRounds.concat(redSideBanRounds).includes(currentDraftRound) ? 'Ban' : 'Pick' }} a champion</p>\n      </ng-template>\n\n      <progress class=\"progress w-56\" [value]=\"aiTimer\" [max]=\"100\"></progress>\n    </div>\n  </div>\n\n  <!-- BAN DASHBOARD -->\n  <div class=\"flex flex-col gap-4 md:flex-row md:gap-0\">\n    <ul class=\"flex justify-around md:justify-normal text-gray-200\">\n      <li *ngFor=\"let champ of blueSideBans()\" class=\"sm:mx-2\">\n        <div class=\"avatar placeholder\" *ngIf=\"champ?.isPlaceholder\">\n          <div class=\"w-12 rounded bg-blue-700\">\n            <span class=\"text-2xl\">{{ champ.name }}</span>\n          </div>\n        </div>\n        <div class=\"avatar\" *ngIf=\"!champ?.isPlaceholder\">\n          <div class=\"w-12 rounded\">\n            <img [src]=\"champ.img\" />\n          </div>\n        </div>\n      </li>\n    </ul>\n    <label class=\"input input-lg input-bordered flex items-center gap-2 flex-1 order-2 md:order-none md:input-md\">\n      <input type=\"text\" class=\"grow\" placeholder=\"Search\" [formControl]=\"searchControl\" id=\"searchControl\" />\n      <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" fill=\"currentColor\" class=\"w-4 h-4 opacity-70\">\n        <path\n          fill-rule=\"evenodd\"\n          d=\"M9.965 11.026a5 5 0 1 1 1.06-1.06l2.755 2.754a.75.75 0 1 1-1.06 1.06l-2.755-2.754ZM10.5 7a3.5 3.5 0 1 1-7 0 3.5 3.5 0 0 1 7 0Z\"\n          clip-rule=\"evenodd\" />\n      </svg>\n    </label>\n    <ul class=\"flex justify-around md:justify-normal text-gray-200\">\n      <li *ngFor=\"let champ of redSideBans()\" class=\"sm:mx-2\">\n        <div class=\"avatar placeholder\" *ngIf=\"champ?.isPlaceholder\">\n          <div class=\"w-12 rounded bg-red-700\">\n            <span class=\"text-2xl\">{{ champ.name }}</span>\n          </div>\n        </div>\n        <div class=\"avatar\" *ngIf=\"!champ?.isPlaceholder\">\n          <div class=\"w-12 rounded\">\n            <img [src]=\"champ.img\" />\n          </div>\n        </div>\n      </li>\n    </ul>\n  </div>\n\n  <!-- Filter Table by Roles -->\n  <ul class=\"flex my-2 justify-around md:justify-center\">\n    <button\n      *ngFor=\"let role of positionFilters\"\n      class=\"btn btn-ghost btn-square p-1 md:mx-4\"\n      [class.btn-active]=\"this.roleFilter() === role.name\"\n      (click)=\"this.roleFilter.set(role.name)\">\n      <img [src]=\"role.url\" class=\"w-full\" />\n    </button>\n  </ul>\n  <!-- Selected Champs and Table -->\n  <div class=\"flex pb-16 gap-16 md:pb-8 md:gap-4 flex-col md:flex-row\">\n    <!-- Blue SIDE -->\n    <ul class=\"flex justify-around flex-wrap order-1 md:mb-0 md:order-none md:flex-col md:justify-normal text-gray-200\">\n      <li *ngFor=\"let champ of blueSideChamps(); let i = index\" class=\"my-4\">\n        <!-- EMPTY CHAMP SLOT -->\n        <div class=\"relative\" *ngIf=\"champ?.isPlaceholder\">\n          <div class=\"w-12 h-12 md:w-24 md:h-24 rounded bg-blue-700 items-center justify-center flex\">\n            <span class=\"text-xs md:text-2xl\">B{{ i + 1 }}</span>\n          </div>\n        </div>\n        <!-- FILLED CHAMP SLOT -->\n        <div *ngIf=\"!champ?.isPlaceholder\" class=\"avatar cursor-pointer\">\n          <div class=\"absolute right-1/4 top-full w-6 mt-1 md:mt-0 md:top-0 md:right-full h-[4.5rem] md:h-full md:mr-2\">\n            <ul>\n              <li\n                *ngFor=\"let role of champ.roles\"\n                class=\"w-6 aspect-square\"\n                [class.bg-neutral-700]=\"role === champ.selectedRole\"\n                (click)=\"selectRole(role, champ, true, i)\">\n                <img [src]=\"'assets/images/role_icons/' + role + '.webp'\" />\n              </li>\n            </ul>\n          </div>\n          <div class=\"relative w-12 md:w-24 rounded\">\n            <img [src]=\"champ.img\" class=\"w-full\" (click)=\"getChampionFromId(champ.id)\" />\n          </div>\n          <span\n            *ngIf=\"champ.dmgType\"\n            class=\"badge badge-sm badge-outline absolute -bottom-4 left-[20%]\"\n            [ngClass]=\"getBadgeClass(champ.dmgType)\">\n            {{ champ.dmgType | uppercase }}\n          </span>\n        </div>\n      </li>\n    </ul>\n\n    <!-- TABLE -->\n    <div class=\"overflow-x-auto max-h-[50vh] md:max-h-[68vh] flex-1\">\n      <table class=\"table table-pin-rows table-zebra table-xs sm:table-md\">\n        <thead>\n          <tr>\n            <th (click)=\"sortBy.set('name')\" class=\"cursor-pointer\">\n              {{ screenWidth > 640 ? 'Champion / Roles' : 'Champion' }}\n            </th>\n            <th (click)=\"sortBy.set('meta')\" class=\"cursor-pointer\">Meta</th>\n            <th (click)=\"sortBy.set('mastery')\" class=\"cursor-pointer\">\n              {{ screenWidth > 640 && roleFilter() !== 'all' ? 'Mastery / Opp' : draftPhase.includes('ban') ? 'Opp Mastery' : 'Mastery' }}\n            </th>\n            <th (click)=\"sortBy.set('synergy')\" class=\"cursor-pointer\">\n              {{ screenWidth > 640 && roleFilter() !== 'all' ? 'Synergy / Opp' : 'Synergy' }}\n            </th>\n            <th (click)=\"sortBy.set('counter')\" class=\"cursor-pointer\">Counter</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr *ngFor=\"let champ of filteredChampions()\" class=\"hover cursor-pointer\" (click)=\"chooseChampion(champ)\">\n            <td>\n              <div class=\"flex items-center gap-3\">\n                <div class=\"flex flex-col items-center justify-center\">\n                  <div class=\"avatar\">\n                    <div class=\"rounded w-10 sm:w-12\">\n                      <img [src]=\"champ.img\" [alt]=\"champ.name\" />\n                    </div>\n                  </div>\n                  <div *ngIf=\"screenWidth > 640\" class=\"badge badge-xs badge-outline\" [ngClass]=\"getBadgeClass(champ.dmgType)\">\n                    {{ champ.dmgType | uppercase }}\n                  </div>\n                </div>\n\n                <div *ngIf=\"screenWidth > 640\">\n                  <div class=\"font-bold\">{{ champ.name }}</div>\n                </div>\n                <ul class=\"flex\">\n                  <li *ngFor=\"let role of champ.roles\" class=\"flex flex-col items-center w-4 sm:w-8\">\n                    <img [src]=\"'assets/images/role_icons/' + role + '.webp'\" />\n                  </li>\n                </ul>\n                <ul\n                  *ngIf=\"\n                    this.roleFilter() !== 'all' && getChampPropFromDraftPhase(draftPhase, currentDraftRound, userIsRedSide) === 'player'\n                  \">\n                  <li *ngFor=\"let badge of champ.adviceTags.player[selectedRoleFilter]\" class=\"flex flex-col mb-1\">\n                    <div class=\"badge badge-success badge-sm\">{{ badge }}</div>\n                  </li>\n                </ul>\n                <ul\n                  *ngIf=\"\n                    this.roleFilter() !== 'all' && getChampPropFromDraftPhase(draftPhase, currentDraftRound, userIsRedSide) === 'opponent'\n                  \">\n                  <li *ngFor=\"let badge of champ.adviceTags.opp[selectedRoleFilter]\" class=\"flex flex-col mb-1\">\n                    <div class=\"badge badge-success badge-sm\">{{ badge }}</div>\n                  </li>\n                </ul>\n              </div>\n            </td>\n            <td>\n              <ng-container *ngIf=\"roleFilter() === 'all'; else filteredMeta\">\n                <span *ngFor=\"let role of champ.roles; let i = index\">\n                  {{ getLetterRank(getDisplayMetaScore(champ, role)) }}\n                  <span *ngIf=\"i < champ.roles.length - 1\"> / </span>\n                </span>\n              </ng-container>\n              <ng-template #filteredMeta>\n                <span>{{ getLetterRank(getDisplayMetaScore(champ)) }}</span>\n              </ng-template>\n            </td>\n            <td>\n              <ng-container *ngIf=\"roleFilter() === 'all'; else filteredMastery\">\n                <span *ngFor=\"let role of champ.roles; let i = index\">\n                  {{ getLetterRank(getDisplayMasteryScore(champ, role)) }}\n                  <span *ngIf=\"i < champ.roles.length - 1\"> / </span>\n                </span>\n              </ng-container>\n              <ng-template #filteredMastery>\n                <span\n                  >{{ getLetterRank(getDisplayMasteryScore(champ, undefined, 'player')) }} /\n                  {{ getLetterRank(getDisplayMasteryScore(champ, undefined, 'opponent')) }}</span\n                >\n              </ng-template>\n            </td>\n            <td>\n              <ng-container [ngSwitch]=\"displaySynergyAndCounter()\">\n                <span *ngSwitchCase=\"'n/a'\"> N/A </span>\n                <span *ngSwitchCase=\"'roleSpecific'\">\n                  {{ getLetterRank(getSynergyScore(champ, 'player')) }} / {{ getLetterRank(getSynergyScore(champ, 'opponent')) }}</span\n                >\n                <span *ngSwitchDefault> {{ getLetterRank(getSynergyScore(champ)) }} </span>\n              </ng-container>\n            </td>\n            <td>\n              <ng-container [ngSwitch]=\"displaySynergyAndCounter()\">\n                <span *ngSwitchCase=\"'n/a'\"> N/A </span>\n                <span *ngSwitchCase=\"'roleSpecific'\">\n                  {{ getLetterRank(getCounterScore(champ, 'player')) }} / {{ getLetterRank(getCounterScore(champ, 'opponent')) }}</span\n                >\n                <span *ngSwitchDefault> {{ 'N/A' }} </span>\n              </ng-container>\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n\n    <!-- RED SIDE -->\n    <ul class=\"flex justify-around flex-wrap order-1 md:mb-0 md:order-none md:flex-col md:justify-normal text-gray-200\">\n      <li *ngFor=\"let champ of redSideChamps(); let i = index\" class=\"my-4\">\n        <!-- EMPTY CHAMP SLOT -->\n        <div class=\"relative\" *ngIf=\"champ?.isPlaceholder\">\n          <div class=\"w-12 h-12 md:w-24 md:h-24 rounded bg-red-700 items-center justify-center flex\">\n            <span class=\"text-xs md:text-2xl\">R{{ i + 1 }}</span>\n          </div>\n        </div>\n        <!-- FILLED CHAMP SLOT -->\n        <div *ngIf=\"!champ?.isPlaceholder\" class=\"avatar cursor-pointer\">\n          <div class=\"absolute left-1/4 top-full mt-1 md:mt-0 md:top-0 md:left-full h-[4.5rem] md:h-full w-6 md:ml-2\">\n            <ul>\n              <li\n                *ngFor=\"let role of champ.roles\"\n                class=\"w-6 aspect-square\"\n                [class.bg-neutral-700]=\"role === champ.selectedRole\"\n                (click)=\"selectRole(role, champ, false, i)\">\n                <img [src]=\"'assets/images/role_icons/' + role + '.webp'\" />\n              </li>\n            </ul>\n          </div>\n          <div class=\"relative w-12 md:w-24 rounded\">\n            <img [src]=\"champ.img\" class=\"w-full\" (click)=\"getChampionFromId(champ.id)\" />\n          </div>\n          <span\n            *ngIf=\"champ.dmgType\"\n            class=\"badge badge-sm badge-outline absolute -bottom-4 left-[20%]\"\n            [ngClass]=\"getBadgeClass(champ.dmgType)\">\n            {{ champ.dmgType | uppercase }}\n          </span>\n        </div>\n      </li>\n    </ul>\n  </div>\n  <!-- ADVICE ON DRAFT FOR BOTH SIDES -->\n  <div class=\"flex flex-col md:flex-row justify-between text-gray-200\">\n    <div class=\"p-4 bg-blue-600 rounded-lg mb-8\">\n      <h2 class=\"mb-2 text-xl\">Blue Side</h2>\n      <ul>\n        <li *ngFor=\"let item of getCompositionAdvice(true)\" class=\"mb-1\">\n          {{ item }}\n        </li>\n      </ul>\n    </div>\n    <div class=\"md:text-right p-4 bg-red-600 rounded-lg mb-8\">\n      <h2 class=\"mb-2 text-xl\">Red Side</h2>\n      <ul>\n        <li *ngFor=\"let item of getCompositionAdvice(false)\" class=\"mb-1\">\n          {{ item }}\n        </li>\n      </ul>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "GroupStageComponent",
            "id": "component-GroupStageComponent-cc63569218b874c138bd21c9c3baaaf24db9f2a3a737d07c3c0aa6e5f7799a714ff59a06f0f048e98e372266ee451d6dee975097a99c59b6e090b25732f6b6d1",
            "file": "src/app/simulation/group-stage/group-stage.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-group-stage",
            "styleUrls": [
                "./group-stage.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./group-stage.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "groupLetters",
                    "defaultValue": "groupLetters",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "headings",
                    "defaultValue": "['RNK', 'MP', 'PTS', 'GD', 'GS', 'GA']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "screenWidth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "service",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SimulationService",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "tournament",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Tournament | null",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [
                {
                    "name": "getNationClass",
                    "args": [
                        {
                            "name": "nation",
                            "type": "GroupTeam",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "nation",
                            "type": "GroupTeam",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getScreenSize",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'window:resize', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "openNationStats",
                    "args": [
                        {
                            "name": "nation",
                            "type": "GroupTeam | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "nation",
                            "type": "GroupTeam | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "window:resize",
                    "args": [],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29
                }
            ],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, HostListener } from '@angular/core';\r\nimport { groupLetters } from 'app/simulation/simulation.utils';\r\nimport { GroupTeam } from 'app/models/nation.model';\r\nimport { SimulationService } from 'app/simulation/simulation.service';\r\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\r\nimport { Tournament } from 'app/simulation/simulation.model';\r\n\r\n@UntilDestroy()\r\n@Component({\r\n  selector: 'app-group-stage',\r\n  templateUrl: './group-stage.component.html',\r\n  styleUrls: ['./group-stage.component.scss'],\r\n})\r\nexport class GroupStageComponent {\r\n  service: SimulationService;\r\n  screenWidth: number;\r\n  tournament: Tournament | null = null;\r\n  groupLetters = groupLetters;\r\n  headings = ['RNK', 'MP', 'PTS', 'GD', 'GS', 'GA'];\r\n\r\n  constructor(service: SimulationService) {\r\n    this.service = service;\r\n    this.screenWidth = window.innerWidth;\r\n    this.getScreenSize();\r\n    service.tournament$.pipe(untilDestroyed(this)).subscribe(t => (this.tournament = t));\r\n  }\r\n\r\n  @HostListener('window:resize', ['$event'])\r\n  getScreenSize() {\r\n    this.screenWidth = window.innerWidth;\r\n  }\r\n\r\n  getNationClass(nation: GroupTeam) {\r\n    return `nation ${nation.region}`;\r\n  }\r\n\r\n  openNationStats(nation: GroupTeam | null) {\r\n    this.service.changeSelectedNation(nation);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'variables.scss';\r\n\r\n.group-stage {\r\n  display: grid;\r\n  justify-content: space-evenly;\r\n  grid-template-columns: repeat(4, 1fr);\r\n  margin: 0 2rem;\r\n  padding: 4rem 0;\r\n\r\n  @media screen and (max-width: 1600px) {\r\n    display: grid;\r\n    grid-template-columns: repeat(2, 1fr);\r\n  }\r\n\r\n  @media screen and (max-width: 800px) {\r\n    display: flex;\r\n    flex-flow: column;\r\n    margin: 0;\r\n  }\r\n\r\n  .group-name {\r\n    text-transform: capitalize;\r\n    font-weight: bold;\r\n    text-align: center;\r\n    padding: 10px 0;\r\n    font-size: 150%;\r\n    font-family: 'aeonik-bold', system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\r\n    background-color: lightgray;\r\n    color: black;\r\n    border-radius: 5px;\r\n\r\n    @media screen and (max-width: 600px) {\r\n      border-radius: 0;\r\n    }\r\n  }\r\n\r\n  .group {\r\n    background-color: $primary;\r\n    color: white;\r\n    display: flex;\r\n    flex-flow: column;\r\n    margin: 10px;\r\n    padding: 5px;\r\n    border-radius: 10px;\r\n\r\n    @media screen and (max-width: 600px) {\r\n      margin: 15px 0;\r\n      padding: 0;\r\n      border-radius: 0;\r\n      font-size: 80%;\r\n    }\r\n\r\n    table {\r\n      padding: 0 5px;\r\n\r\n      th {\r\n        padding: 5px;\r\n\r\n        &:first-child {\r\n          text-align: left;\r\n        }\r\n      }\r\n\r\n      tr {\r\n        &.nation:last-child {\r\n          border-bottom: none;\r\n        }\r\n      }\r\n\r\n      .nation {\r\n\r\n        td {\r\n          text-align: center;\r\n          padding: 5px;\r\n\r\n          .nation-flag {\r\n            // width: 2.25rem;\r\n            // height: 1.5rem;\r\n            width: 2.25rem;\r\n            height: 2.25rem;\r\n          }\r\n\r\n          &.name {\r\n            font-family: 'aeonik-bold', system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\r\n            cursor: pointer;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n",
                    "styleUrl": "./group-stage.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "service",
                        "type": "SimulationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "service",
                        "type": "SimulationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"group-stage\">\r\n  <div class=\"group\" *ngFor=\"let group of tournament?.groups; index as i; trackBy: groupLetters\">\r\n    <span class=\"group-name\">Group {{ groupLetters(i) }}</span>\r\n    <table>\r\n      <thead>\r\n        <tr class=\"group-headings\">\r\n          <th colspan=\"2\">Team</th>\r\n          <th *ngFor=\"let heading of headings\">{{ heading }}</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr [class]=\"getNationClass(nation)\" *ngFor=\"let nation of group\">\r\n          <td>\r\n            <img class=\"nation-flag\" (click)=\"openNationStats(nation)\" [src]=\"nation.logo\" [alt]=\"nation.name\" />\r\n          </td>\r\n          <td class=\"name\" (click)=\"openNationStats(nation)\">\r\n            {{ screenWidth < 350 ? nation.abbreviation.toLocaleUpperCase() : nation.name }}\r\n          </td>\r\n          <td>{{ nation.ranking }}</td>\r\n          <td>{{ nation.matchesPlayed }}</td>\r\n          <td>{{ nation.points }}</td>\r\n          <td>{{ nation.gDiff }}</td>\r\n          <td>{{ nation.gFor }}</td>\r\n          <td>{{ nation.gOpp }}</td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-cad94b233ec8e80ceb541e7972c5f9737e08237b4e137112f3987ca48ee0cce5c0d57798d41daa5d4d24d6bdbb2df1606ab68cca2aa0a1785e38f99f3cac0729",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"storybook-header\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b\n            >!\n          </span>\n          <storybook-button\n            *ngIf=\"user\"\n            size=\"small\"\n            (onClick)=\"onLogout.emit($event)\"\n            label=\"Log out\"\n          ></storybook-button>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            class=\"margin-left\"\n            (onClick)=\"onLogin.emit($event)\"\n            label=\"Log in\"\n          ></storybook-button>\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            [primary]=\"true\"\n            class=\"margin-left\"\n            (onClick)=\"onCreateAccount.emit($event)\"\n            label=\"Sign up\"\n          ></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 69,
                    "type": "User | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 78,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 72,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 75,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ButtonComponent } from './button.component';\nimport type { User } from './user';\n\n@Component({\n  selector: 'storybook-header',\n  standalone: true,\n  imports: [CommonModule, ButtonComponent],\n  template: `<header>\n    <div class=\"storybook-header\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b\n            >!\n          </span>\n          <storybook-button\n            *ngIf=\"user\"\n            size=\"small\"\n            (onClick)=\"onLogout.emit($event)\"\n            label=\"Log out\"\n          ></storybook-button>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            class=\"margin-left\"\n            (onClick)=\"onLogin.emit($event)\"\n            label=\"Log in\"\n          ></storybook-button>\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            [primary]=\"true\"\n            class=\"margin-left\"\n            (onClick)=\"onCreateAccount.emit($event)\"\n            label=\"Sign up\"\n          ></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport class HeaderComponent {\n  @Input()\n  user: User | null = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-header {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\n.storybook-header svg {\n  display: inline-block;\n  vertical-align: top;\n}\n\n.storybook-header h1 {\n  font-weight: 700;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\n.storybook-header button + button {\n  margin-left: 10px;\n}\n\n.storybook-header .welcome {\n  color: #333;\n  font-size: 14px;\n  margin-right: 10px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "HomeComponent",
            "id": "component-HomeComponent-f854f0e6267a514087e6aa654b9c2b5dcef4d6604c70c4bf9b30b8e4d9b1b9fdc079372abbf8114c6b071d66a85159a51ad1532e938deb75dde89edfa7ac6db8",
            "file": "src/app/moba/home/home.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-home",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./home.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "tabs",
                    "defaultValue": "[\r\n    {\r\n      name: 'Player Selection',\r\n      url: 'player-select',\r\n    },\r\n    {\r\n      name: 'Draft',\r\n      url: 'draft',\r\n    },\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-home',\r\n  templateUrl: './home.component.html',\r\n  styleUrl: './home.component.scss',\r\n})\r\nexport class HomeComponent {\r\n  tabs = [\r\n    {\r\n      name: 'Player Selection',\r\n      url: 'player-select',\r\n    },\r\n    {\r\n      name: 'Draft',\r\n      url: 'draft',\r\n    },\r\n  ];\r\n}\r\n",
            "styleUrl": "./home.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"container mx-auto\">\r\n  <div role=\"tablist\" class=\"tabs tabs-boxed mb-4\">\r\n    <a role=\"tab\" class=\"tab\" [routerLink]=\"tab.url\" [routerLinkActive]=\"['tab-active']\" *ngFor=\"let tab of tabs\">{{ tab.name }}</a>\r\n  </div>\r\n  <router-outlet></router-outlet>\r\n</div>\r\n"
        },
        {
            "name": "HomeComponent",
            "id": "component-HomeComponent-a561c6c70c1a997d6f38309610813f2325f4ca94555a15bec07d794ee211c67732a85f5433be9a81cdd1864b20b00b58bbaec2c8f9523e43b5afabbe38fbc51a-1",
            "file": "src/app/pages/home/home.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-home",
            "styleUrls": [
                "./home.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./home.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "chemistry",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "firstName$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<FirstName[]>",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "formation",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "instructionsOpen",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "isLoggedIn",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "lastName$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<LastName[]>",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "loadDataOverlayOpen",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "nationOrTier",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "playerCount",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "positionBoxes",
                    "defaultValue": "POSITION_BOXES",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "realisticNationalities",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "rosterId",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "saveDataOverlayOpen",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "squadRules",
                    "defaultValue": "SQUAD_RULES",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "squadTotalRating",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "startersTotalRating",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "subscription",
                    "defaultValue": "new Subscription()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 33
                }
            ],
            "methodsClass": [
                {
                    "name": "infoOverlay",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 133,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "submitRoster",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { Player } from 'app/models/player.model';\r\nimport { LastName, FirstName } from 'app/core/services/firestore.model';\r\n\r\nimport { SQUAD_RULES } from '@shared/constants/squad-rules.model';\r\nimport { POSITION_BOXES } from '@shared/constants/position-boxes';\r\n\r\nimport { Observable, Subscription } from 'rxjs';\r\nimport { Nation } from 'app/models/nation.model';\r\nimport { AuthService } from '../../core/services/auth.service';\r\nimport { FirestoreService } from '../../core/services/firestore.service';\r\n\r\n@Component({\r\n  selector: 'app-home',\r\n  templateUrl: './home.component.html',\r\n  styleUrls: ['./home.component.scss'],\r\n})\r\nexport class HomeComponent implements OnInit, OnDestroy {\r\n  playerCount = 0;\r\n  // players: Player[];\r\n  // sortedData: Player[];\r\n  // pitchPlayers: Player[];\r\n  // sortedPitchPlayers: Player[];\r\n  // savedData: {\r\n  //   id: string;\r\n  //   saveName: string;\r\n  // }[];\r\n\r\n  lastName$!: Observable<LastName[]>;\r\n  firstName$!: Observable<FirstName[]>;\r\n\r\n  isLoggedIn = false;\r\n  subscription: Subscription = new Subscription();\r\n\r\n  saveDataOverlayOpen = false;\r\n  loadDataOverlayOpen = false;\r\n  instructionsOpen = false;\r\n  nationOrTier = '';\r\n  rosterId = '';\r\n\r\n  realisticNationalities = true;\r\n  startersTotalRating = 0;\r\n  squadTotalRating = 0;\r\n  formation = '';\r\n  chemistry = 0;\r\n  squadRules = SQUAD_RULES;\r\n  positionBoxes = POSITION_BOXES;\r\n\r\n  constructor(private afs: FirestoreService, private auth: AuthService) {\r\n    // this.players = [];\r\n    // this.pitchPlayers = [];\r\n    // this.sortedData = this.pitchPlayers.concat(this.players);\r\n    // this.sortedPitchPlayers = [];\r\n    // this.savedData = [];\r\n    // this.nationsList = [];\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    //   this.nations.forEach((tierObj) => {\r\n    //     for (let i = 0; i < tierObj.nations.length; i++) {\r\n    //       this.nationsList.push(tierObj.nations[i] as Nation);\r\n    //     }\r\n    //   });\r\n    //   // this.subscription = this.auth.currentAuthState.subscribe(\r\n    //   //   (authState) => (this.isLoggedIn = authState)\r\n    //   // );\r\n    //   if (\r\n    //     this.isLoggedIn === true &&\r\n    //     localStorage.getItem('TEAMGEN - Player #0')\r\n    //   ) {\r\n    //     this.loadPlayers('loadLocalStorage');\r\n    //   }\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.subscription.unsubscribe();\r\n  }\r\n\r\n  submitRoster() {\r\n    if (this.squadRules.find((rule) => rule.check === '❌')) {\r\n      alert('Leaderboards are currently unavailable. Please try again later.');\r\n      return false;\r\n    }\r\n    return true;\r\n    // let submittedRoster: SubmittedRoster;\r\n    // let user$ = this.auth.getUser();\r\n    // let user = await user$.first().toPromise();\r\n    // .subscribe((user) => {\r\n    //   if (user && user.email !== null) {\r\n    //     let nationName = '';\r\n    //     let tierName = '';\r\n    //     let id = this.rosterId;\r\n    //     if (this.nationOrTier.includes(' tier')) {\r\n    //       nationName = 'random';\r\n    //       tierName = this.nationOrTier.slice(0, 1);\r\n    //     } else {\r\n    //       nationName = this.nationOrTier;\r\n    //       tierName = this.getNation(\"tier\").tier || '';\r\n    //     }\r\n    //     let sortedRoster = this.pitchPlayers.concat(this.players);\r\n    //     sortedRoster = sortedRoster.sort((a, b) => {\r\n    //       let isAsc = false;\r\n    //       return compare(a.rating, b.rating, isAsc);\r\n    //     });\r\n    //     submittedRoster = {\r\n    //       user: user.email,\r\n    //       id: id,\r\n    //       tier: tierName,\r\n    //       nation: nationName,\r\n    //       startersRating: this.startersTotalRating,\r\n    //       squadRating: this.squadTotalRating,\r\n    //       formation: this.formation,\r\n    //       roster: {\r\n    //         sortedRoster: sortedRoster\r\n    //       }\r\n    //     }\r\n    //     this.afs.getSubmittedRosters().subscribe((data) => {\r\n    //       for (const roster of data) {\r\n    //         if (roster.payload.doc.id === this.rosterId) {\r\n    //           alert(\"Already submitted roster\");\r\n    //           return false\r\n    //         }\r\n    //       }\r\n    //\r\n    //       alert(\"Check leaderboards page to see your roster\");\r\n    //     });\r\n    //   } else {\r\n    //     throw new Error(\"User not signed in - login error\");\r\n    //   }\r\n    // });\r\n  }\r\n\r\n  infoOverlay() {\r\n    if (!this.instructionsOpen) {\r\n      this.instructionsOpen = true;\r\n    } else {\r\n      this.instructionsOpen = false;\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".desktop {\r\n    display: none;\r\n}\r\n\r\n@media screen and (min-width: 800px) {\r\n    .mobile {\r\n        display: none;\r\n    }\r\n    header.desktop {\r\n        display: block;\r\n    }\r\n    td.desktop,\r\n    th.desktop {\r\n        display: table-cell;\r\n    }\r\n    span.desktop {\r\n        display: block;\r\n    }\r\n}\r\n\r\n.positions-span:not(:last-child)::after {\r\n    content: \", \";\r\n}\r\n\r\n.main-heading {\r\n    display: flex;\r\n    flex-flow: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n    h2 {\r\n        font-size: 2rem;\r\n        margin: 0.83rem 0 0.83rem\r\n    }\r\n}\r\n\r\n.table-heading {\r\n    text-align: center;\r\n}\r\n\r\n.buttons-container {\r\n    display: flex;\r\n    justify-content: stretch;\r\n    align-items: center;\r\n    padding: 20px 0;\r\n    button {\r\n        height: 40px;\r\n        margin: 5px auto;\r\n        border-radius: 10px;\r\n        width: 95%;\r\n    }\r\n    & > button:first-child {\r\n        width: 90%;\r\n        @media screen and (min-width: 800px) {\r\n            width: 40px;\r\n        }\r\n    }\r\n    .team-generator-form {\r\n        text-transform: capitalize;\r\n        margin: 5px;\r\n        position: relative;\r\n        top: 7.5px;\r\n    }\r\n    .form-buttons {\r\n        display: flex;\r\n        align-items: center;\r\n    }\r\n    .load-data-buttons {\r\n        display: flex;\r\n        margin: 5px;\r\n        button {\r\n            margin: 0 1px;\r\n        }\r\n    }\r\n    .save-buttons {\r\n        display: flex;\r\n        align-items: center;\r\n        flex-flow: column;\r\n    }\r\n\r\n    .instructions {\r\n        display: flex;\r\n        flex: 1;\r\n        justify-content: space-around;\r\n        align-items: center;\r\n        @media screen and (max-width: 800px) {\r\n            flex-flow: column;\r\n            div.info {\r\n                width: 90%;\r\n                button {\r\n                    width: 100%;\r\n                }\r\n            }\r\n        }\r\n        & > div.info {\r\n            display: flex;\r\n            flex-flow: column;\r\n            align-items: center;\r\n\r\n        }\r\n        .rules {\r\n            h4.rules-heading  {\r\n                margin: 0;\r\n            }\r\n            ul {\r\n                margin: 0;\r\n            }\r\n            hr {\r\n                border: 1px solid #8080807c;\r\n                margin: 5px 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    @media screen and (max-width: 800px) {\r\n        flex-flow: column;\r\n        align-items: stretch;\r\n        justify-content: stretch;\r\n        margin: 0 0.5rem;\r\n        .load-data-buttons {\r\n            width: 90%;\r\n            button {\r\n                flex: 1;\r\n            }\r\n        }\r\n        button {\r\n            width: 90%;\r\n        }\r\n        .form-buttons,\r\n        .save-buttons {\r\n            flex-flow: column;\r\n        }\r\n    }\r\n\r\n}\r\n\r\n.info-overlay {\r\n    display: flex;\r\n    flex-flow: column;\r\n    align-items: flex-end;\r\n    background: #353535;\r\n    color: white;\r\n    padding: 15px;\r\n    box-shadow: 0px 3px 1px -2px rgb(0 0 0 / 20%), 0px 2px 2px 0px rgb(0 0 0 / 14%), 0px 1px 5px 0px rgb(0 0 0 / 12%);\r\n    width: 50%;\r\n    margin: 1rem;\r\n    @media screen and (max-width: 800px) {\r\n        width: 100%;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n.save-data-overlay {\r\n    background-color: #3F51B5;\r\n    border: 1px solid whitesmoke;\r\n    box-shadow: 0px 3px 1px -2px rgb(0 0 0 / 20%), 0px 2px 2px 0px rgb(0 0 0 / 14%), 0px 1px 5px 0px rgb(0 0 0 / 12%);\r\n    padding: 1.5rem;\r\n    float: right;\r\n    margin: 0 auto;\r\n    color: white;\r\n    display: flex;\r\n    flex-flow: column;\r\n    justify-content: center;\r\n    width: 100%;\r\n    @media screen and (min-width: 800px) {\r\n        width: 25rem;\r\n    }\r\n    input {\r\n        color: white;\r\n    }\r\n\r\n    .exit-container {\r\n        display: flex;\r\n        justify-content: flex-end;\r\n        button {\r\n            display: flex;\r\n            justify-content: center;\r\n            min-width: 2.5rem;\r\n            width: auto;\r\n            padding: 0;\r\n        }\r\n    }\r\n    .login-button {\r\n        background-color: white;\r\n    }\r\n}\r\n.save-data-overlay {\r\n    position: absolute;\r\n    top: 30%;\r\n    left: 30%;\r\n    transform: translate(-30%, -30%);\r\n    z-index: 6;\r\n    label {\r\n        color: #f5f5f5bd;\r\n        padding: 0.5rem 0;\r\n    }\r\n}\r\n.load-roster-overlay {\r\n    background-color: #3F51B5;\r\n    border: 1px solid whitesmoke;\r\n    box-shadow: 0px 3px 1px -2px rgb(0 0 0 / 20%), 0px 2px 2px 0px rgb(0 0 0 / 14%), 0px 1px 5px 0px rgb(0 0 0 / 12%);\r\n    padding: 1.5rem;\r\n    margin: 0;\r\n    color: white;\r\n    display: flex;\r\n    flex-flow: column;\r\n    align-items: center;\r\n    li {\r\n        list-style: none;\r\n        margin-bottom: 1rem;\r\n        width: 100%;\r\n        button {\r\n            width: 100%;\r\n        }\r\n    }\r\n    li:last-child {\r\n        margin-bottom: 0;\r\n    }\r\n}\r\n\r\n\r\n\r\n.page-container {\r\n    position: relative;\r\n    display: flex;\r\n    flex-flow: column;\r\n}\r\n\r\n\r\n\r\n.display-container {\r\n    margin: 0 1rem;\r\n    position: relative;\r\n    h2 {\r\n        text-align: center;\r\n    }\r\n\r\n    table {\r\n        margin-bottom: 5rem;\r\n    }\r\n    .position-table {\r\n        margin: 1.5rem auto;\r\n        .positions {\r\n            display: flex;\r\n            flex-flow: row wrap;\r\n            justify-content: center;\r\n            margin: 0;\r\n            // border: 1px solid black;\r\n            li {\r\n                display: flex;\r\n                flex-flow: column;\r\n                // padding: 0.25rem;\r\n                // margin: 1rem;\r\n                width: 3rem;\r\n                // border: 1px solid black;\r\n                border-right: none;\r\n\r\n                span {\r\n                    display: flex;\r\n                    justify-content: center;\r\n                    align-items: center;\r\n                    padding: 0.5rem;\r\n                    border: 1px solid black;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n.player-table {\r\n    font-size: clamp(0.5rem, 2.5vw, 1rem);\r\n    width: 100%;\r\n    .player-row {\r\n        td {\r\n            .capitalize {\r\n                text-transform: capitalize;\r\n            }\r\n            padding: 0.2rem;\r\n            div {\r\n                display: inline-flex;\r\n                align-items: center;\r\n            }\r\n            div > * {\r\n                margin: 0.2rem;\r\n            }\r\n            img {\r\n                max-width: 1.75rem;\r\n                @media screen and (max-width: 800px) {\r\n                    max-width: 2rem;\r\n                }\r\n                // border: 1px solid black;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n.formation {\r\n    text-align: center;\r\n    z-index: 5;\r\n    font-size: 0.7rem;\r\n    background-color: #424242;\r\n    padding: 10px;\r\n    border-radius: 5px;\r\n    line-height: normal;\r\n    color: #ebebeb;\r\n    position: absolute;\r\n    top: 0;\r\n    right: 0;\r\n    transform: translate(-2%, 10%);\r\n}\r\n\r\n.tactics-container {\r\n    display: flex;\r\n    flex-flow: column;\r\n    width: 100%;\r\n    @media screen and (min-width: 800px) {\r\n        flex-flow: row;\r\n    }\r\n    .lineup-container {\r\n        flex: 1;\r\n        font-size: clamp(0.5rem, 2.5vw, 1rem);\r\n        h2{\r\n            width: 100%;\r\n            text-align: center;\r\n        }\r\n        @media screen and (min-width: 800px) {\r\n            margin: 0 0 0 0.25rem;\r\n            font-size: clamp(0.5rem, 1vw, 1rem);\r\n            h2 {\r\n                margin: 0 auto 1rem;\r\n            }\r\n        }\r\n        .bench-container,\r\n        .starters-container {\r\n            width: 100%;\r\n            .row-container {\r\n                display: table-row;\r\n            }\r\n            .player-row {\r\n                cursor: grab;\r\n                width: 100%;\r\n            }\r\n            .player-row:active {\r\n                cursor: grabbing;\r\n            }\r\n        }\r\n    }\r\n    .pitch-container {\r\n        background: #2D7D32;\r\n        margin: 20px auto;\r\n        height: 100vh;\r\n        width: 100%;\r\n        position: relative;\r\n        display: flex;\r\n        align-items: center;\r\n        @media screen and (min-width: 800px) {\r\n            width: 75%;\r\n            max-width: 60vw;\r\n            margin: 0;\r\n            position: sticky;\r\n            top: 0;\r\n        }\r\n\r\n        .reset-button {\r\n            position: absolute;\r\n            display: flex;\r\n            justify-content: center;\r\n            line-height: 10px;\r\n            padding: 5px;\r\n            top: 10%;\r\n            right: 2.15%;\r\n            z-index: 4;\r\n            max-width: 100px;\r\n            font-size: 0.75rem;\r\n            @media screen and (min-width: 800px) {\r\n                font-size: 0.85rem;\r\n                padding: 10px;\r\n            }\r\n        }\r\n        .starters-total-rating,\r\n        .squad-total-rating {\r\n            display: flex;\r\n            flex-flow: column;\r\n            color: white;\r\n            background-color: #424242;\r\n            padding: 3px 6px;\r\n            width: 20vw;\r\n            text-align: center;\r\n            border-radius: 5px;\r\n            position: absolute;\r\n            z-index: 4;\r\n            font-size: 0.7rem;\r\n            left: 0;\r\n            transform: translate(10%, -10%);\r\n            @media screen and (min-width: 800px) {\r\n                font-size: 0.9rem;\r\n                padding: 10px;\r\n                max-width: 20%;\r\n                left: 2.5%;\r\n            }\r\n            .stars {\r\n                display: inline-block;\r\n                font-size: 1rem;\r\n                font-family: Times;\r\n                line-height: 1;\r\n                @media screen and (max-width: 800px) {font-size: 0.8rem;}\r\n                &::before {\r\n                    content: '★★★★★';\r\n                    letter-spacing: 3px;\r\n                    color: transparent;\r\n                }\r\n            }\r\n        }\r\n        .starters-total-rating {\r\n            top: 2.5%;\r\n            .stars {\r\n                &::before {\r\n                    background: linear-gradient(90deg,\r\n                        var(--star-background) var(--starter-rating),\r\n                        var(--star-color) var(--starter-rating)\r\n                    );\r\n                    background-clip: text;\r\n                }\r\n\r\n            }\r\n        }\r\n        .squad-total-rating {\r\n            top: 12.5%;\r\n            .stars {\r\n                &::before {\r\n                    background: linear-gradient(90deg,\r\n                        var(--star-background) var(--squad-rating),\r\n                        var(--star-color) var(--squad-rating)\r\n                    );\r\n                    background-clip: text;\r\n                }\r\n            }\r\n        }\r\n        .pitch-borders {\r\n            position: relative;\r\n            height: 98%;\r\n            width: 98%;\r\n            margin: 0.5rem auto;\r\n            // padding: 10px;\r\n            border: 1px solid white;\r\n            z-index: 2;\r\n            display: flex;\r\n            flex-flow: column;\r\n            justify-content: space-between;\r\n            align-items: center;\r\n            .pitch-divs {\r\n                background-color: #2D7D32;\r\n                border: 1px solid white;\r\n            }\r\n            .goal-box-bottom {\r\n                z-index: 2;\r\n                height: 7.5rem;\r\n                width: 40%;\r\n                border-bottom: none;\r\n            }\r\n            .goal-box-top {\r\n                z-index: 2;\r\n                height: 7.5rem;\r\n                width: 40%;\r\n                border-top: none;\r\n            }\r\n            .goal-box-circle-top {\r\n                z-index: 1;\r\n                position: absolute;\r\n                width: 15%;\r\n                height: 20%;\r\n                border-radius: 0 0 150px 150px;\r\n            }\r\n            .goal-box-circle-bottom {\r\n                z-index: 1;\r\n                position: absolute;\r\n                bottom: 0;\r\n                width: 15%;\r\n                height: 20%;\r\n                border-radius: 150px 150px 0 0;\r\n            }\r\n            .half-line {\r\n                position: absolute;\r\n                border-bottom: none;\r\n                bottom: 50%;\r\n                width: 100%;\r\n            }\r\n            .pitch-dot {\r\n                z-index: 2;\r\n                position: absolute;\r\n                bottom: 49.9%;\r\n                height: 4px;\r\n                width: 4px;\r\n                border-radius: 50%;\r\n                background-color: white;\r\n            }\r\n            .pitch-circle {\r\n                position: absolute;\r\n                bottom: 41.75%;\r\n                height: 7rem;\r\n                width: 7rem;\r\n                border-radius: 50%;\r\n            }\r\n        }\r\n        .pitch-grid{\r\n            z-index: 3;\r\n            position: absolute;\r\n            top: 0;\r\n            width: 100%;\r\n            height: 100%;\r\n            display: grid;\r\n            grid-template-rows: repeat(6, 1fr);\r\n            grid-template-columns: repeat(7, 1fr);\r\n            gap: 1px 5px;\r\n            justify-items: center;\r\n            align-items: center;\r\n            padding: 0 0.5rem 0;\r\n            @media screen and (max-width: 800px) {\r\n                // grid-template-columns: repeat(7, 11.5%);\r\n            }\r\n            .shirtIcon-img {\r\n                height: 6vh;\r\n                @media screen and (min-width: 800px) {\r\n                    height: 8vh;\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n}\r\n\r\n.empty {\r\n    visibility: hidden;\r\n}\r\n\r\n.active {\r\n    display: flex;\r\n    flex-flow: column;\r\n}\r\n.inactive {\r\n    display: none;\r\n}\r\n.player-face,\r\n.pitch-player-img {\r\n    width: 25%;\r\n}\r\n.active.pos-box {\r\n    width: clamp(3.5rem, 7.25vw, 11.5rem);\r\n    height: 9vh;\r\n    max-width: 100%;\r\n    max-height: 10.5rem;\r\n    background: rgba(144, 238, 144, .25);\r\n    border: 1px solid rgba(255, 255, 255, 0.5);\r\n    border-radius: 50% / 10%;\r\n    justify-content: center;\r\n    align-items: center;\r\n    @media screen and (max-width: 800px) {\r\n        width: clamp(2rem, 5vw, 11.5rem);\r\n    }\r\n}\r\n\r\n.active.player-box {\r\n    width: clamp(3.5rem, 7.25vw, 11.5rem);\r\n    height: 16.5vh;\r\n    padding: 10px 3.5px;\r\n    max-height: 10.5rem;\r\n    color: #353535;\r\n    border-radius: 50% / 10%;\r\n    justify-content: center;\r\n    align-items: center;\r\n    text-align: center;\r\n    cursor: grab;\r\n    @media screen and (max-width: 800px) {\r\n        height: 12vh;\r\n        width: clamp(2.5rem, 7.5vw, 10rem);\r\n    }\r\n    &.diamond {\r\n       background: linear-gradient(45deg, #f3f4ff, #68aeff);\r\n       background: linear-gradient(45deg, hsla(186, 100%, 69%, 1) 0%, hsla(217, 100%, 50%, 1) 100%);\r\n    }\r\n    &.platinum {\r\n        background: linear-gradient(45deg, #ffffff, #9fb0fc);\r\n    }\r\n    &.gold {\r\n        background: linear-gradient(45deg, #fff2a8, #e7d52c);\r\n    }\r\n    &.silver {\r\n        background: linear-gradient(45deg, #bbbbbb, #c0c0c0);\r\n        // background: #c0c0c0;\r\n    }\r\n    &.bronze {\r\n        background: linear-gradient(45deg, #e06513, #a73906);\r\n    }\r\n    &.brown {\r\n        background: linear-gradient(45deg #967260, #533729);\r\n    }\r\n\r\n    & > div {\r\n        // width: 100%;\r\n        // display: grid;\r\n        // grid-template-columns: 1fr fit-content(50%);\r\n        // gap: 3.5px 1.5px;\r\n        // align-items: center;\r\n        // justify-items: center;\r\n        // .pitch-player-info {\r\n        //     grid-column: 1;\r\n        //     font-size: 0.75rem;\r\n        //     line-height: normal;\r\n        //     &:first-of-type {\r\n        //         font-size: 1.25rem;\r\n        //     }\r\n        // }\r\n        // .pitch-player-img {\r\n        //     width: clamp(15px, 1.7vw, 30px);\r\n        //     grid-column: 1;\r\n        // }\r\n        // .player-name {\r\n        //     // font-size: 0.6rem;\r\n        //     grid-column: 2;\r\n        //     grid-row: 3 / 5;\r\n\r\n        // }\r\n        // .player-face {\r\n        //     grid-column: 2;\r\n        //     grid-row: 1 / 3;\r\n        //     width: 70%;\r\n        //     border-radius: 50%;\r\n        // }\r\n    // @media screen and (max-width: 800px) {\r\n    //     font-size: 0.6rem;\r\n    //     display: flex;\r\n    //     flex-flow: column;\r\n    //     gap: 1px;\r\n    //     .player-face {\r\n    //         display: none;\r\n    //     }\r\n    //     .pitch-player-info:first-of-type {\r\n    //         font-size: 0.7rem;\r\n    //     }\r\n    //     .pitch-player-info {\r\n    //         font-size: 0.45rem;\r\n    //     }\r\n    //     .player-name {\r\n    //         line-height: normal;\r\n    //     }\r\n    //     .pitch-player-img {\r\n    //         width: 1rem;\r\n    //     }\r\n    // }\r\n    }\r\n\r\n}\r\n\r\n\r\n.lineup-grid {\r\n    display: grid;\r\n    grid-template-columns: 1fr 5fr;\r\n    grid-template-rows: 3rem 1fr;\r\n    grid-template-areas:\r\n    \"lineup th\"\r\n    \"lineup player\"\r\n    ;\r\n    background: #424242;\r\n    color: white;\r\n    border-radius: 4px;\r\n    .players-container {\r\n        background: #424242;\r\n        color: white;\r\n    }\r\n    .lineup-headers {\r\n        display: flex;\r\n        justify-content: stretch;\r\n        grid-area: th;\r\n        margin: 0;\r\n        font-weight: bold;\r\n        height: 3rem;\r\n        li {\r\n            // border-bottom: 1px solid black;\r\n            // border-right: 1px solid black;\r\n            flex: 1;\r\n            display: flex;\r\n            align-items: center;\r\n            justify-content: center;\r\n            width: 25%;\r\n            padding: 0.25rem;\r\n        }\r\n        :last-child {\r\n            border-right: none;\r\n        }\r\n        .name-header {\r\n            width: 10vw;\r\n        }\r\n    }\r\n    .starters {\r\n        grid-area: player;\r\n    }\r\n    .bench-container,\r\n    .starters-container {\r\n        text-transform: capitalize;\r\n        border-bottom: none;\r\n        .player-row {\r\n            display: flex;\r\n            margin: 0;\r\n            height: 3rem;\r\n            justify-content: flex-start;\r\n            li {\r\n                display: flex;\r\n                justify-content: center;\r\n                align-items: center;\r\n                flex: 1;\r\n                padding: 0.25rem;\r\n                // border-right: 1px solid black;\r\n                // border-bottom: 1px solid black;\r\n            }\r\n            :last-child {\r\n                border-right: none;\r\n            }\r\n            .alt-positions {\r\n                flex-flow: wrap;\r\n            }\r\n        }\r\n    }\r\n\r\n    .lineup-spots {\r\n        margin: 0;\r\n        display: flex;\r\n        flex-flow: column;\r\n        grid-area: lineup;\r\n        ul {\r\n            margin: 0;\r\n        }\r\n        ul:first-child {\r\n            font-weight: bold;\r\n            border-top: none;\r\n        }\r\n        ul:not(:first-child) {\r\n            font-weight: 500;\r\n        }\r\n        ul li {\r\n            padding: 0 0.5rem;\r\n            height: 3rem;\r\n            border-top: 1px solid rgba(242, 242, 242, 0.25);\r\n            border-right: 1px solid rgba(242, 242, 242, 0.25);\r\n            display: flex;\r\n            justify-content: center;\r\n            align-items: center;\r\n        }\r\n    }\r\n}\r\n.expanded-info {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    max-width: 80vw;\r\n    flex-flow: wrap ;\r\n    span {\r\n        display: flex;\r\n        align-items: center;\r\n    }\r\n    span:last-child{\r\n        color: #f8f2cf;\r\n    }\r\n    span.expanded-names {\r\n        flex-flow: wrap;\r\n        span{\r\n\r\n            text-transform: none;\r\n        }\r\n        span:not(:last-child) {\r\n            margin-right: 0.5rem;\r\n        }\r\n    }\r\n\r\n    img {\r\n        max-width: 2rem;\r\n        margin: 1rem;\r\n    }\r\n}\r\n\r\n.nation-name-heading {\r\n    text-transform: capitalize;\r\n}\r\n\r\n.arrow-nav {\r\n    cursor: pointer;\r\n}\r\n\r\n.scroll-bar,\r\n.scroll-button {\r\n    display: none;\r\n}\r\n\r\n@media screen and (max-width: 800px) {\r\n    .scroll-button {\r\n        display: block;\r\n        background-color: #2ab7a9;\r\n        z-index: 11;\r\n        position: sticky;\r\n        top: 0;\r\n    }\r\n\r\n    .scroll-bar {\r\n        display: block;\r\n        position: sticky;\r\n        z-index: 10;\r\n        top: 0;\r\n        left: 18px;\r\n        height: 100vh;\r\n        width: 5px;\r\n        background-color: #00ff00;\r\n    }\r\n}\r\n\r\n\r\n// *** ANGULAR CDK DRAG & DROP classes ***\r\n// Do not move cdk drag classes inside other classes\r\n.cdk-drag-preview {\r\n    box-sizing: border-box;\r\n    color: #000000;\r\n    background-color: #d7d5d5;\r\n    border: 2px inset black;\r\n    border-radius: 4px;\r\n    box-shadow: 0 5px 5px -3px rgba(0, 0, 0, 0.2),\r\n        0 8px 10px 1px rgba(0, 0, 0, 0.14),\r\n        0 3px 14px 2px rgba(0, 0, 0, 0.12)\r\n    ;\r\n    padding: 1rem;\r\n    width: 8vw;\r\n    height: 10vh;\r\n    display: flex;\r\n    flex-flow: column;\r\n    align-items: center;\r\n    .shirtIcon-img {\r\n        height: 4vh;\r\n    }\r\n}\r\n.cdk-drag-animating {\r\n    transition: transform 250ms cubic-bezier(0, 0, 0.2, 1);\r\n}\r\n.cdk-drag-placeholder.lineup-drag-placeholder {\r\n    height: 100%;\r\n    width: 100%;\r\n    background: rgb(160, 160, 160);\r\n    color: #353535;\r\n    transition: transform 250ms cubic-bezier(0, 0, 0.2, 1);\r\n    border: 2px dashed white;\r\n}\r\n.info-paragraph li {\r\n    display: flex;\r\n    align-items: center;\r\n    div:last-child {\r\n        flex: 1;\r\n        display: inline-block;\r\n    }\r\n    .color-code {\r\n        display: inline-block;\r\n        width: 1rem;\r\n        height: 1rem;\r\n        margin-right: 1rem;\r\n    }\r\n}\r\n\r\n.natural {\r\n    background-color: #00ff00;\r\n}\r\n.accomplished {\r\n    background-color: #009700;\r\n}\r\n.competent {\r\n    background-color: #699424;\r\n}\r\n.unconvincing {\r\n    background-color: #888800;\r\n}\r\n.awkward {\r\n    background-color: #b36302;\r\n}\r\n.ineffectual {\r\n    background-color: #830000;\r\n}\r\n.natural-placeholder {\r\n    border: ridge 2px #00ff00;\r\n    background-color: #00ff00;\r\n    border-radius: 50% / 10%;\r\n}\r\n.accomplished-placeholder {\r\n    border: ridge 2px #009700;\r\n    background-color: #009700;\r\n    border-radius: 50% / 10%;\r\n}\r\n.competent-placeholder {\r\n    border: ridge 2px #699424;\r\n    background-color: #699424;\r\n    border-radius: 50% / 10%;\r\n}\r\n.unconvincing-placeholder {\r\n    border: ridge 2px #888800;\r\n    background-color: #888800;\r\n    border-radius: 50% / 10%;\r\n}\r\n.awkward-placeholder {\r\n    border: ridge 2px #b36302;\r\n    background-color: #b36302;\r\n    border-radius: 50% / 10%;\r\n}\r\n.ineffectual-placeholder {\r\n    border: ridge 2px #830000;\r\n    background-color: #830000;\r\n    border-radius: 50% / 10%;\r\n}\r\n\r\n.cdk-drag-placeholder.pitch-placeholder {\r\n    height: 100%;\r\n    width: 100%;\r\n\r\n}\r\n\r\n.cdk-drop-list-dragging, .cdk-drag-dragging {\r\n    cursor: grabbing;\r\n}\r\n\r\n.cdk-drop-list-receiving > div > div {\r\n        background: #f5f5f5;\r\n        height: 16.5vh;\r\n        border-radius: 50% / 10%;\r\n        display: grid;\r\n        grid-template-columns: 1fr fit-content(50%);\r\n        gap: 3.5px 1.5px;\r\n        align-items: center;\r\n        justify-items: center;\r\n        padding: 10px 3.5px;\r\n        max-height: 10.5rem;\r\n        color: #353535;\r\n        .pitch-player-info {\r\n            grid-column: 1;\r\n            font-size: 0.75rem;\r\n            line-height: normal;\r\n            &:first-of-type {\r\n                font-size: 1.25rem;\r\n            }\r\n        }\r\n        .pitch-player-img {\r\n            width: clamp(15px, 1.7vw, 30px);\r\n            grid-column: 1;\r\n        }\r\n        .player-name {\r\n            // font-size: 0.6rem;\r\n            grid-column: 2;\r\n            grid-row: 3 / 5;\r\n\r\n        }\r\n        .player-face {\r\n            grid-column: 2;\r\n            grid-row: 1 / 3;\r\n            width: 70%;\r\n\r\n        }\r\n    @media screen and (max-width: 800px) {\r\n        font-size: 0.5rem;\r\n        line-height: normal;\r\n        height: 12vh;\r\n        width: clamp(2.25rem, 7.5vw, 10rem);\r\n        display: flex;\r\n        flex-flow: column;\r\n        justify-content: space-between;\r\n        align-items: center;\r\n        .player-face {\r\n            display: none;\r\n        }\r\n        .pitch-player-img {\r\n            width: 0.8rem;\r\n        }\r\n        .pitch-player-info:first-of-type {\r\n            font-size: 0.75rem;\r\n        }\r\n    }\r\n}\r\n",
                    "styleUrl": "./home.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "afs",
                        "type": "FirestoreService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "auth",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 47,
                "jsdoctags": [
                    {
                        "name": "afs",
                        "type": "FirestoreService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "auth",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "HomeComponent-1",
            "templateData": "<!-- <div class=\"page-container\">\r\n  <app-build-roster></app-build-roster>\r\n  <div class=\"buttons-container\">\r\n    <button\r\n      class=\"save-button\"\r\n      type=\"button\"\r\n      (click)=\"submitRoster()\"\r\n      mat-raised-button\r\n      color=\"primary\"\r\n    >\r\n      Submit to Leaderboards\r\n    </button>\r\n    <div class=\"instructions\">\r\n      <div class=\"info\">\r\n        <button\r\n          mat-raised-button\r\n          type=\"button\"\r\n          color=\"accent\"\r\n          (click)=\"infoOverlay()\"\r\n          *ngIf=\"!instructionsOpen\"\r\n          cdkOverlayOrigin\r\n          #trigger=\"cdkOverlayOrigin\"\r\n        >\r\n          Instructions\r\n        </button>\r\n        <button\r\n          mat-raised-button\r\n          type=\"button\"\r\n          color=\"accent\"\r\n          (click)=\"infoOverlay()\"\r\n          *ngIf=\"instructionsOpen\"\r\n          cdkOverlayOrigin\r\n          #trigger=\"cdkOverlayOrigin\"\r\n        >\r\n          Close Instructions\r\n        </button>\r\n        <ng-template\r\n          cdkConnectedOverlay\r\n          [cdkConnectedOverlayOrigin]=\"trigger\"\r\n          [cdkConnectedOverlayOpen]=\"instructionsOpen\"\r\n        >\r\n          <div class=\"info-overlay\">\r\n            <div class=\"exit-container\">\r\n              <button mat-button (click)=\"infoOverlay()\">\r\n                <mat-icon>close</mat-icon>\r\n              </button>\r\n            </div>\r\n            <div class=\"info-paragraph\">\r\n              Drag and drop players from the bench to the pitch. Players'\r\n              ratings are adjusted based on their position on the pitch and\r\n              their familiarity. The overall rating of the first eleven is an\r\n              average of the player ratings with certain positions weighted more\r\n              than others. Full backs are weigted the lowest, while central\r\n              midfielders and strikers are weighted the highest.\r\n              <ul>\r\n                <li>\r\n                  <div class=\"color-code natural\"></div>\r\n                  <div>\r\n                    Highlighted in light green is the best position for a\r\n                    player.\r\n                  </div>\r\n                </li>\r\n                <li>\r\n                  <div class=\"color-code accomplished\"></div>\r\n                  <div>\r\n                    Highlighted in dark green is an alternate position (-3\r\n                    rating).\r\n                  </div>\r\n                </li>\r\n                <li>\r\n                  <div class=\"color-code competent\"></div>\r\n                  <div>\r\n                    Highlighted in green-yellow is a competent position (-6\r\n                    rating).\r\n                  </div>\r\n                </li>\r\n                <li>\r\n                  <div class=\"color-code unconvincing\"></div>\r\n                  <div>\r\n                    Highlighted in dark yellow is an unconvincing position (-12\r\n                    rating).\r\n                  </div>\r\n                </li>\r\n                <li>\r\n                  <div class=\"color-code awkward\"></div>\r\n                  <div>\r\n                    Highlighted in dark orange is an awkward position (-25\r\n                    rating).\r\n                  </div>\r\n                </li>\r\n                <li>\r\n                  <div class=\"color-code ineffectual\"></div>\r\n                  <div>\r\n                    Highlighted in dark red is an ineffectual position (set to\r\n                    20).\r\n                  </div>\r\n                </li>\r\n              </ul>\r\n            </div>\r\n          </div>\r\n        </ng-template>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <app-lineup></app-lineup>\r\n  <app-roster *ngIf=\"roster\" [roster]=\"roster\"></app-roster>\r\n</div> -->\r\n"
        },
        {
            "name": "KnockoutStageComponent",
            "id": "component-KnockoutStageComponent-134bb09c6c8b82884ef6d12bbf05adb51303e11af7d1e05573ec6298cfc51bf2a0b5308ae1ba2f780055abbb6ba55b43b5e9852e0345751aa16a32515d8d4b24",
            "file": "src/app/simulation/knockout-stage/knockout-stage.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-knockout-stage",
            "styleUrls": [
                "./knockout-stage.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./knockout-stage.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "originalOrder",
                    "defaultValue": "originalOrder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "screenWidth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "service",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SimulationService",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "tournament",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Tournament | null",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "getScreenSize",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'window:resize', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "openNationStats",
                    "args": [
                        {
                            "name": "nation",
                            "type": "GroupTeam | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "nation",
                            "type": "GroupTeam | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "window:resize",
                    "args": [],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37
                }
            ],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, HostListener } from '@angular/core';\r\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\r\nimport { originalOrder } from '@shared/utils';\r\nimport { GroupTeam } from 'app/models/nation.model';\r\nimport { Tournament } from 'app/simulation/simulation.model';\r\nimport { SimulationService } from 'app/simulation/simulation.service';\r\nimport { filter } from 'rxjs/operators';\r\n\r\n@UntilDestroy()\r\n@Component({\r\n  selector: 'app-knockout-stage',\r\n  templateUrl: './knockout-stage.component.html',\r\n  styleUrls: ['./knockout-stage.component.scss'],\r\n})\r\nexport class KnockoutStageComponent {\r\n  screenWidth: number;\r\n  service: SimulationService;\r\n  tournament: Tournament | null = null;\r\n  originalOrder = originalOrder;\r\n\r\n  constructor(service: SimulationService) {\r\n    this.service = service;\r\n    this.screenWidth = window.innerWidth;\r\n    this.getScreenSize();\r\n\r\n    service.tournament$\r\n      .pipe(\r\n        untilDestroyed(this),\r\n        filter(t => t?.bracket !== undefined)\r\n      )\r\n      .subscribe(t => {\r\n        this.tournament = t;\r\n      });\r\n  }\r\n\r\n  @HostListener('window:resize', ['$event'])\r\n  getScreenSize() {\r\n    this.screenWidth = window.innerWidth;\r\n  }\r\n\r\n  openNationStats(nation: GroupTeam | null) {\r\n    this.service.changeSelectedNation(nation);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'variables.scss';\r\n\r\n.bracket {\r\n  padding: 2rem 0;\r\n  width: 100%;\r\n  overflow-x: auto;\r\n  overflow-y: hidden;\r\n  scroll-snap-type: x mandatory;\r\n  height: auto;\r\n\r\n  .headings32 {\r\n    display: grid;\r\n    grid-template-columns: repeat(4, 1fr);\r\n    grid-gap: 1rem;\r\n    font-size: 2.25rem;\r\n\r\n    @media screen and (max-width: 1200px) {\r\n      grid-template-columns: repeat(4, 100%);\r\n      gap: 0;\r\n    }\r\n\r\n    li {\r\n      display: flex;\r\n      justify-content: center;\r\n\r\n      @media screen and (max-width: 1200px) {\r\n        margin: 0 2rem;\r\n      }\r\n    }\r\n  }\r\n\r\n  .headings48 {\r\n    display: grid;\r\n    grid-template-columns: repeat(5, 1fr);\r\n    grid-gap: 1rem;\r\n    font-size: 2.25rem;\r\n\r\n    @media screen and (max-width: 1600px) {\r\n      grid-template-columns: repeat(5, 100%);\r\n      gap: 0;\r\n    }\r\n\r\n    li {\r\n      display: flex;\r\n      justify-content: center;\r\n\r\n      @media screen and (max-width: 1600px) {\r\n        margin: 0 2rem;\r\n      }\r\n    }\r\n  }\r\n\r\n  .grid32 {\r\n    display: grid;\r\n    grid-template-columns: repeat(4, 1fr);\r\n    grid-template-rows: repeat(16, 3.5rem);\r\n    margin: 0rem 2rem;\r\n    font-size: 1.25rem;\r\n    gap: 1rem;\r\n\r\n    @media screen and (max-width: 1200px) {\r\n      grid-template-columns: repeat(4, 100%);\r\n      grid-template-rows: repeat(16, auto);\r\n      gap: 0;\r\n      margin: 0;\r\n    }\r\n\r\n    .round {\r\n      display: grid;\r\n      grid-row: span 16;\r\n      align-items: center;\r\n      scroll-snap-align: center;\r\n      position: relative;\r\n\r\n\r\n\r\n      @media screen and (max-width: 1200px) {\r\n        grid-row: span 16;\r\n      }\r\n\r\n      &:nth-child(2) {\r\n        grid-column: 2;\r\n\r\n        @media screen and (max-width: 1200px) {\r\n          grid-row: span 8;\r\n        }\r\n      }\r\n\r\n      &:nth-child(3) {\r\n        grid-column: 3;\r\n\r\n        @media screen and (max-width: 1200px) {\r\n          grid-row: span 4;\r\n        }\r\n      }\r\n\r\n      &:nth-child(4) {\r\n        grid-column: 4;\r\n        grid-row: 6 / 20;\r\n\r\n        @media screen and (max-width: 1200px) {\r\n          grid-row: span 8;\r\n        }\r\n      }\r\n\r\n      .match {\r\n        display: flex;\r\n        flex-flow: column;\r\n        justify-content: space-around;\r\n        margin: 10px 5px;\r\n        padding: 10px;\r\n        height: 7rem;\r\n\r\n        @media screen and (max-width: 1200px) {\r\n          margin: 1rem auto;\r\n          min-width: 70%;\r\n        }\r\n\r\n        h3 {\r\n          position: absolute;\r\n          font-size: 2.5rem;\r\n          display: flex;\r\n          justify-content: center;\r\n          width: 90%;\r\n\r\n          @media screen and (max-width: 1200px) {\r\n            width: 70%;\r\n          }\r\n\r\n          &.first {\r\n            top: 10%;\r\n\r\n            @media screen and (max-width: 1200px) {\r\n              top: 0;\r\n            }\r\n          }\r\n\r\n          &.second {\r\n            top: 60%;\r\n\r\n            @media screen and (max-width: 1200px) {\r\n              top: 50%;\r\n            }\r\n          }\r\n        }\r\n\r\n        .loser {\r\n          opacity: 0.5;\r\n        }\r\n\r\n        >div {\r\n          display: flex;\r\n          align-items: center;\r\n          justify-content: space-between;\r\n\r\n          .nation {\r\n            display: flex;\r\n            align-items: center;\r\n            justify-content: space-between;\r\n            cursor: pointer;\r\n\r\n            .nation-flag {\r\n              height: 2rem;\r\n              width: 2rem;\r\n            }\r\n            :not(:last-child) {\r\n              margin-right: 1rem;\r\n            }\r\n            .group-finish {\r\n              width: 1.5rem;\r\n            }\r\n          }\r\n\r\n          .score {\r\n            max-width: 5.5rem;\r\n\r\n            span:first-child {\r\n              margin-right: 5px;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  .grid48 {\r\n    display: grid;\r\n    grid-template-columns: repeat(5, 1fr);\r\n    grid-template-rows: repeat(32, 3.5rem);\r\n    margin: 0rem 2rem;\r\n    font-size: 1.25rem;\r\n    gap: 1rem;\r\n\r\n    @media screen and (max-width: 1600px) {\r\n      grid-template-columns: repeat(5, 100%);\r\n      grid-template-rows: repeat(32, auto);\r\n      gap: 0;\r\n      margin: 0;\r\n    }\r\n\r\n    .round {\r\n      display: grid;\r\n      grid-row: span 32;\r\n      align-items: center;\r\n      scroll-snap-align: center;\r\n      position: relative;\r\n\r\n      @media screen and (max-width: 1600px) {\r\n        grid-row: span 32;\r\n      }\r\n\r\n      &:nth-child(2) {\r\n        grid-column: 2;\r\n\r\n        @media screen and (max-width: 1600px) {\r\n          grid-row: span 16;\r\n        }\r\n      }\r\n\r\n      &:nth-child(3) {\r\n        grid-column: 3;\r\n\r\n        @media screen and (max-width: 1600px) {\r\n          grid-row: span 8;\r\n        }\r\n      }\r\n\r\n      &:nth-child(4) {\r\n        grid-column: 4;\r\n\r\n        @media screen and (max-width: 1600px) {\r\n          grid-row: span 4;\r\n        }\r\n      }\r\n      &:nth-child(5) {\r\n        grid-column: 5;\r\n        grid-row: 10 / 24;\r\n\r\n        @media screen and (max-width: 1600px) {\r\n          grid-row: span 16;\r\n        }\r\n      }\r\n\r\n      .match {\r\n        display: flex;\r\n        flex-flow: column;\r\n        justify-content: space-around;\r\n        margin: 10px 5px;\r\n        padding: 10px;\r\n        height: 7rem;\r\n\r\n        @media screen and (max-width: 1600px) {\r\n          margin: 1rem auto;\r\n          min-width: 70%;\r\n        }\r\n\r\n        h3 {\r\n          position: absolute;\r\n          font-size: 2.5rem;\r\n          display: flex;\r\n          justify-content: center;\r\n          width: 90%;\r\n\r\n          @media screen and (max-width: 1600px) {\r\n            width: 70%;\r\n          }\r\n\r\n          &.first {\r\n            top: 10%;\r\n\r\n            @media screen and (max-width: 1600px) {\r\n              top: 0;\r\n            }\r\n          }\r\n\r\n          &.second {\r\n            top: 60%;\r\n\r\n            @media screen and (max-width: 1600px) {\r\n              top: 50%;\r\n            }\r\n          }\r\n        }\r\n\r\n        .loser {\r\n          opacity: 0.5;\r\n        }\r\n\r\n        >div {\r\n          display: flex;\r\n          align-items: center;\r\n          justify-content: space-between;\r\n\r\n          .nation {\r\n            display: flex;\r\n            align-items: center;\r\n            justify-content: space-between;\r\n            cursor: pointer;\r\n\r\n            .nation-flag {\r\n              height: 2rem;\r\n              width: 2rem;\r\n            }\r\n            :not(:last-child) {\r\n              margin-right: 1rem;\r\n            }\r\n            .group-finish {\r\n              width: 1.5rem;\r\n            }\r\n          }\r\n\r\n          .score {\r\n            max-width: 5.5rem;\r\n\r\n            span:first-child {\r\n              margin-right: 5px;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n",
                    "styleUrl": "./knockout-stage.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "service",
                        "type": "SimulationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "service",
                        "type": "SimulationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"bracket bg-neutral\" *ngIf=\"tournament?.bracket && tournament\">\r\n  <ul class=\"text-neutral-content\" [ngClass]=\"tournament.bracket?.roundOf32 ? 'headings48' : 'headings32'\">\r\n    <li *ngIf=\"tournament.bracket?.roundOf32\">Round Of 32</li>\r\n    <li>Round of 16</li>\r\n    <li>Quarter Finals</li>\r\n    <li>Semi Finals</li>\r\n  </ul>\r\n  <div [ngClass]=\"tournament.bracket?.roundOf32 ? 'grid48' : 'grid32'\">\r\n    <!-- Each Round = Column in bracket | different styling in grid and round-->\r\n    <div class=\"round\" *ngFor=\"let round of tournament?.bracket | keyvalue: originalOrder\">\r\n      <!-- Each Match in Round = box in bracket | match is pretty much same styling except for screen size breakpoint-->\r\n      <div class=\"match bg-primary rounded\" *ngFor=\"let match of round.value; let i = index\">\r\n        <!-- If the final round - then give special headings for each match in same column | again same styling but diff breakpoint. | 1200px instead of 1600px-->\r\n        <h3 *ngIf=\"round.key === 'finals'\" class=\"text-neutral-content\" [ngClass]=\"i === 0 ? 'first' : 'second'\">\r\n          {{ i === 0 ? 'Finals' : '3rd Place' }}\r\n        </h3>\r\n        <!-- First Team in matchup | same except for `ngIf round.key === 16 instead of 32`-->\r\n        <div [ngClass]=\"match[2].loser.name === match[0].name ? 'text-primary-content/50' : 'text-primary-content'\">\r\n          <div (click)=\"openNationStats(match[0])\" class=\"nation\">\r\n            <span *ngIf=\"tournament.bracket?.roundOf32 ? round.key === 'roundOf32' : round.key === 'roundOf16'\" class=\"group-finish\">{{\r\n              match[0].groupFinish\r\n            }}</span>\r\n            <img class=\"nation-flag\" [src]=\"match[0].logo\" [alt]=\"match[0].name\" />\r\n            <span>\r\n              {{ screenWidth < 600 ? match[0].abbreviation.toLocaleUpperCase() : match[0].name }}\r\n              {{ screenWidth > 350 ? '[' + match[0].ranking + ']' : '' }}\r\n            </span>\r\n          </div>\r\n          <div class=\"score\">\r\n            <span\r\n              >{{ match[2].goalsFor }}\r\n              {{\r\n                match[2].isPenaltyWin && match[0].name === match[2].winner.name\r\n                  ? '(P)'\r\n                  : match[2].isEtWin && match[0].name === match[2].winner.name\r\n                    ? '(AET)'\r\n                    : ''\r\n              }}</span\r\n            >\r\n            <span>{{ match[0].name === match[2].winner.name ? '◀' : '' }}</span>\r\n          </div>\r\n        </div>\r\n        <div [ngClass]=\"match[2].loser.name === match[1].name ? 'text-primary-content/50' : 'text-primary-content'\">\r\n          <div (click)=\"openNationStats(match[1])\" class=\"nation\">\r\n            <span *ngIf=\"tournament.bracket?.roundOf32 ? round.key === 'roundOf32' : round.key === 'roundOf16'\" class=\"group-finish\">{{\r\n              match[1].groupFinish\r\n            }}</span>\r\n            <img class=\"nation-flag\" [src]=\"match[1].logo\" [alt]=\"match[1].name\" />\r\n            <span>\r\n              {{ screenWidth < 600 ? match[1].abbreviation.toLocaleUpperCase() : match[1].name }}\r\n              {{ screenWidth > 350 ? '[' + match[1].ranking + ']' : '' }}\r\n            </span>\r\n          </div>\r\n          <div class=\"score\">\r\n            <span\r\n              >{{ match[2].goalsAg }}\r\n              {{\r\n                match[2].isPenaltyWin && match[1].name === match[2].winner.name\r\n                  ? '(P)'\r\n                  : match[2].isEtWin && match[1].name === match[2].winner.name\r\n                    ? '(AET)'\r\n                    : ''\r\n              }}</span\r\n            >\r\n            <span>{{ match[1].name === match[2].winner.name ? '◀' : '' }}</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "LeaderboardComponent",
            "id": "component-LeaderboardComponent-129855ed56cd6c107549e5331cd00c42f6249cea57be3c93e4371a7ee5b8cbd640f3f72c039c245293d6008388402e5d76fde6a8ec60b5946115b4ab58e7b5e3",
            "file": "src/app/pages/leaderboard/leaderboard.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-leaderboard",
            "styleUrls": [
                "./leaderboard.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./leaderboard.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "allRosters",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Roster[]",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "aTierRosters",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Roster[]",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "bTierRosters",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Roster[]",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "cTierRosters",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Roster[]",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "dTierRosters",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Roster[]",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "eTierRosters",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Roster[]",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "fTierRosters",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Roster[]",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "gTierRosters",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Roster[]",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "headers",
                    "defaultValue": "[\r\n    '#',\r\n    'User',\r\n    'Squad Rating',\r\n    'Starters Rating',\r\n    'Nation',\r\n    'Formation',\r\n    'Best Player',\r\n    'Name',\r\n    'Rating',\r\n    'Position',\r\n    'Nationality',\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "hTierRosters",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Roster[]",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "isLoggedIn",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "iTierRosters",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Roster[]",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "jTierRosters",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Roster[]",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "organizedRosters",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Roster[][]",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "personalLeaderboards",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LeaderboardItem[] | null",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "service",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LeaderboardService",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "sTierRosters",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Roster[]",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "subscription",
                    "defaultValue": "new Subscription()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "worldLeaderboards",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LeaderboardItem[] | null",
                    "optional": false,
                    "description": "",
                    "line": 47
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\nimport { Roster } from 'app/models/roster.model';\r\nimport { AuthService } from '@core/services/auth.service';\r\nimport { FirestoreService } from '@core/services/firestore.service';\r\nimport { LeaderboardItem, LeaderboardService } from './leaderboard.service';\r\n\r\n@Component({\r\n  selector: 'app-leaderboard',\r\n  templateUrl: './leaderboard.component.html',\r\n  styleUrls: ['./leaderboard.component.scss'],\r\n})\r\nexport class LeaderboardComponent implements OnInit {\r\n  service: LeaderboardService;\r\n  allRosters: Roster[] = [];\r\n  organizedRosters: Roster[][] = [];\r\n\r\n  sTierRosters: Roster[] = [];\r\n  aTierRosters: Roster[] = [];\r\n  bTierRosters: Roster[] = [];\r\n  cTierRosters: Roster[] = [];\r\n  dTierRosters: Roster[] = [];\r\n  eTierRosters: Roster[] = [];\r\n  fTierRosters: Roster[] = [];\r\n  gTierRosters: Roster[] = [];\r\n  hTierRosters: Roster[] = [];\r\n  iTierRosters: Roster[] = [];\r\n  jTierRosters: Roster[] = [];\r\n\r\n  subscription: Subscription = new Subscription();\r\n  isLoggedIn = false;\r\n  headers = [\r\n    '#',\r\n    'User',\r\n    'Squad Rating',\r\n    'Starters Rating',\r\n    'Nation',\r\n    'Formation',\r\n    'Best Player',\r\n    'Name',\r\n    'Rating',\r\n    'Position',\r\n    'Nationality',\r\n  ];\r\n\r\n  personalLeaderboards: LeaderboardItem[] | null = null;\r\n  worldLeaderboards: LeaderboardItem[] | null = null;\r\n\r\n  constructor(private db: FirestoreService, private auth: AuthService, leaderboard: LeaderboardService) {\r\n    this.service = leaderboard;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    // this.subscription = this.auth.currentAuthState.subscribe(\r\n    //   (authState) => (this.isLoggedIn = authState)\r\n    // );\r\n    // for (let i = 0; i < 100; i++) {\r\n    //   const roster = localStorage.getItem(`Roster #${i}`) || null;\r\n    //   if (roster === null) {\r\n    //     break;\r\n    //   }\r\n    //   this.allRosters.push(JSON.parse(roster));\r\n    // }\r\n    // this.organizeLeaderboards();\r\n    const { worldLeaderboards, personalLeaderboards } = this.service.fetchTournamentLeaderboards();\r\n    this.personalLeaderboards = personalLeaderboards;\r\n    console.log(this.personalLeaderboards);\r\n    this.worldLeaderboards = worldLeaderboards;\r\n  }\r\n\r\n  // trackByItems(index: number, item: Roster) {\r\n  //   return item.id;\r\n  // }\r\n\r\n  // updateLeaderboards() {\r\n  //   this.db.getSubmittedRosters().subscribe((snapshot) => {\r\n\r\n  //     snapshot: for (const data of snapshot) {\r\n  //       if (this.allRosters.length === 0) {\r\n  //         this.allRosters.push({\r\n  //           ...data.payload.doc.data(),\r\n  //           id: data.payload.doc.id,\r\n  //         });\r\n  //         continue snapshot;\r\n  //       }\r\n  //       for (const roster of this.allRosters) {\r\n  //         if (roster.id === data.payload.doc.id) {\r\n  //           continue snapshot;\r\n  //         }\r\n  //       }\r\n  //       // console.log(data.payload.doc.id);\r\n  //       this.allRosters.push({\r\n  //         ...data.payload.doc.data(),\r\n  //         id: data.payload.doc.id,\r\n  //       });\r\n  //     }\r\n  //     let user = localStorage.getItem('user');\r\n  //     let players = [];\r\n  //     let pitchPlayers = [];\r\n\r\n  //     for (let i = 0; i < 60; i++) {\r\n  //       let playerString = localStorage.getItem(`TEAMGEN - Player #${i}`);\r\n  //       if (playerString !== null) {\r\n  //         players.push(playerString);\r\n  //       } else {\r\n  //         break;\r\n  //       }\r\n  //     }\r\n  //     for (let i = 0; i < 11; i++) {\r\n  //       let playerString = localStorage.getItem(\r\n  //         `TEAMGEN - Starting Player #${i + 1}`\r\n  //       );\r\n  //       if (playerString !== null) {\r\n  //         pitchPlayers.push(playerString);\r\n  //       }\r\n  //     }\r\n  //     localStorage.clear();\r\n  //     if (user !== null) {\r\n  //       localStorage.setItem('user', user);\r\n  //     }\r\n  //     for (let i = 0; i < players.length; i++) {\r\n  //       localStorage.setItem(`TEAMGEN - Player #${i}`, players[i]);\r\n  //     }\r\n  //     for (let i = 0; i < pitchPlayers.length; i++) {\r\n  //       localStorage.setItem(\r\n  //         `TEAMGEN - Starting Player #${i + 1}`,\r\n  //         pitchPlayers[i]\r\n  //       );\r\n  //     }\r\n  //     for (let i = 0; i < this.allRosters.length; i++) {\r\n  //       localStorage.setItem(\r\n  //         `Roster #${i}`,\r\n  //         JSON.stringify(this.allRosters[i])\r\n  //       );\r\n  //     }\r\n  //     console.log(this.allRosters, this.organizedRosters);\r\n  //     this.organizeLeaderboards();\r\n  //   });\r\n  // }\r\n\r\n  // organizeLeaderboards() {\r\n  //   this.organizedRosters = [];\r\n  //   this.sTierRosters = [];\r\n  //   this.aTierRosters = [];\r\n  //   this.bTierRosters = [];\r\n  //   this.cTierRosters = [];\r\n  //   this.dTierRosters = [];\r\n  //   this.eTierRosters = [];\r\n  //   this.fTierRosters = [];\r\n  //   this.gTierRosters = [];\r\n  //   this.hTierRosters = [];\r\n  //   this.iTierRosters = [];\r\n  //   this.jTierRosters = [];\r\n\r\n  //   this.allRosters.forEach((roster) => {\r\n  //     switch (roster.tier) {\r\n  //       case 's':\r\n  //         this.sTierRosters.push(roster);\r\n  //         break;\r\n  //       case 'a':\r\n  //         this.aTierRosters.push(roster);\r\n  //         break;\r\n  //       case 'b':\r\n  //         this.bTierRosters.push(roster);\r\n  //         break;\r\n  //       case 'c':\r\n  //         this.cTierRosters.push(roster);\r\n  //         break;\r\n  //       case 'd':\r\n  //         this.dTierRosters.push(roster);\r\n  //         break;\r\n  //       case 'e':\r\n  //         this.eTierRosters.push(roster);\r\n  //         break;\r\n  //       case 'f':\r\n  //         this.fTierRosters.push(roster);\r\n  //         break;\r\n  //       case 'g':\r\n  //         this.gTierRosters.push(roster);\r\n  //         break;\r\n  //       case 'h':\r\n  //         this.hTierRosters.push(roster);\r\n  //         break;\r\n  //       case 'i':\r\n  //         this.iTierRosters.push(roster);\r\n  //         break;\r\n  //       case 'j':\r\n  //         this.jTierRosters.push(roster);\r\n  //         break;\r\n  //       default:\r\n  //         throw new Error('No tier found on roster');\r\n  //     }\r\n  //   });\r\n  //   this.organizedRosters = [\r\n  //     this.sTierRosters,\r\n  //     this.aTierRosters,\r\n  //     this.bTierRosters,\r\n  //     this.cTierRosters,\r\n  //     this.dTierRosters,\r\n  //     this.eTierRosters,\r\n  //     this.fTierRosters,\r\n  //     this.gTierRosters,\r\n  //     this.hTierRosters,\r\n  //     this.iTierRosters,\r\n  //     this.jTierRosters,\r\n  //   ];\r\n  // }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'variables.scss';\r\n\r\n.leaderboards-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n\r\n  h2 {\r\n    font-size: 2rem;\r\n    text-align: center;\r\n    margin: 1.5rem 0;\r\n  }\r\n\r\n  h3 {\r\n    margin: 1.5rem 0;\r\n    text-align: center;\r\n  }\r\n\r\n  >div {\r\n    ul {\r\n      display: flex;\r\n      flex-flow: row wrap;\r\n      background-color: $primary;\r\n      color: white;\r\n      li {\r\n        display: flex;\r\n        flex-flow: column;\r\n        padding: 1.5rem 1rem;\r\n        max-width: 500px;\r\n        .index {\r\n          margin-bottom: 0.75rem;\r\n        }\r\n\r\n        >div {\r\n          display: flex;\r\n          // justify-content: space-between;\r\n          :first-child {\r\n            margin-right: 1rem;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// .stars {\r\n//     --star-color: #9e9e9e;\r\n//     display: inline-block;\r\n//     font-size: 0.8rem;\r\n//     font-family: Times;\r\n//     line-height: 1;\r\n//     &::after {\r\n//         content: '★★★★★';\r\n//         letter-spacing: 3px;\r\n//         color: transparent;\r\n//     }\r\n// }\r\n\r\n// .collection-container .attribute.starter-rating {\r\n//     display: flex;\r\n//     align-items: center;\r\n//     justify-content: space-evenly;\r\n//     .stars {\r\n//         &::after {\r\n//             background: linear-gradient(90deg,\r\n//                 var(--star-background) var(--starter-rating),\r\n//                 var(--star-color) var(--starter-rating)\r\n//             );\r\n//             background-clip: text;\r\n//         }\r\n\r\n//     }\r\n// }\r\n// .collection-container .attribute.squad-rating {\r\n//     display: flex;\r\n//     align-items: center;\r\n//     justify-content: space-evenly;\r\n//     .stars {\r\n//         &::after {\r\n//             background: linear-gradient(90deg,\r\n//                 var(--star-background) var(--squad-rating),\r\n//                 var(--star-color) var(--squad-rating)\r\n//             );\r\n//             background-clip: text;\r\n//         }\r\n//     }\r\n// }\r\n\r\n\r\n\r\n\r\n",
                    "styleUrl": "./leaderboard.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "db",
                        "type": "FirestoreService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "auth",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "leaderboard",
                        "type": "LeaderboardService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 47,
                "jsdoctags": [
                    {
                        "name": "db",
                        "type": "FirestoreService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "auth",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "leaderboard",
                        "type": "LeaderboardService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<!-- <div class=\"page-container\">\r\n  <h1>Leaderboards</h1>\r\n  <p *ngIf=\"!isLoggedIn\">You must login to see leaderboard</p>\r\n\r\n  <button *ngIf=\"isLoggedIn\" (click)=\"updateLeaderboards()\">Update Leaderboards</button>\r\n  <div *ngIf=\"isLoggedIn\" class=\"leaderboard-container\">\r\n    <ul *ngFor=\"let tierGroup of organizedRosters\" class=\"tier\">\r\n      <h2 *ngIf=\"tierGroup[0]\" class=\"tier-name\">\r\n        {{ tierGroup[0].tier || \"\" }} Tier\r\n      </h2>\r\n      <li *ngIf=\"tierGroup[0]\" class=\"collection-container\">\r\n        <div class=\"headings item\">\r\n          <div class=\"attribute\">#</div>\r\n          <div class=\"attribute\">User</div>\r\n          <div class=\"attribute\">Squad Rating</div>\r\n          <div class=\"attribute\">Starters Rating</div>\r\n          <div class=\"attribute\">Nation</div>\r\n          <div class=\"attribute\">Formation</div>\r\n          <div class=\"attribute best-player\">\r\n            <div class=\"main\">Best Player</div>\r\n            <div class=\"secondary\">\r\n              <div>Name</div>\r\n              <div>Rating</div>\r\n              <div>Position</div>\r\n              <div>Nationality</div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div\r\n          *ngFor=\"let roster of tierGroup; let j = index; trackBy: trackByItems\"\r\n          class=\"roster item\"\r\n        >\r\n          <div class=\"attribute\" [attr.data-name]=\"headers[0]\">{{ j + 1 }}</div>\r\n          <div class=\"attribute\" [attr.data-name]=\"headers[1]\">\r\n            {{ roster.user }}\r\n          </div>\r\n          <div class=\"attribute squad-rating\" [attr.data-name]=\"headers[2]\">\r\n            {{ roster.squadRating }}\r\n          </div>\r\n          <div class=\"attribute starter-rating\" [attr.data-name]=\"headers[3]\">\r\n            {{ roster.startersRating }}\r\n          </div>\r\n          <div class=\"attribute capitalize\" [attr.data-name]=\"headers[4]\">\r\n            {{ roster.nation }}\r\n          </div>\r\n          <div class=\"attribute\" [attr.data-name]=\"headers[5]\">\r\n            {{ roster.formation }}\r\n          </div>\r\n          <div class=\"attribute\" [attr.data-name]=\"headers[6]\">\r\n            <div class=\"secondary\">\r\n              <div>\r\n                {{ roster.roster.sortedRoster[0].firstInitial }}\r\n                {{ roster.roster.sortedRoster[0].singleLastName }}\r\n              </div>\r\n              <div>{{ roster.roster.sortedRoster[0].rating }}</div>\r\n              <div>\r\n                <span\r\n                  *ngFor=\"\r\n                    let pos of roster.roster.sortedRoster[0].mainPositions\r\n                  \"\r\n                  >{{ pos }}\r\n                </span>\r\n              </div>\r\n              <div>\r\n                <span class=\"capitalize\"\r\n                  >{{ roster.roster.sortedRoster[0].nationality }} </span\r\n                ><img\r\n                  [src]=\"roster.roster.sortedRoster[0].nationalityLogo\"\r\n                  [alt]=\"roster.roster.sortedRoster[0].nationality\"\r\n                  class=\"nation-flag\"\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n  </div>\r\n</div> -->\r\n<div class=\"leaderboards-container\">\r\n  <div class=\"personal-table\">\r\n    <h2>Personal Leaderboard</h2>\r\n    <h3>Most Recent Tournaments (Last 10)</h3>\r\n    <ul *ngIf=\"personalLeaderboards\" class=\"recent-table\">\r\n      <li *ngFor=\"let item of personalLeaderboards; let i = index\" class=\"tournament\">\r\n        <span class=\"index\">{{ i + 1 }}</span>\r\n        <div>\r\n          <span>Winner:</span><span>#{{ item.tournament.winnerRank }} {{ item.tournament.winner }}</span>\r\n        </div>\r\n        <div>\r\n          <span>Second Place:</span><span>{{ item.tournament.second }}</span>\r\n        </div>\r\n        <div>\r\n          <span>Third Place:</span><span> {{ item.tournament.third }}</span>\r\n        </div>\r\n        <div>\r\n          <span>Worst Rank:</span><span> #{{ item.tournament.worstRank }} {{ item.tournament.worst }}</span>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n  </div>\r\n  <div class=\"world-table\">\r\n    <h2>World Leaderboard</h2>\r\n    <table *ngIf=\"worldLeaderboards\"></table>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "LineupAccordionComponent",
            "id": "component-LineupAccordionComponent-6e51aefb4999cdb5732ade0daf3c3be1127d59e50244bbfda872f2c3ff53890bc2bb2c2703951f5c2269a77a2fad875bc74623442dbfc57c0361cfb0f28ae359",
            "file": "src/app/shared/components/lineup-accordion/lineup-accordion.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-lineup-accordion",
            "styleUrls": [
                "./lineup-accordion.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./lineup-accordion.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-lineup-accordion',\r\n  templateUrl: './lineup-accordion.component.html',\r\n  styleUrls: ['./lineup-accordion.component.scss'],\r\n})\r\nexport class LineupAccordionComponent {\r\n  constructor() {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./lineup-accordion.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "extends": [],
            "templateData": "<!-- <div class=\"lineup-container\">\r\n  <h2>Roster</h2>\r\n  <div class=\"lineup-grid\">\r\n    <ul class=\"lineup-headers\">\r\n      <li class=\"name-header\">Name</li>\r\n      <li>Position</li>\r\n      <li>Age</li>\r\n      <li>Rating</li>\r\n    </ul>\r\n    <div class=\"lineup-spots\">\r\n      <ul class=\"pitch-players\">\r\n        <li class=\"header\">Pos</li>\r\n        <li *ngFor=\"let pos of pitchPlayers\">{{ pos.pitchPosition }}</li>\r\n      </ul>\r\n      <ul class=\"bench\">\r\n        <li>Sub 1</li>\r\n        <li>Sub 2</li>\r\n        <li>Sub 3</li>\r\n        <li>Sub 4</li>\r\n        <li>Sub 5</li>\r\n        <li>Sub 6</li>\r\n        <li>Sub 7</li>\r\n        <li>Sub 8</li>\r\n        <li>Sub 9</li>\r\n        <li>Sub 10</li>\r\n        <li>Sub 11</li>\r\n        <li>Sub 12</li>\r\n      </ul>\r\n      <ul class=\"reserves\">\r\n        <li *ngFor=\"let player of players.slice(12); let i = index\">\r\n          {{ i + 24 }}\r\n        </li>\r\n      </ul>\r\n    </div>\r\n    <div class=\"players-container\">\r\n      <mat-accordion multi>\r\n        <div class=\"starters-container\">\r\n          <mat-expansion-panel *ngFor=\"let player of sortedPitchPlayers\">\r\n            <mat-expansion-panel-header>\r\n              <ul class=\"player-row\">\r\n                <li class=\"name-cell\">\r\n                  {{ player.firstInitial }}. {{ player.singleLastName }}\r\n                </li>\r\n                <li>\r\n                  <span\r\n                    *ngFor=\"let pos of player.mainPositions\"\r\n                    class=\"positions-span\"\r\n                    >{{ pos }}</span\r\n                  >\r\n                </li>\r\n                <li>{{ player.age }}</li>\r\n                <li>{{ player.rating }}</li>\r\n              </ul>\r\n            </mat-expansion-panel-header>\r\n            <p class=\"expanded-info\">\r\n              <span>Full Name:</span>\r\n              <span class=\"expanded-names\">\r\n                <span *ngFor=\"let firstName of player.firstNames\">\r\n                  {{ firstName }}\r\n                </span>\r\n                <span *ngFor=\"let lastName of player.lastNames\">\r\n                  {{ lastName }}\r\n                </span>\r\n              </span>\r\n            </p>\r\n            <p class=\"expanded-info\">\r\n              <span>Preferred Role/Duty:</span\r\n              ><span\r\n                >{{ player.preferredRole }} - {{ player.preferredDuty }}</span\r\n              >\r\n            </p>\r\n            <p class=\"expanded-info\">\r\n              <span>Other Positions:</span>\r\n              <span>\r\n                <span\r\n                  *ngFor=\"let pos of player.altPositions\"\r\n                  class=\"positions-span\"\r\n                  >{{ pos }}</span\r\n                >\r\n              </span>\r\n            </p>\r\n            <p class=\"expanded-info\">\r\n              <span>Club:</span>\r\n              <span>\r\n                <img [src]=\"player.clubLogo\" [alt]=\"player.club\" />\r\n                <span>{{ player.club }}</span>\r\n              </span>\r\n            </p>\r\n            <p class=\"expanded-info\">\r\n              <span>Nationality:</span>\r\n              <span>\r\n                <img [src]=\"player.nationalityLogo\" alt=\"\" />\r\n                <span>{{ player.nationality }}</span>\r\n              </span>\r\n            </p>\r\n            <p class=\"expanded-info\">\r\n              <span>Preferred Foot:</span><span>{{ player.foot }}</span>\r\n            </p>\r\n          </mat-expansion-panel>\r\n        </div>\r\n        <div\r\n          class=\"bench-container\"\r\n          cdkDropList\r\n          id=\"bench-players\"\r\n          [cdkDropListData]=\"players\"\r\n          (cdkDropListDropped)=\"drop($event)\"\r\n        >\r\n          <mat-expansion-panel\r\n            *ngFor=\"let player of players\"\r\n            cdkDrag\r\n            [cdkDragData]=\"player\"\r\n            (cdkDragStarted)=\"getPositionOutline($event)\"\r\n            (cdkDragReleased)=\"removeOutlineRelease($event)\"\r\n            (cdkDragDropped)=\"removeOutlineDrop($event)\"\r\n          >\r\n            <mat-expansion-panel-header>\r\n              <ul class=\"player-row\">\r\n                <li class=\"name-cell\">\r\n                  {{ player.firstInitial }}. {{ player.singleLastName }}\r\n                </li>\r\n                <li>\r\n                  <span\r\n                    *ngFor=\"let pos of player.mainPositions\"\r\n                    class=\"positions-span\"\r\n                    >{{ pos }}</span\r\n                  >\r\n                </li>\r\n                <li>{{ player.age }}</li>\r\n                <li>{{ player.rating }}</li>\r\n                <li *cdkDragPreview>\r\n                  <div class=\"player-preview\">\r\n                    {{ player.lastNames[0] }} {{ player.mainPositions[0] }}\r\n                    {{ player.rating }}\r\n                  </div>\r\n                </li>\r\n              </ul>\r\n            </mat-expansion-panel-header>\r\n            <p class=\"expanded-info\">\r\n              <span>Full Name:</span>\r\n              <span class=\"expanded-names\">\r\n                <span *ngFor=\"let firstName of player.firstNames\">\r\n                  {{ firstName }}\r\n                </span>\r\n                <span *ngFor=\"let lastName of player.lastNames\">\r\n                  {{ lastName }}\r\n                </span>\r\n              </span>\r\n            </p>\r\n            <p class=\"expanded-info\">\r\n              <span>Preferred Role/Duty:</span\r\n              ><span\r\n                >{{ player.preferredRole }} - {{ player.preferredDuty }}</span\r\n              >\r\n            </p>\r\n            <p class=\"expanded-info\">\r\n              <span>Other Positions:</span>\r\n              <span>\r\n                <span\r\n                  *ngFor=\"let pos of player.altPositions\"\r\n                  class=\"positions-span\"\r\n                  >{{ pos }}</span\r\n                >\r\n              </span>\r\n            </p>\r\n            <p class=\"expanded-info\">\r\n              <span>Club:</span>\r\n              <span>\r\n                <img [src]=\"player.clubLogo\" [alt]=\"player.club\" />\r\n                <span>{{ player.club }}</span>\r\n              </span>\r\n            </p>\r\n            <p class=\"expanded-info\">\r\n              <span>Nationality:</span>\r\n              <span>\r\n                <img [src]=\"player.nationalityLogo\" alt=\"\" />\r\n                <span>{{ player.nationality }}</span>\r\n              </span>\r\n            </p>\r\n            <p class=\"expanded-info\">\r\n              <span>Preferred Foot:</span><span>{{ player.foot }}</span>\r\n            </p>\r\n            <div class=\"lineup-drag-placeholder\" *cdkDragPlaceholder>\r\n              {{ player.firstInitial }}. {{ player.singleLastName }}\r\n              {{ player.rating }} {{ player.mainPositions[0] }}\r\n            </div>\r\n          </mat-expansion-panel>\r\n        </div>\r\n      </mat-accordion>\r\n    </div>\r\n  </div>\r\n</div> -->\r\n"
        },
        {
            "name": "LineupComponent",
            "id": "component-LineupComponent-ea66566a5b0e817cd3b4c5ea8a145455210cb3b952c67c85b97658bb8afbe61fb80c379e43956d19c0838377c54fda92aecec99e10044f8b563126fa7c42adfb",
            "file": "src/app/pages/lineup/lineup.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-lineup",
            "styleUrls": [
                "./lineup.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./lineup.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-lineup',\r\n  templateUrl: './lineup.component.html',\r\n  styleUrls: ['./lineup.component.scss'],\r\n})\r\nexport class LineupComponent {\r\n  constructor() {}\r\n\r\n  // checkFormation() {\r\n  //   const squad = this.pitchPlayers.concat(this.players.slice(0, 12));\r\n  //   let gkCount = 0;\r\n  //   let defCount = 0;\r\n  //   let midCount = 0;\r\n  //   let fwCount = 0;\r\n  //   let startMidCount = 0;\r\n  //   let startGkCount = 0;\r\n\r\n  //   let DMCount = 0;\r\n  //   let WBCount = 0;\r\n  //   let AMCCount = 0;\r\n  //   let AMRLCount = 0;\r\n  //   let MCCount = 0;\r\n  //   let MRLCount = 0;\r\n  //   let DFCount = 0;\r\n  //   let STCount = 0;\r\n\r\n  //   this.pitchPlayers.forEach((player) => {\r\n  //     if (player.pitchPosition?.includes('DM')) {\r\n  //       DMCount++;\r\n  //       startMidCount++;\r\n  //     } else if (player.pitchPosition?.slice(0, 1) === 'D') {\r\n  //       DFCount++;\r\n  //     } else if (player.pitchPosition?.includes('WB')) {\r\n  //       WBCount++;\r\n  //     } else if (player.pitchPosition?.includes('AMC')) {\r\n  //       AMCCount++;\r\n  //       startMidCount++;\r\n  //     } else if (player.pitchPosition?.includes('STC')) {\r\n  //       STCount++;\r\n  //     } else if (player.pitchPosition?.includes('AM')) {\r\n  //       AMRLCount++;\r\n  //     } else if (player.pitchPosition?.includes('MC')) {\r\n  //       MCCount++;\r\n  //     } else if (player.pitchPosition?.includes('M')) {\r\n  //       MRLCount++;\r\n  //     } else {\r\n  //       startGkCount++;\r\n  //     }\r\n  //   });\r\n\r\n  //   squad.forEach((player) => {\r\n  //     if (player.mainPositions.includes('GK')) {\r\n  //       gkCount++;\r\n  //     } else if (player.mainPositions.includes('B')) {\r\n  //       defCount++;\r\n  //     } else if (player.mainPositions.includes('M')) {\r\n  //       midCount++;\r\n  //     } else {\r\n  //       fwCount++;\r\n  //     }\r\n  //   });\r\n  //   // Formation\r\n\r\n  //   if (DFCount === 4) {\r\n  //     if (DMCount === 1) {\r\n  //       if (\r\n  //         MCCount === 1 &&\r\n  //         MRLCount === 1 &&\r\n  //         AMCCount === 1 &&\r\n  //         AMRLCount === 1 &&\r\n  //         STCount === 1\r\n  //       ) {\r\n  //         this.formation = '4-1-4-1 DM Asymmetric AM (R/L)';\r\n  //       } else if (MCCount === 2) {\r\n  //         if (AMCCount === 1 && STCount === 2) {\r\n  //           this.formation = '4-4-2 Diamond Narrow';\r\n  //         } else if (AMCCount === 2 && STCount === 1) {\r\n  //           this.formation = '4-1-2-3 DM AM Narrow';\r\n  //         } else if (AMRLCount === 2 && STCount === 1) {\r\n  //           this.formation = '4-1-4-1 DM Wide';\r\n  //         } else if (MRLCount === 2 && STCount === 1) {\r\n  //           this.formation = '4-1-4-1 DM';\r\n  //         } else if (STCount === 3) {\r\n  //           this.formation = '4-1-2-3 DM Narrow';\r\n  //         } else {\r\n  //           this.formation = 'N/A';\r\n  //         }\r\n  //       } else if (MCCount === 3) {\r\n  //         if (AMCCount === 1 && STCount === 1) {\r\n  //           this.formation = '4-1-3-1-1 DM AM Narrow';\r\n  //         } else if (STCount === 2) {\r\n  //           this.formation = '4-1-3-2 DM Narrow';\r\n  //         } else {\r\n  //           this.formation = 'N/A';\r\n  //         }\r\n  //       } else {\r\n  //         this.formation = 'N/A';\r\n  //       }\r\n  //     } else if (DMCount === 2) {\r\n  //       if (MCCount === 1 && AMRLCount === 2 && STCount === 1) {\r\n  //         this.formation = '4-2-1-3 DM Wide';\r\n  //       } else if (MCCount === 1 && MRLCount === 2 && STCount === 1) {\r\n  //         this.formation = '4-2-3-1 DM MC Wide';\r\n  //       } else if (MCCount === 3 && STCount === 1) {\r\n  //         this.formation = '4-2-3-1 DM';\r\n  //       } else if (MCCount === 2 && AMCCount === 1 && STCount === 1) {\r\n  //         this.formation = '4-2-2-1-1 DM AM Narrow';\r\n  //       } else if (MCCount === 2 && STCount === 2) {\r\n  //         this.formation = '4-2-2-2 DM Narrow';\r\n  //       } else if (AMCCount === 1 && AMRLCount === 2 && STCount === 1) {\r\n  //         this.formation = '4-2-3-1 DM AM Wide';\r\n  //       } else if (AMRLCount === 2 && STCount === 2) {\r\n  //         this.formation = '4-2-4 DM Wide';\r\n  //       } else if (AMCCount === 3 && STCount === 1) {\r\n  //         this.formation = '4-2-3-1 DM AM Narrow';\r\n  //       } else if (MRLCount === 2 && AMCCount === 1 && STCount === 1) {\r\n  //         this.formation = '4-4-1-1 2DM';\r\n  //       } else if (AMCCount === 2 && STCount === 2) {\r\n  //         this.formation = '4-2-2-2 DM AM Narrow';\r\n  //       } else if (MRLCount === 2 && STCount === 2) {\r\n  //         this.formation = '4-2-2-2 DM';\r\n  //       } else {\r\n  //         this.formation = 'N/A';\r\n  //       }\r\n  //     } else if (MCCount === 2) {\r\n  //       if (AMRLCount > 0) {\r\n  //         if (STCount === 2 && AMRLCount === 2) {\r\n  //           this.formation = '4-2-4 Wide';\r\n  //         } else if (AMCCount === 1 && AMRLCount === 2 && STCount === 1) {\r\n  //           this.formation = '4-2-3-1 Wide';\r\n  //         } else {\r\n  //           this.formation = 'N/A';\r\n  //         }\r\n  //       } else if (AMCCount > 0) {\r\n  //         if (STCount === 2 && AMCCount === 2) {\r\n  //           this.formation = '4-2-2-2 Narrow';\r\n  //         } else if (STCount === 1 && AMCCount === 3) {\r\n  //           this.formation = '4-2-3-1 Narrow';\r\n  //         } else {\r\n  //           this.formation = 'N/A';\r\n  //         }\r\n  //       } else {\r\n  //         this.formation = 'N/A';\r\n  //       }\r\n  //     } else if (MCCount === 3) {\r\n  //       if (AMRLCount === 2 && STCount === 1) {\r\n  //         this.formation = '4-3-3 Wide';\r\n  //       } else if (AMCCount === 1 && STCount === 2) {\r\n  //         this.formation = '4-3-1-2 Narrow';\r\n  //       } else if (AMCCount === 2 && STCount === 1) {\r\n  //         this.formation = '4-3-2-1 Narrow';\r\n  //       } else if (STCount === 3) {\r\n  //         this.formation = '4-3-3 Narrow';\r\n  //       } else {\r\n  //         this.formation = 'N/A';\r\n  //       }\r\n  //     } else if (MRLCount === 2) {\r\n  //       if (MCCount === 3 && STCount === 1) {\r\n  //         this.formation = '4-5-1';\r\n  //       } else if (MCCount === 2 && AMCCount === 1) {\r\n  //         this.formation = '4-4-1-1';\r\n  //       } else if (MCCount === 2 && STCount === 2) {\r\n  //         this.formation = '4-4-2';\r\n  //       } else {\r\n  //         this.formation = 'N/A';\r\n  //       }\r\n  //     } else {\r\n  //       this.formation = 'N/A';\r\n  //     }\r\n  //   } else if (DFCount === 3) {\r\n  //     if (WBCount === 2) {\r\n  //       if (DMCount === 1) {\r\n  //         if (MCCount === 3 && STCount === 1) {\r\n  //           this.formation = '5-1-3-1 DM WB';\r\n  //         } else if (STCount === 2 && MCCount === 2) {\r\n  //           this.formation = '5-1-2-2 DM WB';\r\n  //         } else if (MCCount === 2 && AMCCount === 1 && STCount === 1) {\r\n  //           this.formation = '5-4-1 Diamond WB';\r\n  //         } else {\r\n  //           this.formation = 'N/A';\r\n  //         }\r\n  //       } else if (DMCount === 2) {\r\n  //         if (MCCount === 2 && STCount === 1) {\r\n  //           this.formation = '3-4-2-1 DM';\r\n  //         } else if (AMRLCount === 2 && STCount === 1) {\r\n  //           this.formation = '3-4-3 DM Wide';\r\n  //         } else if (AMCCount === 2 && STCount === 1) {\r\n  //           this.formation = '3-4-2-1 DM AM';\r\n  //         } else if (MCCount === 1 && STCount === 2) {\r\n  //           this.formation = '5-2-1-2 DM WB';\r\n  //         } else if (AMCCount === 1 && STCount === 2) {\r\n  //           this.formation = '5-2-1-2 DM AM WB';\r\n  //         } else {\r\n  //           this.formation = 'N/A';\r\n  //         }\r\n  //       } else if (MCCount === 2) {\r\n  //         if (AMRLCount === 2 && STCount === 1) {\r\n  //           this.formation = '5-4-1 WB Wide';\r\n  //         } else if (AMCCount === 2 && STCount === 1) {\r\n  //           this.formation = '5-2-2-1 WB';\r\n  //         } else if (AMCCount === 1 && STCount === 2) {\r\n  //           this.formation = '5-2-1-2 WB';\r\n  //         } else {\r\n  //           this.formation = 'N/A';\r\n  //         }\r\n  //       } else if (MCCount === 3) {\r\n  //         if (STCount === 2) {\r\n  //           this.formation = '5-3-2 WB';\r\n  //         } else if (AMCCount === 1 && STCount === 1) {\r\n  //           this.formation = '5-3-1-1 WB';\r\n  //         } else {\r\n  //           this.formation = 'N/A';\r\n  //         }\r\n  //       } else {\r\n  //         this.formation = 'N/A';\r\n  //       }\r\n  //     } else if (MRLCount === 2) {\r\n  //       if (DMCount === 2 && AMCCount === 2 && STCount === 1) {\r\n  //         this.formation = '3-4-2-1 DM AM MRL';\r\n  //       }\r\n  //     } else {\r\n  //       this.formation = 'N/A';\r\n  //     }\r\n  //   } else {\r\n  //     this.formation = 'N/A';\r\n  //   }\r\n\r\n  //   // const formObj = {\r\n  //   //   def: DFCount,\r\n  //   //   dm: DMCount,\r\n  //   //   wb: WBCount,\r\n  //   //   mc: MCCount,\r\n  //   //   mrl: MRLCount,\r\n  //   //   amc: AMCCount,\r\n  //   //   amrl: AMRLCount,\r\n  //   //   st: STCount,\r\n  //   // };\r\n  //   // this.calcChemistry(formObj);\r\n  //   const count = [\r\n  //     gkCount,\r\n  //     defCount,\r\n  //     midCount,\r\n  //     fwCount,\r\n  //     startGkCount,\r\n  //     DFCount,\r\n  //     startMidCount,\r\n  //     STCount,\r\n  //   ];\r\n  //   return this.checkSquadRules(count);\r\n  // }\r\n\r\n  // getPositionBox(box: PositionBox) {\r\n  //   return box.class;\r\n  // }\r\n\r\n  // getPlayerClass(b: PositionBox) {\r\n  //   const box = b;\r\n  //   const posNum = parseInt(box.class.slice(-2), 10);\r\n  //   // if posBox is a playable position\r\n  //   if (!Number.isNaN(posNum)) {\r\n  //     this.pitchPositions.forEach((pos) => {\r\n  //       const player = this.pitchPlayers.find(\r\n  //         (p) => p.pitchPosition === pos.position\r\n  //       );\r\n  //       if (player)\r\n  //         if (player.mainPositions.includes(pos.playerPosition)) {\r\n  //           // if main position (natural ~ lightest green ~ 0 change)\r\n  //           player.pitchRating = player.rating;\r\n  //         }\r\n  //         // else if alt position (accomplished ~ darker green)\r\n  //         else if (player.altPositions.includes(pos.playerPosition)) {\r\n  //           player.pitchRating = player.rating - 3;\r\n  //         }\r\n  //         // add another section for playable positions (new property: competent ~ dark yellow-green ~ -6 change)\r\n  //         else if (player.competentPositions.includes(pos.playerPosition)) {\r\n  //           player.pitchRating = player.rating - 6;\r\n  //         }\r\n  //         // add another section for playable positions (new property: unconvincing ~ dark yellow ~ -12 change)\r\n  //         else if (player.unconvincingPositions.includes(pos.playerPosition)) {\r\n  //           player.pitchRating = player.rating - 12;\r\n  //         }\r\n  //         // else if gk position but not gk or else if outfield position but gk (ineffectual ~ red)\r\n  //         else if (\r\n  //           (pos.playerPosition === 'GK' &&\r\n  //             !player.mainPositions.includes('GK')) ||\r\n  //           (pos.playerPosition !== 'GK' && player.mainPositions.includes('GK'))\r\n  //         ) {\r\n  //           player.pitchRating = 20;\r\n  //         }\r\n  //         // any other position (awkward ~ dark orange ~ -25 change)\r\n  //         else {\r\n  //           player.pitchRating = player.rating - 25;\r\n  //         }\r\n  //     });\r\n  //     const player = this.pitchPlayers.find((p) =>\r\n  //       this.pitchPositions.find(\r\n  //         (_pos, i) => p.pitchPositionIndex === i && p.pitchRating !== undefined\r\n  //       )\r\n  //     );\r\n  //     if (typeof player !== 'undefined' && player?.pitchRating) {\r\n  //       box.playerClass = 'active player-box';\r\n  //       if (player.pitchRating > 81) {\r\n  //         box.playerClass += ' diamond';\r\n  //       } else if (player.pitchRating > 75) {\r\n  //         box.playerClass += ' platinum';\r\n  //       } else if (player.pitchRating > 69) {\r\n  //         box.playerClass += ' gold';\r\n  //       } else if (player.pitchRating > 61) {\r\n  //         box.playerClass += ' silver';\r\n  //       } else if (player.pitchRating > 54) {\r\n  //         box.playerClass += ' bronze';\r\n  //       } else {\r\n  //         box.playerClass += ' brown';\r\n  //       }\r\n  //       box.pitchPlayer = player;\r\n  //       return box.playerClass;\r\n  //     }\r\n\r\n  //     box.playerClass = 'inactive player-box';\r\n  //     box.pitchPlayer = undefined;\r\n  //     return box.playerClass;\r\n  //   }\r\n  //   return box.playerClass;\r\n  // }\r\n\r\n  // getPosBoxClass(b: PositionBox) {\r\n  //   const box = b;\r\n  //   const pos = parseInt(box.class.slice(-2), 10);\r\n  //   // if posBox is a playable position\r\n  //   if (!Number.isNaN(pos)) {\r\n  //     // for each of the current pitch players\r\n  //     if (\r\n  //       this.pitchPlayers.find((player) => player.pitchPositionIndex === pos)\r\n  //     ) {\r\n  //       box.posBoxClass = 'inactive pos-box';\r\n  //     }\r\n  //   }\r\n  //   return box.posBoxClass;\r\n  // }\r\n\r\n  // drop(event: CdkDragDrop<Player[]>) {\r\n  //   const newPlayerIndex = event.previousIndex;\r\n  //   let newPlayer = event.previousContainer.data[newPlayerIndex];\r\n  //   const positionIndex = parseInt(\r\n  //     event.container.element.nativeElement.classList[1],\r\n  //     10\r\n  //   );\r\n\r\n  //   if (event.previousContainer === event.container) {\r\n  //     // if moving within same container\r\n  //     moveItemInArray(\r\n  //       event.container.data,\r\n  //       event.previousIndex,\r\n  //       event.currentIndex\r\n  //     );\r\n  //   } else if (event.previousContainer.id === 'bench-players') {\r\n  //     // if moving from bench container and to the pitch\r\n  //     // Check for 11 players in starting lineup and no player swap\r\n  //     if (\r\n  //       this.pitchPlayers.length === 11 &&\r\n  //       event.container.element.nativeElement.innerText === ''\r\n  //     ) {\r\n  //       alert('You can only have 11 players starting.');\r\n  //       return false;\r\n  //     }\r\n  //     newPlayer.pitchPositionIndex = positionIndex;\r\n  //     switch (positionIndex) {\r\n  //       case 0:\r\n  //         newPlayer.pitchPosition = 'GK';\r\n  //         break;\r\n  //       case 1:\r\n  //         newPlayer.pitchPosition = 'DR';\r\n  //         break;\r\n  //       case 2:\r\n  //         newPlayer.pitchPosition = 'DCR';\r\n  //         break;\r\n  //       case 3:\r\n  //         newPlayer.pitchPosition = 'DC';\r\n  //         break;\r\n  //       case 4:\r\n  //         newPlayer.pitchPosition = 'DCL';\r\n  //         break;\r\n  //       case 5:\r\n  //         newPlayer.pitchPosition = 'DL';\r\n  //         break;\r\n  //       case 6:\r\n  //         newPlayer.pitchPosition = 'WBR';\r\n  //         break;\r\n  //       case 7:\r\n  //         newPlayer.pitchPosition = 'DMR';\r\n  //         break;\r\n  //       case 8:\r\n  //         newPlayer.pitchPosition = 'DMC';\r\n  //         break;\r\n  //       case 9:\r\n  //         newPlayer.pitchPosition = 'DML';\r\n  //         break;\r\n  //       case 10:\r\n  //         newPlayer.pitchPosition = 'WBL';\r\n  //         break;\r\n  //       case 11:\r\n  //         newPlayer.pitchPosition = 'MR';\r\n  //         break;\r\n  //       case 12:\r\n  //         newPlayer.pitchPosition = 'MCR';\r\n  //         break;\r\n  //       case 13:\r\n  //         newPlayer.pitchPosition = 'MC';\r\n  //         break;\r\n  //       case 14:\r\n  //         newPlayer.pitchPosition = 'MCL';\r\n  //         break;\r\n  //       case 15:\r\n  //         newPlayer.pitchPosition = 'ML';\r\n  //         break;\r\n  //       case 16:\r\n  //         newPlayer.pitchPosition = 'AMR';\r\n  //         break;\r\n  //       case 17:\r\n  //         newPlayer.pitchPosition = 'AMCR';\r\n  //         break;\r\n  //       case 18:\r\n  //         newPlayer.pitchPosition = 'AMC';\r\n  //         break;\r\n  //       case 19:\r\n  //         newPlayer.pitchPosition = 'AMCL';\r\n  //         break;\r\n  //       case 20:\r\n  //         newPlayer.pitchPosition = 'AML';\r\n  //         break;\r\n  //       case 21:\r\n  //         newPlayer.pitchPosition = 'STCR';\r\n  //         break;\r\n  //       case 22:\r\n  //         newPlayer.pitchPosition = 'STC';\r\n  //         break;\r\n  //       case 23:\r\n  //         newPlayer.pitchPosition = 'STCL';\r\n  //         break;\r\n  //       default:\r\n  //         console.log('Error in drop() function');\r\n  //         break;\r\n  //     }\r\n\r\n  //     // if swapping a player\r\n  //     if (event.container.element.nativeElement.innerText !== '') {\r\n  //       for (let i = 0; i < this.pitchPlayers.length; i++) {\r\n  //         if (this.pitchPlayers[i].pitchPosition === newPlayer.pitchPosition) {\r\n  //           const oldPlayer = this.pitchPlayers[i];\r\n  //           oldPlayer.pitchPosition = undefined;\r\n  //           oldPlayer.pitchPositionIndex = undefined;\r\n  //           this.pitchPlayers.splice(i, 1);\r\n  //           this.players.splice(newPlayerIndex, 1, oldPlayer);\r\n  //         }\r\n  //       }\r\n  //     } else {\r\n  //       this.players.splice(newPlayerIndex, 1);\r\n  //     }\r\n  //     this.pitchPlayers.push(newPlayer);\r\n  //     const el = event.container.element.nativeElement;\r\n  //     // el.children[0].className = \"active player-box\";\r\n  //     el.children[1].className = 'inactive pos-box';\r\n  //   }\r\n  //   // Else if the player is moved to the bench\r\n  //   else if (event.container.id === 'bench-players') {\r\n  //     const el = event.previousContainer.element.nativeElement;\r\n\r\n  //     for (let i = 0; i < this.pitchPlayers.length; i++) {\r\n  //       if (\r\n  //         parseInt(el.classList[1], 10) ===\r\n  //         this.pitchPlayers[i].pitchPositionIndex\r\n  //       ) {\r\n  //         const prevIndex = i;\r\n  //         transferArrayItem(\r\n  //           event.previousContainer.data,\r\n  //           event.container.data,\r\n  //           prevIndex,\r\n  //           event.currentIndex\r\n  //         );\r\n  //         const movingPlayer: Player = event.container.data[event.currentIndex];\r\n  //         movingPlayer.pitchPosition = undefined;\r\n  //         movingPlayer.pitchPositionIndex = undefined;\r\n  //       }\r\n  //     }\r\n  //     el.children[0].className = 'inactive player-box';\r\n  //     el.children[1].className = 'active pos-box';\r\n  //   }\r\n  //   // Else if the player is moved to another pitch position\r\n  //   else if (\r\n  //     event.previousContainer.id !== 'bench-players' &&\r\n  //     event.container.id !== 'bench-players'\r\n  //   ) {\r\n  //     newPlayer = event.item.data.pitchPlayer;\r\n  //     const el = event.container.element.nativeElement;\r\n  //     const prevEl = event.previousContainer.element.nativeElement;\r\n  //     // if swapping a player\r\n  //     if (event.container.element.nativeElement.innerText !== '') {\r\n  //       for (let i = 0; i < this.pitchPlayers.length; i++) {\r\n  //         if (\r\n  //           this.pitchPlayers[i].pitchPositionIndex ===\r\n  //           parseInt(event.container.element.nativeElement.classList[1], 10)\r\n  //         ) {\r\n  //           const oldPlayer = this.pitchPlayers[i];\r\n  //           oldPlayer.pitchPosition = newPlayer.pitchPosition;\r\n  //           oldPlayer.pitchPositionIndex = newPlayer.pitchPositionIndex;\r\n  //         }\r\n  //       }\r\n  //     } else {\r\n  //       prevEl.children[1].className = 'active pos-box';\r\n  //     }\r\n  //     newPlayer.pitchPositionIndex = positionIndex;\r\n  //     el.children[1].className = 'inactive pos-box';\r\n  //     switch (positionIndex) {\r\n  //       case 0:\r\n  //         newPlayer.pitchPosition = 'GK';\r\n  //         break;\r\n  //       case 1:\r\n  //         newPlayer.pitchPosition = 'DR';\r\n  //         break;\r\n  //       case 2:\r\n  //         newPlayer.pitchPosition = 'DCR';\r\n  //         break;\r\n  //       case 3:\r\n  //         newPlayer.pitchPosition = 'DC';\r\n  //         break;\r\n  //       case 4:\r\n  //         newPlayer.pitchPosition = 'DCL';\r\n  //         break;\r\n  //       case 5:\r\n  //         newPlayer.pitchPosition = 'DL';\r\n  //         break;\r\n  //       case 6:\r\n  //         newPlayer.pitchPosition = 'WBR';\r\n  //         break;\r\n  //       case 7:\r\n  //         newPlayer.pitchPosition = 'DMR';\r\n  //         break;\r\n  //       case 8:\r\n  //         newPlayer.pitchPosition = 'DMC';\r\n  //         break;\r\n  //       case 9:\r\n  //         newPlayer.pitchPosition = 'DML';\r\n  //         break;\r\n  //       case 10:\r\n  //         newPlayer.pitchPosition = 'WBL';\r\n  //         break;\r\n  //       case 11:\r\n  //         newPlayer.pitchPosition = 'MR';\r\n  //         break;\r\n  //       case 12:\r\n  //         newPlayer.pitchPosition = 'MCR';\r\n  //         break;\r\n  //       case 13:\r\n  //         newPlayer.pitchPosition = 'MC';\r\n  //         break;\r\n  //       case 14:\r\n  //         newPlayer.pitchPosition = 'MCL';\r\n  //         break;\r\n  //       case 15:\r\n  //         newPlayer.pitchPosition = 'ML';\r\n  //         break;\r\n  //       case 16:\r\n  //         newPlayer.pitchPosition = 'AMR';\r\n  //         break;\r\n  //       case 17:\r\n  //         newPlayer.pitchPosition = 'AMCR';\r\n  //         break;\r\n  //       case 18:\r\n  //         newPlayer.pitchPosition = 'AMC';\r\n  //         break;\r\n  //       case 19:\r\n  //         newPlayer.pitchPosition = 'AMCL';\r\n  //         break;\r\n  //       case 20:\r\n  //         newPlayer.pitchPosition = 'AML';\r\n  //         break;\r\n  //       case 21:\r\n  //         newPlayer.pitchPosition = 'STCR';\r\n  //         break;\r\n  //       case 22:\r\n  //         newPlayer.pitchPosition = 'STC';\r\n  //         break;\r\n  //       case 23:\r\n  //         newPlayer.pitchPosition = 'STCL';\r\n  //         break;\r\n  //       default:\r\n  //         console.log('Error in drop() function');\r\n  //         break;\r\n  //     }\r\n  //   }\r\n  //   window.setTimeout(() => {\r\n  //     // starter/squad rating calculation\r\n  //     this.startersTotalRating = 0;\r\n  //     const ratingArr = [];\r\n  //     this.pitchPlayers.forEach((p) => {\r\n  //       if (p.pitchRating) {\r\n  //         ratingArr.push(p.pitchRating);\r\n  //       }\r\n  //     });\r\n\r\n  //     this.calcStartersRating();\r\n\r\n  //     this.squadTotalRating = 0;\r\n  //     for (let i = 0; i < 12; i++) {\r\n  //       ratingArr.push(this.players[i].rating);\r\n  //     }\r\n\r\n  //     this.squadTotalRating = calcSumRating(ratingArr);\r\n  //     checkStars(this.startersTotalRating, this.squadTotalRating);\r\n\r\n  //     // sortedData\r\n  //     this.sortedData = this.pitchPlayers.concat(this.players);\r\n  //     if (this.pitchPlayers.length > 1) {\r\n  //       this.sortedPitchPlayers = this.pitchPlayers.sort((a, b) => {\r\n  //         if (\r\n  //           a.pitchPositionIndex !== undefined &&\r\n  //           b.pitchPositionIndex !== undefined\r\n  //         ) {\r\n  //           if (a.pitchPositionIndex < b.pitchPositionIndex) {\r\n  //             return -1;\r\n  //           }\r\n  //           if (a.pitchPositionIndex > b.pitchPositionIndex) {\r\n  //             return 1;\r\n  //           }\r\n  //         }\r\n  //         return 0;\r\n  //       });\r\n  //     } else if (this.pitchPlayers.length > 0) {\r\n  //       this.sortedPitchPlayers = this.pitchPlayers;\r\n  //     }\r\n\r\n  //     // backupPositionChecker\r\n  //     if (this.pitchPlayers.length === 11) {\r\n  //       this.getBackupPositions();\r\n  //     } else {\r\n  //       this.squadRules[7].check = '❌';\r\n  //     }\r\n  //   }, 250);\r\n  // }\r\n\r\n  // getPositionOutline(event: CdkDragStart) {\r\n  //   const player: Player = event.source.data.pitchPlayer || event.source.data;\r\n  //   // Add a placeholder element in origin\r\n\r\n  //   // Get the displayName for the current player\r\n\r\n  //   if (player.singleLastName.length < 8) {\r\n  //     player.displayName = player.singleLastName;\r\n  //   } else {\r\n  //     [player.displayName] = player.firstNames;\r\n  //   }\r\n\r\n  //   // // Grab the current positions for the dragged player\r\n\r\n  //   const mainPosArr = player.mainPositions;\r\n  //   const altPosArr = player.altPositions;\r\n  //   const compPosArr = player.competentPositions;\r\n  //   const unPosArr = player.unconvincingPositions;\r\n  //   const limeArr = [];\r\n  //   const darkGreenArr = [];\r\n  //   const yellowGreenArr = [];\r\n  //   const orangeArr = [];\r\n\r\n  //   for (let i = 0; i < this.pitchPositions.length; i++) {\r\n  //     if (mainPosArr.includes(this.pitchPositions[i].playerPosition)) {\r\n  //       // For each main position\r\n  //       for (let j = 0; j < mainPosArr.length; j++) {\r\n  //         // if the player's main position matches the playerPosition\r\n  //         if (mainPosArr[j] === this.pitchPositions[i].playerPosition) {\r\n  //           // push taht position to the array\r\n  //           limeArr.push(this.pitchPositions[i].position);\r\n  //         }\r\n  //       }\r\n  //     } else if (altPosArr.includes(this.pitchPositions[i].playerPosition)) {\r\n  //       // For each alt position\r\n  //       for (let j = 0; j < altPosArr.length; j++) {\r\n  //         // if the player's alt position matches the playerPosition\r\n  //         if (altPosArr[j] === this.pitchPositions[i].playerPosition) {\r\n  //           // push that position to the array\r\n  //           darkGreenArr.push(this.pitchPositions[i].position);\r\n  //         }\r\n  //       }\r\n  //     } else if (compPosArr.includes(this.pitchPositions[i].playerPosition)) {\r\n  //       // for each competent position\r\n  //       for (let j = 0; j < compPosArr.length; j++) {\r\n  //         // if the player's alt position matches the playerPosition\r\n  //         if (compPosArr[j] === this.pitchPositions[i].playerPosition) {\r\n  //           // push that position to the array\r\n  //           yellowGreenArr.push(this.pitchPositions[i].position);\r\n  //         }\r\n  //       }\r\n  //     } else if (unPosArr.includes(this.pitchPositions[i].playerPosition)) {\r\n  //       // for each unconvincing position\r\n  //       for (let j = 0; j < unPosArr.length; j++) {\r\n  //         // if the player's alt position matches the playerPosition\r\n  //         if (unPosArr[j] === this.pitchPositions[i].playerPosition) {\r\n  //           // push that position to the array\r\n  //           orangeArr.push(this.pitchPositions[i].position);\r\n  //         }\r\n  //       }\r\n  //     }\r\n  //   }\r\n\r\n  //   // For each playing position\r\n  //   for (let i = 0; i < this.pitchPositions.length; i++) {\r\n  //     // and for each position box\r\n  //     for (let j = 0; j < this.positionBoxes.length; j++) {\r\n  //       // get the number from the position box class if possible\r\n  //       const boxNum = parseInt(this.positionBoxes[j].class.slice(-2), 10);\r\n  //       // if there is a number in the class, it must be a playable position\r\n  //       if (!Number.isNaN(boxNum)) {\r\n  //         // If the pitchPosition index correlates with the box index, it's the same position\r\n  //         if (this.pitchPositions[i].boxIndex === j) {\r\n  //           // If this position correlates with the green array\r\n  //           if (limeArr.includes(this.pitchPositions[i].position)) {\r\n  //             this.positionBoxes[j].class += ' natural-placeholder';\r\n  //           }\r\n  //           // Else if this position correlates with the yellow array\r\n  //           else if (darkGreenArr.includes(this.pitchPositions[i].position)) {\r\n  //             this.positionBoxes[j].class += ' accomplished-placeholder';\r\n  //           } else if (\r\n  //             yellowGreenArr.includes(this.pitchPositions[i].position)\r\n  //           ) {\r\n  //             this.positionBoxes[j].class += ' competent-placeholder';\r\n  //           } else if (orangeArr.includes(this.pitchPositions[i].position)) {\r\n  //             this.positionBoxes[j].class += ' unconvincing-placeholder';\r\n  //           } else if (\r\n  //             (mainPosArr.includes('GK') &&\r\n  //               this.pitchPositions[i].position !== 'GK') ||\r\n  //             (!mainPosArr.includes('GK') &&\r\n  //               this.pitchPositions[i].position === 'GK')\r\n  //           ) {\r\n  //             this.positionBoxes[j].class += ' ineffectual-placeholder';\r\n  //           }\r\n  //           // Else the position is red\r\n  //           else {\r\n  //             this.positionBoxes[j].class += ' awkward-placeholder';\r\n  //           }\r\n  //         }\r\n  //       }\r\n  //     }\r\n  //   }\r\n  // }\r\n\r\n  // removeOutlineDrop(event: CdkDragDrop<Player>) {\r\n  //   this.positionBoxes.map((box) => {\r\n  //     const outlineClass = box.class.split(' ')[2];\r\n  //     switch (outlineClass) {\r\n  //       case 'natural-placeholder':\r\n  //       case 'awkward-placeholder':\r\n  //         return {\r\n  //           ...box,\r\n  //           class: box.class.slice(0, -20),\r\n  //         };\r\n  //       case 'accomplished-placeholder':\r\n  //       case 'unconvincing-placeholder':\r\n  //         return {\r\n  //           ...box,\r\n  //           class: box.class.slice(0, -25),\r\n  //         };\r\n  //       case 'competent-placeholder':\r\n  //         return {\r\n  //           ...box,\r\n  //           class: box.class.slice(0, -22),\r\n  //         };\r\n  //       case 'ineffectual-placeholder':\r\n  //         return {\r\n  //           ...box,\r\n  //           class: box.class.slice(0, -24),\r\n  //         };\r\n  //       default:\r\n  //         return box;\r\n  //     }\r\n  //   });\r\n  // }\r\n\r\n  // removeOutlineRelease(event: CdkDragRelease) {\r\n  //   this.positionBoxes.map((box) => {\r\n  //     const outlineClass = box.class.split(' ')[2];\r\n  //     switch (outlineClass) {\r\n  //       case 'natural-placeholder':\r\n  //       case 'awkward-placeholder':\r\n  //         return {\r\n  //           ...box,\r\n  //           class: box.class.slice(0, -20),\r\n  //         };\r\n  //       case 'accomplished-placeholder':\r\n  //       case 'unconvincing-placeholder':\r\n  //         return {\r\n  //           ...box,\r\n  //           class: box.class.slice(0, -25),\r\n  //         };\r\n  //       case 'competent-placeholder':\r\n  //         return {\r\n  //           ...box,\r\n  //           class: box.class.slice(0, -22),\r\n  //         };\r\n  //       case 'ineffectual-placeholder':\r\n  //         return {\r\n  //           ...box,\r\n  //           class: box.class.slice(0, -24),\r\n  //         };\r\n  //       default:\r\n  //         return box;\r\n  //     }\r\n  //   });\r\n  // }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./lineup.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "extends": [],
            "templateData": "<app-squad-rules></app-squad-rules>\r\n<div class=\"tactics-container\" cdkDropListGroup>\r\n  <app-pitch-view></app-pitch-view>\r\n  <app-lineup-accordion></app-lineup-accordion>\r\n</div>\r\n"
        },
        {
            "name": "LoginComponent",
            "id": "component-LoginComponent-691edda9641d6fbb78d9af7fb98c06b136ccf823dfc61575f2fadf322ced059a2c8ab574db8e0ec0613407ffa5fe5fbeb40324609ce3391ca20e3b74e3ed83f1",
            "file": "src/app/pages/login/login.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-login",
            "styleUrls": [
                "./login.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./login.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "auth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AuthService",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "email",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "password",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User | null",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "user$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "loginWithGoogle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "loginWithPassword",
                    "args": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { AuthService } from '@core/services/auth.service';\r\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\r\nimport { User } from '@core/services/firestore.model';\r\nimport { Router } from '@angular/router';\r\n\r\n@UntilDestroy()\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.scss'],\r\n})\r\nexport class LoginComponent {\r\n  email = '';\r\n  password = '';\r\n  user$;\r\n  user: User | null = null;\r\n\r\n  constructor(\r\n    public auth: AuthService,\r\n    private router: Router\r\n  ) {\r\n    this.user$ = auth.user$;\r\n    this.user$.pipe(untilDestroyed(this)).subscribe(u => {\r\n      console.log(u?.uid);\r\n      this.user = u;\r\n      if (this.user !== null) {\r\n        router.navigate(['/simulation']);\r\n      }\r\n    });\r\n  }\r\n\r\n  loginWithPassword(email: string, password: string) {\r\n    this.auth.login(email, password);\r\n  }\r\n\r\n  loginWithGoogle() {\r\n    this.auth.googleSignin();\r\n  }\r\n\r\n  logout() {\r\n    this.auth.signOut();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".basic-login {\r\n  width: clamp(300px, 90%, 600px);\r\n  margin: 2rem auto;\r\n  height: 100vh;\r\n  display: flex;\r\n  justify-content: flex-start;\r\n  flex-flow: column;\r\n\r\n  input, button {\r\n    margin-top: 1rem;\r\n    height: 3rem;\r\n  }\r\n\r\n  input {\r\n    font-size: 1.25rem;\r\n    padding: 5px;\r\n  }\r\n\r\n  button {\r\n    font-size: 1.25rem;\r\n    text-transform: uppercase;\r\n  }\r\n\r\n}\r\n",
                    "styleUrl": "./login.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "auth",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "auth",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"basic-login\">\r\n  <input type=\"email\" [(ngModel)]=\"email\" placeholder=\"Email\" />\r\n  <input type=\"password\" [(ngModel)]=\"password\" placeholder=\"Password\" />\r\n  <button (click)=\"loginWithPassword(email, password)\" class=\"btn btn-primary\">Login</button>\r\n</div>\r\n"
        },
        {
            "name": "NationDialogComponent",
            "id": "component-NationDialogComponent-8125b1bfebd08bdd9efd4fde50b164dfc11d9926e5e9af96015347445975a859607ef4f7fab3f3d9f673f7a056abc144cd3083d8ac38da6e889d688b96ae2730",
            "file": "src/app/shared/components/nation-dialog/nation-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-nation-dialog",
            "styleUrls": [
                "./nation-dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./nation-dialog.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "getDisplayRating",
                    "defaultValue": "getDisplayRating",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "isApp",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "nation",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GroupTeam | null",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "originalOrder",
                    "defaultValue": "originalOrder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "rounds",
                    "defaultValue": "['Round of 16', 'Quarter Finals', 'Semi Finals', 'Finals / Third Place Match']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "screenWidth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "service",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SimulationService",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "stages",
                    "defaultValue": "[\r\n    {\r\n      heading: 'Qualifiers',\r\n      prop: 'qualifiers',\r\n    },\r\n    {\r\n      heading: 'Group Stage',\r\n      prop: 'group',\r\n    },\r\n    {\r\n      heading: 'Knockout Stage',\r\n      prop: 'bracket',\r\n    },\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "tournament",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Tournament | null",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "calcGrade",
                    "args": [
                        {
                            "name": "nation",
                            "type": "GroupTeam",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "rankingIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "literal type",
                    "typeParameters": [],
                    "line": 130,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "nation",
                            "type": "GroupTeam",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "rankingIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "changeSelectedNation",
                    "args": [
                        {
                            "name": "nation",
                            "type": "GroupTeam",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "nation",
                            "type": "GroupTeam",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCoachRating",
                    "args": [
                        {
                            "name": "rating",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 183,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "rating",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getNationReportCard",
                    "args": [
                        {
                            "name": "team",
                            "type": "GroupTeam",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "team",
                            "type": "GroupTeam",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getScreenSize",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'window:resize', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "window:resize",
                    "args": [],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 61
                }
            ],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, HostListener, OnInit } from '@angular/core';\r\nimport { GroupTeam } from 'app/models/nation.model';\r\nimport { originalOrder } from '@shared/utils';\r\nimport { RegionName, Tournament } from 'app/simulation/simulation.model';\r\nimport { findTeamInTournament, getDisplayRating, getGradeStyle, getGradeSummary } from 'app/simulation/simulation.utils';\r\nimport { SimulationService } from 'app/simulation/simulation.service';\r\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\r\nimport { combineLatest } from 'rxjs';\r\n\r\n@UntilDestroy()\r\n@Component({\r\n  selector: 'app-nation-dialog',\r\n  templateUrl: './nation-dialog.component.html',\r\n  styleUrls: ['./nation-dialog.component.scss'],\r\n})\r\nexport class NationDialogComponent implements OnInit {\r\n  service: SimulationService;\r\n  isApp = false;\r\n  nation: GroupTeam | null = null;\r\n  tournament: Tournament | null = null;\r\n  screenWidth: number;\r\n  originalOrder = originalOrder;\r\n  getDisplayRating = getDisplayRating;\r\n\r\n  rounds = ['Round of 16', 'Quarter Finals', 'Semi Finals', 'Finals / Third Place Match'];\r\n  stages = [\r\n    {\r\n      heading: 'Qualifiers',\r\n      prop: 'qualifiers',\r\n    },\r\n    {\r\n      heading: 'Group Stage',\r\n      prop: 'group',\r\n    },\r\n    {\r\n      heading: 'Knockout Stage',\r\n      prop: 'bracket',\r\n    },\r\n  ];\r\n\r\n  constructor(service: SimulationService) {\r\n    this.screenWidth = window.innerWidth;\r\n    this.getScreenSize();\r\n    this.service = service;\r\n    this.isApp = service.checkForApp();\r\n\r\n    service.tournament$.pipe(untilDestroyed(this)).subscribe(t => (this.tournament = t));\r\n\r\n    combineLatest([service.tournament$, service.selectedNation$])\r\n      .pipe(untilDestroyed(this))\r\n      .subscribe(([tournament, nation]) => {\r\n        this.tournament = tournament;\r\n        this.nation = nation;\r\n        if (nation && !nation.reportCard.grade && tournament?.groupWinners) {\r\n          this.getNationReportCard(nation);\r\n        }\r\n      });\r\n  }\r\n\r\n  @HostListener('window:resize', ['$event'])\r\n  getScreenSize() {\r\n    this.screenWidth = window.innerWidth;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.rounds = this.tournament?.bracket?.roundOf32\r\n      ? ['Round of 32', 'Round of 16', 'Quarter Finals', 'Semi Finals', 'Finals / Third Place Match']\r\n      : ['Round of 16', 'Quarter Finals', 'Semi Finals', 'Finals / Third Place Match'];\r\n  }\r\n\r\n  changeSelectedNation(nation?: GroupTeam) {\r\n    if (nation === this.nation || !this.tournament?.groups) {\r\n      return;\r\n    }\r\n    const nationWithStats = this.tournament.groups.flat().find(a => a.name === nation?.name);\r\n    if (nationWithStats) {\r\n      this.service.changeSelectedNation(nationWithStats);\r\n      return;\r\n    } else if (nation) {\r\n      this.service.changeSelectedNation(nation);\r\n      return;\r\n    }\r\n    this.service.changeSelectedNation(null);\r\n  }\r\n\r\n  getNationReportCard(team: GroupTeam) {\r\n    const { tournament } = this;\r\n    if (!team.ranking || !tournament?.groups) {\r\n      return;\r\n    }\r\n\r\n    const nation = findTeamInTournament(tournament.groups, team) ?? team;\r\n    let rankingTiers: Array<string | number> = ['s', 'a', 'b', 'c', 'd', 'e', 'f', 'g'];\r\n    if (tournament.availableRegions) {\r\n      const availableRegions = tournament.availableRegions.map(r => r.value);\r\n\r\n      if (availableRegions.length === 1) {\r\n        if (availableRegions[0] === RegionName.uefa) {\r\n          rankingTiers = [5, 10, 20, 35, 50, 80, 100, 400];\r\n        } else if (availableRegions[0] === RegionName.caf) {\r\n          rankingTiers = [30, 60, 80, 110, 120, 130, 140, 400];\r\n        }\r\n      } else if (availableRegions.length < 5) {\r\n        if (!availableRegions.includes(RegionName.uefa) && !availableRegions.includes(RegionName.conmebol)) {\r\n          rankingTiers = [30, 60, 80, 110, 120, 130, 140, 400];\r\n        } else if (\r\n          !availableRegions.includes(RegionName.afc) &&\r\n          !availableRegions.includes(RegionName.afc) &&\r\n          !availableRegions.includes(RegionName.concacaf)\r\n        ) {\r\n          rankingTiers = [5, 10, 20, 35, 50, 80, 100, 400];\r\n        } else {\r\n          rankingTiers = [8, 18, 25, 32, 50, 70, 100, 400];\r\n        }\r\n      }\r\n    }\r\n    rankingTiers.every((r, i) => {\r\n      if (nation.ranking && ((typeof r === 'number' && nation.ranking <= r) || nation.tier === r || nation.pot === r)) {\r\n        const { grade, result } = this.calcGrade(nation, i);\r\n        nation.reportCard.grade = grade;\r\n        nation.reportCard.tournamentFinish = result;\r\n        nation.reportCard.gradeStyle = getGradeStyle(grade);\r\n        nation.reportCard.gradeSummary = getGradeSummary(nation);\r\n        return false;\r\n      }\r\n      return true;\r\n    });\r\n  }\r\n\r\n  calcGrade(\r\n    nation: GroupTeam,\r\n    rankingIndex: number\r\n  ): {\r\n    grade: string;\r\n    result: string;\r\n  } {\r\n    const { tournament } = this;\r\n    if (tournament?.groupWinners === undefined || tournament.bracket === undefined || tournament.awards === undefined) {\r\n      return { grade: 'n/a', result: 'Did Not Qualify' };\r\n    }\r\n    let gradeArr = ['f', 'f', 'f', 'f', 'f', 'f', 'f', 'f'];\r\n    let result = '';\r\n    if (nation.matchesPlayed < 3) {\r\n      gradeArr = Array(8).fill('n/a');\r\n      result = 'Did Not Qualify';\r\n    } else if (nation.points < 3 && nation.gDiff < -3) {\r\n      gradeArr = ['f', 'f', 'f', 'd', 'c', 'c', 'c', 'b'];\r\n      result = 'Group Stage';\r\n    } else if (nation.points < 3) {\r\n      gradeArr = ['f', 'f', 'd', 'c', 'c', 'b', 'b', 'a'];\r\n      result = 'Group Stage';\r\n    } else if (!tournament.groupWinners.includes(nation)) {\r\n      gradeArr = ['f', 'f', 'c', 'c', 'b', 'b', 'a', 's'];\r\n      result = 'Group Stage';\r\n    } else if (!tournament.bracket.quarterFinals.flat().includes(nation)) {\r\n      gradeArr = ['d', 'd', 'b', 'a', 'a', 's', 's', 's'];\r\n      [result] = this.rounds;\r\n    } else if (!tournament.bracket.semiFinals.flat().includes(nation)) {\r\n      gradeArr = ['c', 'c', 'b', 'a', 's', 's', 's', 's'];\r\n      result = 'Quarter Finals';\r\n    } else if (tournament.bracket.finals[1].includes(nation) && tournament.awards[2] !== nation) {\r\n      gradeArr = ['b', 'b', 'a', 's', 's', 's', 's', 's'];\r\n      result = '4th Place';\r\n    } else if (tournament.awards[2] === nation) {\r\n      gradeArr = ['b', 'a', 'a', 's', 's', 's', 's', 's'];\r\n      result = '3rd Place';\r\n    } else if (tournament.awards[1] === nation) {\r\n      gradeArr = ['b', 'a', 's', 's', 's', 's', 's', 's'];\r\n      result = 'Runner Up';\r\n    } else if (tournament.awards[0] === nation) {\r\n      gradeArr = ['a', 'a', 's', 's', 's', 's', 's', 's'];\r\n      result = 'Winner';\r\n    } else {\r\n      gradeArr = Array(8).fill('n/a');\r\n      result = 'Did Not Qualify';\r\n    }\r\n    return {\r\n      grade: gradeArr[rankingIndex],\r\n      result,\r\n    };\r\n  }\r\n\r\n  getCoachRating(rating: number): string {\r\n    if (rating > 96) {\r\n      return 'S+';\r\n    } else if (rating > 92) {\r\n      return 'S';\r\n    } else if (rating > 89) {\r\n      return 'S-';\r\n    } else if (rating > 86) {\r\n      return 'A+';\r\n    } else if (rating > 82) {\r\n      return 'A';\r\n    } else if (rating > 79) {\r\n      return 'A-';\r\n    } else if (rating > 76) {\r\n      return 'B+';\r\n    } else if (rating > 72) {\r\n      return 'B';\r\n    } else if (rating > 69) {\r\n      return 'B-';\r\n    } else if (rating > 66) {\r\n      return 'C+';\r\n    } else if (rating > 62) {\r\n      return 'C';\r\n    } else if (rating > 59) {\r\n      return 'C-';\r\n    } else if (rating > 56) {\r\n      return 'D+';\r\n    } else if (rating > 52) {\r\n      return 'D';\r\n    } else if (rating > 49) {\r\n      return 'D-';\r\n    } else if (rating > 46) {\r\n      return 'E+';\r\n    } else if (rating > 42) {\r\n      return 'E';\r\n    } else if (rating > 39) {\r\n      return 'E-';\r\n    } else {\r\n      return 'F';\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  position: fixed;\r\n  left: 0;\r\n  top: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  background-color: rgba(0, 0, 0, 0.5);\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  opacity: 0;\r\n  transition: all 0.3s ease-in-out;\r\n  pointer-events: none;\r\n\r\n  &.show {\r\n    opacity: 1;\r\n    pointer-events: visible;\r\n\r\n    .container {\r\n      transform: translateY(0);\r\n    }\r\n  }\r\n\r\n  @media screen and (max-width: 1000px) {\r\n    font-size: 80%;\r\n  }\r\n}\r\n\r\nh3 {\r\n  font-family: 'aeonik-bold', system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\r\n}\r\n\r\n.container {\r\n  width: 50%;\r\n  background-color: #4F4F4F;\r\n  color: white;\r\n  transform: translateY(-200px);\r\n  transition: all 0.3s ease-in-out;\r\n  max-height: 100vh;\r\n  overflow-y: auto;\r\n\r\n  @media screen and (max-width: 1250px) {\r\n    width: 95%;\r\n  }\r\n\r\n  @media screen and (max-width: 600px) and (any-pointer: coarse) {\r\n    width: 100%;\r\n    height: 100vh;\r\n    margin-top: 25%;\r\n    padding-bottom: 1rem;\r\n    &.app {\r\n      margin-top: 0;\r\n    }\r\n  }\r\n\r\n  .header {\r\n    display: flex;\r\n    flex-direction: column;\r\n    padding: 1rem;\r\n\r\n    .name-row {\r\n      display: flex;\r\n      justify-content: space-between;\r\n      padding-bottom: 1rem;\r\n      .nation {\r\n        display: flex;\r\n        align-items: center;\r\n\r\n        @media screen and (max-width: 600px) {\r\n          flex-wrap: wrap;\r\n        }\r\n\r\n        .nation-flag {\r\n          font-size: 5rem;\r\n          display: flex;\r\n          justify-content: center;\r\n          align-items: center;\r\n          max-width: 6rem;\r\n          height: 3rem;\r\n          margin-right: 0.5rem;\r\n\r\n          @media screen and (max-width: 600px) {\r\n            font-size: 4rem;\r\n          }\r\n        }\r\n\r\n        h2 {\r\n          font-size: 3.5rem;\r\n          margin: 0 0.5rem;\r\n          text-transform: uppercase;\r\n          display: flex;\r\n          align-items: center;\r\n\r\n          @media screen and (max-width: 1250px) {\r\n            font-size: 2.25rem;\r\n          }\r\n\r\n          @media screen and (max-width: 600px) {\r\n            font-size: 2rem;\r\n          }\r\n        }\r\n\r\n\r\n      }\r\n      .exit-button {\r\n        font-size: 300%;\r\n        cursor: pointer;\r\n        flex: 1;\r\n        display: flex;\r\n        justify-content: flex-end;\r\n      }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    .stats-row {\r\n      display: flex;\r\n      flex-wrap: nowrap;\r\n      justify-content: space-between;\r\n      >div {\r\n        display: flex;\r\n        >div {\r\n          display: flex;\r\n          flex-direction: column;\r\n          align-items: center;\r\n          justify-content: space-evenly;\r\n          padding: 0 0.5rem;\r\n\r\n          h3 {\r\n            font-size: 2rem;\r\n\r\n            @media screen and (max-width: 1000px) {\r\n              font-size: 1.25rem;\r\n            }\r\n\r\n            @media screen and (max-width: 425px) {\r\n              font-size: 1rem;\r\n            }\r\n          }\r\n          span {\r\n            @media screen and (max-width: 425px) {\r\n              font-size: 0.75rem;\r\n            }\r\n          }\r\n\r\n          &.first {\r\n            padding: 0 2rem 0 0;\r\n            @media screen and (max-width: 425px) {\r\n              padding: 0;\r\n            }\r\n          }\r\n        }\r\n\r\n      }\r\n\r\n    }\r\n  }\r\n\r\n  .is-debuffed {\r\n    color: #ef3f18;\r\n  }\r\n\r\n  .is-buffed {\r\n    color: #83e356;\r\n  }\r\n\r\n  .small-rating {\r\n    font-size: 0.8rem;\r\n    color: #ffffff80\r\n  }\r\n\r\n  .body {\r\n    display: flex;\r\n    flex-direction: column;\r\n    padding: 10px;\r\n    border-top: 1px solid #ddd;\r\n    min-height: 400px;\r\n\r\n    h3 {\r\n      font-size: 1.5rem;\r\n    }\r\n\r\n    .flex-container {\r\n      display: flex;\r\n      flex-flow: row wrap;\r\n    }\r\n\r\n    .report-card {\r\n      padding-top: 10px;\r\n\r\n      >* {\r\n        margin-bottom: 10px;\r\n        display: block;\r\n      }\r\n\r\n      span {\r\n        font-style: italic;\r\n        font-size: 1rem;\r\n      }\r\n\r\n      .grade {\r\n        font-size: 2.5rem;\r\n        text-transform: uppercase;\r\n\r\n        @media screen and (max-width: 600px) {\r\n          font-size: 1.25rem;\r\n        }\r\n\r\n        &.good-grade {\r\n          color: #00ff00;\r\n        }\r\n\r\n        &.ok-grade {\r\n          color: yellow;\r\n        }\r\n\r\n        &.bad-grade {\r\n          color: red;\r\n        }\r\n      }\r\n    }\r\n\r\n    .matches {\r\n      display: flex;\r\n      flex-direction: column;\r\n      margin: 10px;\r\n\r\n      @media screen and (max-width: 600px) {\r\n        width: 100%;\r\n        margin: 0;\r\n      }\r\n\r\n      .match-stages {\r\n        margin-top: 5px;\r\n        margin-bottom: 15px;\r\n\r\n        @media screen and (max-width: 600px) {\r\n          margin-bottom: 0;\r\n        }\r\n      }\r\n\r\n      .match-row {\r\n        display: flex;\r\n        padding: 10px 0;\r\n        align-items: center;\r\n\r\n        >span {\r\n          margin-right: min(4vw, 50px);\r\n        }\r\n\r\n        .team-name {\r\n          max-width: 6.5rem;\r\n        }\r\n\r\n        .score {\r\n          max-width: 3.5rem;\r\n          text-decoration: underline dotted;\r\n          position: relative;\r\n          cursor: default;\r\n          .score-tooltip {\r\n            visibility: hidden;\r\n            background-color: black;\r\n            color: #fff;\r\n            text-align: center;\r\n            padding: 10px 10px;\r\n            border-radius: 6px;\r\n\r\n            /* Position the tooltip text */\r\n            position: absolute;\r\n            z-index: 1;\r\n            width: 200px;\r\n            top: 100%;\r\n            right: 50%;\r\n            margin-right: -100px; /* Use half of the width (120/2 = 60), to center the tooltip */\r\n\r\n            .title {\r\n              display: block;\r\n              font-size: 115%;\r\n              margin-bottom: 10px;\r\n            }\r\n\r\n            .flex {\r\n              display: flex;\r\n              justify-content: space-between;\r\n              >div {\r\n                display: flex;\r\n                flex-flow: column;\r\n                text-align: left;\r\n              }\r\n            }\r\n          }\r\n\r\n          &:hover .score-tooltip {\r\n            visibility: visible;\r\n          }\r\n        }\r\n\r\n        .round {\r\n          width: 5rem;\r\n        }\r\n\r\n        .nation-flag {\r\n          width: 3rem;\r\n          height: 3rem;\r\n          margin-right: 1rem;\r\n          cursor: pointer;\r\n\r\n          &.disabled {\r\n            cursor: not-allowed;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    .personel {\r\n      margin: 10px;\r\n\r\n      h3 {\r\n        margin-bottom: 10px;\r\n      }\r\n\r\n      th, td, summary {\r\n        text-align: left;\r\n        padding: 5px;\r\n      }\r\n\r\n      summary {\r\n        cursor: pointer;\r\n      }\r\n    }\r\n\r\n\r\n  }\r\n}\r\n",
                    "styleUrl": "./nation-dialog.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "service",
                        "type": "SimulationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 39,
                "jsdoctags": [
                    {
                        "name": "service",
                        "type": "SimulationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"container z-50\" click-stop-propagation *ngIf=\"nation\" [class.app]=\"isApp\">\r\n  <div class=\"header\">\r\n    <div class=\"name-row\">\r\n      <div class=\"nation\">\r\n        <img class=\"w-16 h-16 rounded object-cover\" [src]=\"nation.logo\" [alt]=\"nation.name\" />\r\n        <!-- <span class=\"nation-flag\">{{ nation.emoji }}</span> -->\r\n        <h2>\r\n          {{ nation.name.length > 9 && screenWidth < 450 ? nation.abbreviation.toLocaleUpperCase() : nation.name }}\r\n        </h2>\r\n      </div>\r\n      <fa-icon icon=\"xmark\" class=\"exit-button\" (click)=\"changeSelectedNation()\"></fa-icon>\r\n    </div>\r\n\r\n    <div class=\"stats-row\">\r\n      <div class=\"left-side\">\r\n        <div class=\"first\">\r\n          <span>Rank</span>\r\n          <h3>{{ nation.ranking }}</h3>\r\n        </div>\r\n        <div>\r\n          <span>OVR</span>\r\n          <h3>{{ getDisplayRating(nation.rating || 0) }}</h3>\r\n        </div>\r\n        <div>\r\n          <span>ATT</span>\r\n          <h3 [class.is-debuffed]=\"nation.isDebuffed.att\" [class.is-buffed]=\"nation.isBuffed.att\">\r\n            {{ getDisplayRating(nation.dynamicRating.att || 0, true) }}\r\n          </h3>\r\n          <!-- <span class=\"small-rating\">{{ getDisplayRating(nation.startingRating.att, true) }}</span> -->\r\n        </div>\r\n        <div>\r\n          <span>MID</span>\r\n          <h3 [class.is-debuffed]=\"nation.isDebuffed.mid\" [class.is-buffed]=\"nation.isBuffed.mid\">\r\n            {{ getDisplayRating(nation.dynamicRating.mid || 0, true) }}\r\n          </h3>\r\n          <!-- <span class=\"small-rating\">{{ getDisplayRating(nation.startingRating.mid, true) }}</span> -->\r\n        </div>\r\n        <div>\r\n          <span>DEF</span>\r\n          <h3 [class.is-debuffed]=\"nation.isDebuffed.def\" [class.is-buffed]=\"nation.isBuffed.def\">\r\n            {{ getDisplayRating(nation.dynamicRating.def || 0, true) }}\r\n          </h3>\r\n          <!-- <span class=\"small-rating\">{{ getDisplayRating(nation.startingRating.def, true) }}</span> -->\r\n        </div>\r\n        <div>\r\n          <span>PEN</span>\r\n          <h3 [class.is-debuffed]=\"nation.isDebuffed.pen\" [class.is-buffed]=\"nation.isBuffed.pen\">\r\n            {{ getDisplayRating(nation.dynamicRating.pen || 0, true) }}\r\n          </h3>\r\n          <!-- <span class=\"small-rating\">{{ getDisplayRating(nation.startingRating.pen, true) }}</span> -->\r\n        </div>\r\n      </div>\r\n      <div class=\"right-side\">\r\n        <div>\r\n          <span>POT</span>\r\n          <h3>{{ nation.pot ?? 'N/A' }}</h3>\r\n        </div>\r\n        <div>\r\n          <span>Region</span>\r\n          <h3>{{ nation.region.toLocaleUpperCase() }}</h3>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div class=\"body\">\r\n    <div class=\"flex-container\">\r\n      <ul class=\"personel\" *ngIf=\"nation.coach && nation.coach.rating\">\r\n        <h3>Head Coach</h3>\r\n        <table>\r\n          <tr>\r\n            <th>Name</th>\r\n            <td>\r\n              <span>{{ nation.coach.firstNames[0] }} </span>\r\n              <span>{{ nation.coach.singleLastName }}</span>\r\n            </td>\r\n          </tr>\r\n          <tr>\r\n            <th>Tier</th>\r\n            <td>\r\n              <span>{{ getCoachRating(nation.coach.rating || 0) }}</span>\r\n            </td>\r\n          </tr>\r\n        </table>\r\n        <details>\r\n          <summary>Additional Info</summary>\r\n          <table>\r\n            <tr>\r\n              <th>Full Name</th>\r\n              <td>\r\n                <span *ngFor=\"let firstName of nation.coach.firstNames\">{{ firstName }} </span>\r\n                <span *ngFor=\"let lastName of nation.coach.lastNames\">{{ lastName }} </span>\r\n              </td>\r\n            </tr>\r\n            <tr>\r\n              <th>Nationality</th>\r\n              <td>\r\n                <span>{{ nation.coach.nationality }}</span>\r\n              </td>\r\n            </tr>\r\n            <tr>\r\n              <th>Age</th>\r\n              <td>\r\n                <span>{{ nation.coach.age }}</span>\r\n              </td>\r\n            </tr>\r\n            <tr>\r\n              <th>Personality</th>\r\n              <td>\r\n                <span>{{ nation.coach.personality || 'N/A' }}</span>\r\n              </td>\r\n            </tr>\r\n          </table>\r\n        </details>\r\n      </ul>\r\n      <ul class=\"matches\">\r\n        <h3>Match History</h3>\r\n        <li *ngFor=\"let stage of nation.matchHistory | keyvalue: originalOrder; let i = index\" class=\"match-stages\">\r\n          <span *ngIf=\"stage.value.length > 0\" class=\"match-stages\">{{ stages[i].heading }}</span>\r\n          <div *ngFor=\"let item of stage.value; let j = index\" class=\"match-row\">\r\n            <span *ngIf=\"stages[i].prop === 'bracket'\" class=\"round\">{{ rounds[j] }}</span>\r\n            <img\r\n              class=\"nation-flag\"\r\n              [src]=\"item.match.winner.logo\"\r\n              [alt]=\"item.match.winner.name\"\r\n              (click)=\"changeSelectedNation(item.match.winner)\"\r\n              [ngClass]=\"item.match.winner.name === nation.name ? 'disabled' : ''\" />\r\n            <span class=\"team-name\"\r\n              >{{ item.match.winner.name }} {{ screenWidth > 350 ? '[' + item.match.winner.ranking + ']' : '' }}\r\n            </span>\r\n            <span class=\"score\"\r\n              >{{ item.match.score }}\r\n              {{\r\n                item.match.isPenaltyWin && stages[i].prop !== 'group'\r\n                  ? '(P)'\r\n                  : item.match.isEtWin && stages[i].prop !== 'group'\r\n                    ? '(AET)'\r\n                    : ''\r\n              }}\r\n              <span class=\"score-tooltip\">\r\n                <span class=\"title\">Match Recap</span>\r\n                <span *ngIf=\"!(item.match.eventTimes.winner.length > 0) && !(item.match.eventTimes.loser.length > 0)\">N/A</span>\r\n                <div class=\"flex\">\r\n                  <div>\r\n                    <span *ngFor=\"let event of item.match.eventTimes.winner\">{{ event.time }}' {{ event.emoji }}</span>\r\n                  </div>\r\n                  <div>\r\n                    <span *ngFor=\"let event of item.match.eventTimes.loser\">{{ event.emoji }} {{ event.time }}'</span>\r\n                  </div>\r\n                </div>\r\n              </span>\r\n            </span>\r\n            <img\r\n              class=\"nation-flag\"\r\n              [src]=\"item.match.loser.logo\"\r\n              [alt]=\"item.match.loser.name\"\r\n              (click)=\"changeSelectedNation(item.match.loser)\"\r\n              [ngClass]=\"item.match.loser.name === nation.name ? 'disabled' : ''\" />\r\n            <span class=\"team-name\">{{ item.match.loser.name }} {{ screenWidth > 350 ? '[' + item.match.loser.ranking + ']' : '' }}</span>\r\n          </div>\r\n        </li>\r\n      </ul>\r\n      <ul class=\"report-card\" *ngIf=\"nation.reportCard.grade\">\r\n        <h3>Performance Grade</h3>\r\n        <li [ngClass]=\"['grade', nation.reportCard.gradeStyle]\">\r\n          {{ nation.reportCard.grade }} - {{ nation.reportCard.tournamentFinish }}\r\n        </li>\r\n        <span>{{ nation.reportCard.gradeSummary }}</span>\r\n      </ul>\r\n    </div>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "NavBarComponent",
            "id": "component-NavBarComponent-733f5c4e9f54cfc4eb68d8fc511050b1013234c5f0f77afd4192c0648121eab6cd06f45ab8047ee06be038971fedfe2a44c1c355f7968df156f79ed0bec03ace",
            "file": "src/app/shared/components/nav-bar/nav-bar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-nav-bar",
            "styleUrls": [
                "./nav-bar.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./nav-bar.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "auth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AuthService",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "isLoggedIn",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "loginOverlayOpen",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "navigationItems",
                    "defaultValue": "[\r\n    {\r\n      routerLink: '/simulation',\r\n      displayName: 'Simulation',\r\n    },\r\n    {\r\n      routerLink: '/career',\r\n      displayName: 'Career',\r\n    },\r\n    // {\r\n    //   routerLink: '/leaderboard',\r\n    //   displayName: 'Leaderboard',\r\n    // },\r\n    {\r\n      routerLink: '/moba',\r\n      displayName: 'MOBA',\r\n    },\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "navToggle",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { AuthService } from '@core/services/auth.service';\r\n\r\n@Component({\r\n  selector: 'app-nav-bar',\r\n  templateUrl: './nav-bar.component.html',\r\n  styleUrls: ['./nav-bar.component.scss'],\r\n})\r\nexport class NavBarComponent {\r\n  loginOverlayOpen = false;\r\n  navToggle = false;\r\n  isLoggedIn = false;\r\n\r\n  navigationItems = [\r\n    {\r\n      routerLink: '/simulation',\r\n      displayName: 'Simulation',\r\n    },\r\n    {\r\n      routerLink: '/career',\r\n      displayName: 'Career',\r\n    },\r\n    // {\r\n    //   routerLink: '/leaderboard',\r\n    //   displayName: 'Leaderboard',\r\n    // },\r\n    {\r\n      routerLink: '/moba',\r\n      displayName: 'MOBA',\r\n    },\r\n  ];\r\n  constructor(public auth: AuthService) {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./nav-bar.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "auth",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 31,
                "jsdoctags": [
                    {
                        "name": "auth",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<nav class=\"navbar bg-base-100\">\r\n  <div class=\"navbar-start\">\r\n    <div class=\"dropdown\">\r\n      <label tabindex=\"0\" class=\"btn btn-ghost lg:hidden\">\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n          <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M4 6h16M4 12h8m-8 6h16\" />\r\n        </svg>\r\n      </label>\r\n      <ul tabindex=\"0\" class=\"menu menu-compact dropdown-content mt-3 p-2 shadow bg-base-100 rounded-box w-52\">\r\n        <li *ngFor=\"let item of navigationItems\">\r\n          <a [routerLink]=\"item.routerLink\">{{ item.displayName }}</a>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n    <a class=\"btn btn-ghost normal-case text-xl\" routerLink=\"/\">FB Sim</a>\r\n  </div>\r\n  <div class=\"navbar-center hidden lg:flex\">\r\n    <ul class=\"menu menu-horizontal px-1\">\r\n      <li *ngFor=\"let item of navigationItems\">\r\n        <a [routerLink]=\"item.routerLink\">{{ item.displayName }}</a>\r\n      </li>\r\n    </ul>\r\n  </div>\r\n  <div class=\"navbar-end\">\r\n    <a class=\"btn\" *ngIf=\"auth.user$ | async as user; else login\" (click)=\"auth.signOut()\">Logout</a>\r\n    <ng-template #login>\r\n      <a routerLink=\"/login\" class=\"btn\">Login</a>\r\n    </ng-template>\r\n  </div>\r\n</nav>\r\n"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-d32b0f19628254ea3fc5526c4d4564ada1cc83cf936759006d90a46f5874b02a3359e331bddda20b22e74a616a6443c660602ba74dd38ebe1160759e0de6f7ba",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"\n    ></storybook-header>\n    <section class=\"storybook-page\">\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User | null",
                    "optional": false,
                    "description": "",
                    "line": 69
                }
            ],
            "methodsClass": [
                {
                    "name": "doCreateAccount",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "HeaderComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { HeaderComponent } from './header.component';\nimport type { User } from './user';\n\n@Component({\n  selector: 'storybook-page',\n  standalone: true,\n  imports: [CommonModule, HeaderComponent],\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"\n    ></storybook-header>\n    <section class=\"storybook-page\">\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport class PageComponent {\n  user: User | null = null;\n\n  doLogout() {\n    this.user = null;\n  }\n\n  doLogin() {\n    this.user = { name: 'Jane Doe' };\n  }\n\n  doCreateAccount() {\n    this.user = { name: 'Jane Doe' };\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-page {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\n.storybook-page h2 {\n  font-weight: 700;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\n.storybook-page p {\n  margin: 1em 0;\n}\n\n.storybook-page a {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\n.storybook-page ul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\n.storybook-page li {\n  margin-bottom: 8px;\n}\n\n.storybook-page .tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\n.storybook-page .tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\n.storybook-page .tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\n.storybook-page .tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "PitchViewComponent",
            "id": "component-PitchViewComponent-05b89eb123d2af54f84d8c3c571c9e366a5725b6c363ca8eb7887dcbb10c71a9d00a9b77c01b31c64728c582fa577931cc83c5dce3fdbc97cf65ba45838a85e7",
            "file": "src/app/shared/components/pitch-view/pitch-view.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-pitch-view",
            "styleUrls": [
                "./pitch-view.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./pitch-view.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-pitch-view',\r\n  templateUrl: './pitch-view.component.html',\r\n  styleUrls: ['./pitch-view.component.scss'],\r\n})\r\nexport class PitchViewComponent {\r\n  constructor() {}\r\n\r\n  // resetStarters(bypass?: boolean) {\r\n  //   if (bypass) {\r\n  //     this.pitchPlayers.map((player) => ({\r\n  //       ...player,\r\n  //       pitchPosition: undefined,\r\n  //       pitchPositionIndex: undefined,\r\n  //     }));\r\n\r\n  //     this.players = this.pitchPlayers.concat(this.players);\r\n  //     this.pitchPlayers = [];\r\n  //     this.sortedPitchPlayers = [];\r\n  //     this.squadRules.map((rule) => ({\r\n  //       ...rule,\r\n  //       check: '❌',\r\n  //     }));\r\n\r\n  //     this.squadRules[8].check = '→';\r\n\r\n  //     this.positionBoxes.map((box) => ({\r\n  //       ...box,\r\n  //       playerClass: 'inactive player-box',\r\n  //       posBoxClass: 'active pos-box',\r\n  //       pitchPlayer: undefined,\r\n  //     }));\r\n  //   } else if (window.confirm('Remove starting players?')) {\r\n  //     this.resetStarters(true);\r\n  //   }\r\n  // }\r\n\r\n  // calcChemistry(obj: { def: number }) {\r\n  //   // chemistry reset\r\n\r\n  //   this.pitchPlayers.map((player) => ({\r\n  //     ...player,\r\n  //     chemistryNum: 0,\r\n  //   }));\r\n  //   this.chemistry = 0;\r\n\r\n  //   const chemArr = [];\r\n  //   if (this.formation !== 'N/A') {\r\n  //     if (obj.def === 4) {\r\n  //       chemArr.push(\r\n  //         ['GK', 'DCL'],\r\n  //         ['GK', 'DCR'],\r\n  //         ['DCR', 'DCL'],\r\n  //         ['DCL', 'DL'],\r\n  //         ['DCR', 'DR']\r\n  //       );\r\n  //       if (this.formation === '4-1-4-1 DM Asymmetric AM (R/L)') {\r\n  //         chemArr.push(\r\n  //           ['STC', 'multi', 'AMC', 'AMCR', 'AMCL'],\r\n  //           ['DR', 'multi', 'AMR', 'MR'],\r\n  //           ['DL', 'multi', 'AML', 'ML'],\r\n  //           ['AMC', 'MC'],\r\n  //           ['STC', 'AMC'],\r\n  //           ['MC', 'DMC'],\r\n  //           ['DMC', 'DCL'],\r\n  //           ['DMC', 'DCR']\r\n  //         );\r\n  //       }\r\n  //     } else if (obj.def === 3) {\r\n  //       chemArr.push(\r\n  //         ['GK', 'DCL'],\r\n  //         ['GK', 'DCR'],\r\n  //         ['GK', 'DC'],\r\n  //         ['DCL', 'DC'],\r\n  //         ['DCR', 'DC'],\r\n  //         ['DCR', 'WBR'],\r\n  //         ['DCL', 'WBL']\r\n  //       );\r\n  //     }\r\n  //   }\r\n  //   chemArr.forEach((arr) => {\r\n  //     let first: Player;\r\n  //     let second: Player;\r\n  //     this.pitchPlayers.forEach((player) => {\r\n  //       // check for multiple possible positions for player1\r\n  //       if (arr[0] === 'multi') {\r\n  //         for (let i = 1; i < arr.length; i++) {\r\n  //           if (player.pitchPosition === arr[i]) {\r\n  //             first = player;\r\n  //             break;\r\n  //           }\r\n  //         }\r\n  //       }\r\n  //       // Check for first player in chem pair\r\n  //       else if (player.pitchPosition === arr[0]) {\r\n  //         first = player;\r\n  //       }\r\n  //       // check for multiple possible positions for player2\r\n  //       else if (arr[1] === 'multi') {\r\n  //         for (let i = 2; i < arr.length; i++) {\r\n  //           if (player.pitchPosition === arr[i]) {\r\n  //             second = player;\r\n  //             break;\r\n  //           }\r\n  //         }\r\n  //       } else if (player.pitchPosition === arr[1]) {\r\n  //         // Check for second player in chem pair\r\n  //         second = player;\r\n  //       }\r\n  //       if (first && second && first.chemistryNum && second.chemistryNum) {\r\n  //         if (first.nationality === second.nationality) {\r\n  //           this.chemistry++;\r\n  //           first.chemistryNum++;\r\n  //           second.chemistryNum++;\r\n  //         }\r\n  //         if (first.club === second.club) {\r\n  //           this.chemistry++;\r\n  //           first.chemistryNum++;\r\n  //           second.chemistryNum++;\r\n  //         }\r\n  //         break;\r\n  //       }\r\n  //     });\r\n  //   });\r\n  // }\r\n\r\n  // // getChemColor(player: Player) {\r\n  // //   if (player.chemistryNum) {\r\n  // //     if (player.chemistryNum === 1) {\r\n  // //       return '1px dashed yellow';\r\n  // //     }\r\n  // //     if (player.chemistryNum === 2) {\r\n  // //       return '1px dashed lime';\r\n  // //     }\r\n  // //     if (player.chemistryNum > 2) {\r\n  // //       return '1px dashed pink';\r\n  // //     }\r\n  // //     return '1px solid #353535';\r\n  // //   }\r\n  // //   return false\r\n  // // }\r\n\r\n  // calcStartersRating() {\r\n  //   const startersArr: number[] = [];\r\n  //   this.pitchPlayers.forEach((player) => {\r\n  //     if (player.pitchRating !== undefined) {\r\n  //       switch (player.pitchPosition) {\r\n  //         case 'DR':\r\n  //         case 'DL':\r\n  //           startersArr.push(player.pitchRating * 0.88);\r\n  //           break;\r\n  //         case 'WBL':\r\n  //         case 'WBR':\r\n  //         case 'MR':\r\n  //         case 'ML':\r\n  //           startersArr.push(player.pitchRating * 0.97);\r\n  //           break;\r\n  //         case 'GK':\r\n  //         case 'DCR':\r\n  //         case 'DCL':\r\n  //         case 'DC':\r\n  //         case 'AMR':\r\n  //         case 'AML':\r\n  //           startersArr.push(player.pitchRating * 0.99);\r\n  //           break;\r\n  //         case 'AMCR':\r\n  //         case 'AMC':\r\n  //         case 'AMCL':\r\n  //         case 'DMC':\r\n  //         case 'DMR':\r\n  //         case 'DML':\r\n  //           startersArr.push(player.pitchRating * 1.01);\r\n  //           break;\r\n  //         case 'STC':\r\n  //         case 'STCL':\r\n  //         case 'STCR':\r\n  //         case 'MC':\r\n  //         case 'MCR':\r\n  //         case 'MCL':\r\n  //           startersArr.push(player.pitchRating * 1.03);\r\n  //           break;\r\n  //         default:\r\n  //           console.log('error');\r\n  //           break;\r\n  //       }\r\n  //     } else {\r\n  //       console.log('Error: check home component');\r\n  //     }\r\n  //   });\r\n  //   this.startersTotalRating = calcSumRating(startersArr);\r\n  // }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./pitch-view.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "extends": [],
            "templateData": "<div class=\"pitch-container\">\r\n  <!-- <div class=\"formation\" *ngIf=\"this.pitchPlayers.length > 0\">\r\n    Formation: {{ formation }}\r\n  </div>\r\n  <div class=\"starters-total-rating\" *ngIf=\"this.pitchPlayers.length > 0\">\r\n    <div>Rating - {{ startersTotalRating }}</div>\r\n    <div class=\"stars\"></div>\r\n  </div>\r\n  <div class=\"squad-total-rating\" *ngIf=\"checkFormation()\">\r\n    <div>Squad Rating - {{ squadTotalRating }}</div>\r\n    <div class=\"stars\"></div>\r\n  </div> -->\r\n  <!-- <div class=\"squad-total-rating\">\r\n            <div *ngIf=\"chemistry > 0; else chemContainer\">Chemistry: <span style=\"color: lime;\">+{{chemistry}}</span></div>\r\n            <ng-template #chemContainer>Chemistry: {{chemistry}}</ng-template>\r\n        </div> -->\r\n  <!-- <button\r\n    mat-raised-button\r\n    color=\"primary\"\r\n    type=\"button\"\r\n    (click)=\"resetStarters()\"\r\n    class=\"reset-button\"\r\n  >\r\n    Reset XI\r\n  </button>\r\n  <div class=\"pitch-borders\">\r\n    <div class=\"goal-box-top pitch-divs\"></div>\r\n    <div class=\"goal-box-circle-top pitch-divs\"></div>\r\n    <div class=\"pitch-dot pitch-divs\"></div>\r\n    <div class=\"pitch-circle pitch-divs\"></div>\r\n    <div class=\"half-line pitch-divs\"></div>\r\n    <div class=\"goal-box-circle-bottom pitch-divs\"></div>\r\n    <div class=\"goal-box-bottom pitch-divs\"></div>\r\n    <div class=\"pitch-grid\">\r\n      <div\r\n        *ngFor=\"let box of positionBoxes\"\r\n        [class]=\"getPositionBox(box)\"\r\n        cdkDropList\r\n        (cdkDropListDropped)=\"drop($event)\"\r\n        [cdkDropListData]=\"pitchPlayers\"\r\n      >\r\n        <div\r\n          [class]=\"getPlayerClass(box)\"\r\n          cdkDrag\r\n          [cdkDragData]=\"box\"\r\n          (cdkDragStarted)=\"getPositionOutline($event)\"\r\n          (cdkDragReleased)=\"removeOutlineRelease($event)\"\r\n          (cdkDragDropped)=\"removeOutlineDrop($event)\"\r\n        >\r\n          <div *ngIf=\"box.pitchPlayer !== undefined\">\r\n            <div>\r\n              <span\r\n                *ngIf=\"box.pitchPlayer !== undefined\"\r\n                class=\"pitch-player-info\"\r\n                >{{ box.pitchPlayer.pitchRating }}</span\r\n              >\r\n              <span\r\n                *ngIf=\"box.pitchPlayer !== undefined\"\r\n                class=\"pitch-player-info\"\r\n                >{{ box.pitchPlayer.preferredRole }}-{{\r\n                  box.pitchPlayer.preferredDuty\r\n                }}</span\r\n              >\r\n              <img\r\n                *ngIf=\"box.pitchPlayer !== undefined\"\r\n                class=\"pitch-player-img\"\r\n                [src]=\"box.pitchPlayer.nationalityLogo\"\r\n              />\r\n              <img\r\n                *ngIf=\"box.pitchPlayer !== undefined\"\r\n                class=\"pitch-player-img\"\r\n                [src]=\"box.pitchPlayer.clubLogo\"\r\n              />\r\n            </div>\r\n            <div>\r\n              <img\r\n                [src]=\"box.pitchPlayer.playerFace\"\r\n                alt=\"\"\r\n                class=\"player-face\"\r\n              />\r\n              <span *ngIf=\"box.pitchPlayer !== undefined\" class=\"player-name\">{{\r\n                box.pitchPlayer.displayName\r\n              }}</span>\r\n            </div>\r\n          </div> -->\r\n\r\n          <!-- <div *cdkDragPreview  class=\"player-box active\">\r\n                                <img [src]=\"box.pitchPlayer.playerFace\" alt=\"\" class=\"player-face\" *ngIf=\"box.pitchPlayer !== undefined\">\r\n                                <span *ngIf=\"box.pitchPlayer !== undefined\" class=\"pitch-player-info\">{{box.pitchPlayer.pitchRating}}</span>\r\n                                <span *ngIf=\"box.pitchPlayer !== undefined\" class=\"pitch-player-info\">{{box.pitchPlayer.pitchPosition}}</span>\r\n                                <img *ngIf=\"box.pitchPlayer !== undefined\" class=\"pitch-player-img\" [src]=\"box.pitchPlayer.nationalityLogo\">\r\n                                <img *ngIf=\"box.pitchPlayer !== undefined\" class=\"pitch-player-img\" [src]=\"box.pitchPlayer.clubLogo\">\r\n                                <span *ngIf=\"box.pitchPlayer !== undefined\" class=\"player-name\">{{box.pitchPlayer.displayName}}</span>\r\n                        </div>    -->\r\n          <!-- <div class=\"player-box active\" *cdkDragPlaceholder>Placeholder</div> -->\r\n        <!-- </div>\r\n        <div [class]=\"getPosBoxClass(box)\"></div>\r\n      </div>\r\n    </div>\r\n  </div> -->\r\n</div>\r\n"
        },
        {
            "name": "PlayerCardComponent",
            "id": "component-PlayerCardComponent-d0a05857fec51165bbc0ac9e47f7b7128d3446a659e51e6c4ddb2895bc9ff6fccd16500fb7863b85649225596420b42512968bf1c500f881cee458e90bc7a8df",
            "file": "src/app/shared/components/player-card/player-card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-player-card",
            "styleUrls": [
                "./player-card.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./player-card.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-player-card',\r\n  templateUrl: './player-card.component.html',\r\n  styleUrls: ['./player-card.component.scss']\r\n})\r\nexport class PlayerCardComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./player-card.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>player-card works!</p>\r\n"
        },
        {
            "name": "PlayerSelectComponent",
            "id": "component-PlayerSelectComponent-6ffecdd536d42af051cab4037f457ec901e828e51eafb39fdde8d0f67687cd6400d474f6707767c4eff89798d8aa40cd020aff57cb11ce3e95a75b26cd73aaef",
            "file": "src/app/moba/player-select/player-select.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-player-select",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./player-select.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "form",
                    "defaultValue": "new FormGroup({\r\n    selectedRegion: new FormControl<LeagueName>(mobaRegions[0].leagueName),\r\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "getPlayerOptions",
                    "defaultValue": "getPlayerOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "playerOptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Player[]",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "positions",
                    "defaultValue": "positions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "previousRegion",
                    "defaultValue": "mobaRegions[0].leagueName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LeagueName",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "regions",
                    "defaultValue": "mobaRegions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "screenWidth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "selectedPlayers",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Player[]",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methodsClass": [
                {
                    "name": "choosePlayer",
                    "args": [
                        {
                            "name": "player",
                            "type": "Player",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "player",
                            "type": "Player",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getScreenSize",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'window:resize', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "getTopThreeAttributes",
                    "args": [
                        {
                            "name": "player",
                            "type": "Player",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "player",
                            "type": "Player",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onRegionChange",
                    "args": [
                        {
                            "name": "abbrev",
                            "type": "LeagueName",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "abbrev",
                            "type": "LeagueName",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resetPlayerOptions",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "window:resize",
                    "args": [],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 54
                }
            ],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, HostListener } from '@angular/core';\r\nimport { Player, positions, sortByMainRole } from '../player/player.model';\r\nimport { getCurrentRoles, getPlayerOptions, sortMapAttributes } from '../player/player.utils';\r\nimport { LeagueName, MobaRegion, regions as mobaRegions } from '../region/region.model';\r\nimport { FormControl, FormGroup } from '@angular/forms';\r\nimport { MobaService } from '../moba.service';\r\n\r\n@Component({\r\n  selector: 'app-player-select',\r\n  templateUrl: './player-select.component.html',\r\n  styleUrl: './player-select.component.scss',\r\n})\r\nexport class PlayerSelectComponent {\r\n  screenWidth: number;\r\n  form: FormGroup = new FormGroup({\r\n    selectedRegion: new FormControl<LeagueName>(mobaRegions[0].leagueName),\r\n  });\r\n\r\n  getPlayerOptions = getPlayerOptions;\r\n  playerOptions: Player[] = [];\r\n  selectedPlayers: Player[] = [];\r\n  positions = positions;\r\n  regions = mobaRegions;\r\n  previousRegion: LeagueName = mobaRegions[0].leagueName;\r\n\r\n  constructor(private service: MobaService) {\r\n    this.screenWidth = window.innerWidth;\r\n    this.getScreenSize();\r\n\r\n    const selectedRegion = service.getLocalStorage<MobaRegion>('moba_region');\r\n    const playerOptions = service.getLocalStorage<Player[]>('moba_player_options');\r\n    const selectedPlayers = service.getLocalStorage<Player[]>('moba_selected_players');\r\n    if (selectedRegion) {\r\n      this.form.patchValue({ selectedRegion: selectedRegion.leagueName }, { emitEvent: false });\r\n    }\r\n    if (playerOptions) {\r\n      this.playerOptions = playerOptions;\r\n    } else {\r\n      this.playerOptions = getPlayerOptions(selectedRegion || mobaRegions[0]);\r\n    }\r\n\r\n    if (selectedPlayers) {\r\n      this.selectedPlayers = selectedPlayers;\r\n    }\r\n    console.log(this.positions);\r\n\r\n    this.service.setLocalStorage('moba_region', selectedRegion || mobaRegions[0]);\r\n    this.form.get('selectedRegion')?.valueChanges.subscribe((region: LeagueName) => {\r\n      this.onRegionChange(region);\r\n    });\r\n  }\r\n\r\n  @HostListener('window:resize', ['$event'])\r\n  getScreenSize() {\r\n    this.screenWidth = window.innerWidth;\r\n  }\r\n\r\n  resetPlayerOptions() {\r\n    this.selectedPlayers = [];\r\n    const region = this.regions.find(r => r.leagueName === this.form.get('selectedRegion')?.value) as MobaRegion;\r\n    this.playerOptions = getPlayerOptions(region);\r\n    this.service.setLocalStorage('moba_region', region);\r\n    this.service.setLocalStorage('moba_player_options', this.playerOptions);\r\n    this.service.removeLocalStorage('moba_selected_players');\r\n  }\r\n\r\n  onRegionChange(abbrev: LeagueName) {\r\n    if (this.selectedPlayers.length > 0) {\r\n      const confirmChange = window.confirm('Are you sure? Changing the region will reset your team selection.');\r\n      if (confirmChange) {\r\n        this.resetPlayerOptions();\r\n      } else {\r\n        // User canceled, revert to previous region\r\n        this.form.patchValue({ selectedRegion: this.previousRegion }, { emitEvent: false });\r\n      }\r\n    } else {\r\n      const region = this.regions.find(r => r.leagueName === abbrev) as MobaRegion;\r\n      this.playerOptions = getPlayerOptions(region);\r\n      this.service.setLocalStorage('moba_region', region);\r\n      this.service.setLocalStorage('moba_player_options', this.playerOptions);\r\n    }\r\n    this.previousRegion = this.form.get('selectedRegion')?.value;\r\n  }\r\n\r\n  choosePlayer(player: Player) {\r\n    console.log(player);\r\n    this.selectedPlayers.push(player);\r\n    this.selectedPlayers = sortByMainRole(this.selectedPlayers);\r\n    this.selectedPlayers = getCurrentRoles(this.selectedPlayers);\r\n    if (this.selectedPlayers.length >= 5) {\r\n      this.playerOptions = [];\r\n    } else {\r\n      const region = this.regions.find(r => r.leagueName === this.form.get('selectedRegion')?.value) as MobaRegion;\r\n      this.playerOptions = getPlayerOptions(region, this.selectedPlayers);\r\n    }\r\n    this.service.setLocalStorage('moba_selected_players', this.selectedPlayers);\r\n  }\r\n\r\n  getTopThreeAttributes(player: Player): string[] {\r\n    const topAttributes: string[] = [];\r\n    const map = sortMapAttributes(player.attributes);\r\n    for (let i = 0; i < 3; i++) {\r\n      const attr = Array.from(map.keys())[i].replaceAll('_', ' ');\r\n      topAttributes.push(attr);\r\n    }\r\n    return topAttributes;\r\n  }\r\n}\r\n",
            "styleUrl": "./player-select.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "service",
                        "type": "MobaService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "service",
                        "type": "MobaService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<!-- Form -->\r\n<form class=\"flex justify-center items-center flex-col sm:flex-row\" [formGroup]=\"form\">\r\n  <label class=\"form-control w-full max-w-xs m-4\">\r\n    <div class=\"label\">\r\n      <span class=\"label-text\">Pick the team region</span>\r\n    </div>\r\n    <select class=\"select select-bordered\" formControlName=\"selectedRegion\">\r\n      <option [value]=\"region.leagueName\" *ngFor=\"let region of regions\">{{ region.regionAbbrev }} - {{ region.leagueName }}</option>\r\n    </select>\r\n  </label>\r\n  <button class=\"btn btn-secondary btn-wide sm:self-end sm:mb-4\" (click)=\"resetPlayerOptions()\">+ New</button>\r\n</form>\r\n\r\n<!-- PLAYER CHOICE TABLE -->\r\n\r\n<div class=\"my-8 sm:mx-8 px-2 py-4 overflow-x-auto\">\r\n  <legend>Click a player to choose them</legend>\r\n  <table class=\"table table-xs xl:table-md table-zebra\">\r\n    <thead class=\"uppercase\">\r\n      <tr>\r\n        <th>name</th>\r\n        <th>role <span *ngIf=\"screenWidth >= 640\">/ top 3 champs</span></th>\r\n        <th>play style <span *ngIf=\"screenWidth >= 640\">/ top 3 attributes</span></th>\r\n        <th>nation</th>\r\n      </tr>\r\n    </thead>\r\n    <tr *ngFor=\"let player of playerOptions\" class=\"cursor-pointer hover:bg-base-200\" (click)=\"choosePlayer(player)\">\r\n      <td>\r\n        <div class=\"flex items-center space-x-3\">\r\n          <div>\r\n            <div class=\"text-sm sm:text-base\">{{ player.gamerTag.name }}</div>\r\n            <div class=\"text-xs sm:text-sm opacity-50 uppercase\">{{ player.age }}</div>\r\n            <app-star-rating [rating]=\"(player.currentRoleRating / 100) * 5\"></app-star-rating>\r\n          </div>\r\n        </div>\r\n      </td>\r\n      <td>\r\n        <div class=\"flex capitalize flex-col\">\r\n          <div class=\"mb-2\">{{ player.mainRole }}</div>\r\n          <div class=\"flex\" *ngIf=\"screenWidth >= 640\">\r\n            <img\r\n              class=\"h-6 w-6 object-cover drop-shadow-sm mx-1 rounded-full\"\r\n              [src]=\"champ.img\"\r\n              alt=\"champ.name\"\r\n              *ngFor=\"let champ of player.champMains\" />\r\n          </div>\r\n        </div>\r\n      </td>\r\n      <td>\r\n        <div class=\"capitalize\">{{ player.gameStateStrength + ' ' + player.playStyle }}</div>\r\n        <div class=\"text-xs opacity-50 uppercase flex flex-col\" *ngIf=\"screenWidth >= 640\">\r\n          <span *ngFor=\"let attribute of getTopThreeAttributes(player)\">\r\n            {{ attribute }}\r\n          </span>\r\n        </div>\r\n      </td>\r\n      <td>\r\n        <div>\r\n          <img [src]=\"player.nationality.logo\" [alt]=\"player.nationality.name\" class=\"h-6 w-8 object-cover mx-2 drop-shadow-lg\" />\r\n        </div>\r\n      </td>\r\n    </tr>\r\n  </table>\r\n</div>\r\n\r\n<!-- LINEUP TABLE -->\r\n\r\n<div class=\"my-8 sm:mx-8 px-2 py-4 overflow-x-auto\">\r\n  <legend>Lineup</legend>\r\n  <table class=\"table table-xs table-zebra\">\r\n    <thead class=\"uppercase\">\r\n      <tr>\r\n        <th>position</th>\r\n        <th>name / age / rating</th>\r\n        <th>role <span *ngIf=\"screenWidth >= 640\">/ top 3 champs</span></th>\r\n        <th>play style <span *ngIf=\"screenWidth >= 640\">/ top 3 attributes</span></th>\r\n        <th>nation</th>\r\n        <th></th>\r\n      </tr>\r\n    </thead>\r\n    <tr *ngFor=\"let player of selectedPlayers; let i = index\" class=\"hover:bg-base-200\">\r\n      <th>\r\n        <img [src]=\"positions[i].url\" [alt]=\"positions[i].name\" class=\"h-10 w-10 object-cover mx-2 drop-shadow-lg\" />\r\n      </th>\r\n      <td>\r\n        <div class=\"flex items-center space-x-3\">\r\n          <div>\r\n            <div class=\"text-sm sm:text-base\">{{ player.gamerTag.name }}</div>\r\n            <div class=\"text-xs sm:text-sm opacity-50 uppercase\">{{ player.age }}</div>\r\n            <app-star-rating [rating]=\"(player.currentRoleRating / 100) * 5\"></app-star-rating>\r\n          </div>\r\n        </div>\r\n      </td>\r\n      <td>\r\n        <div class=\"flex capitalize\">\r\n          <div class=\"mr-2 w-20\" [class.text-red-500]=\"player.currentRole && player.currentRole !== player.mainRole\">\r\n            {{ player.mainRole }}\r\n          </div>\r\n          <div class=\"flex\" *ngIf=\"screenWidth >= 640\">\r\n            <img\r\n              class=\"h-6 w-6 object-cover drop-shadow-sm mx-1 rounded-full\"\r\n              [src]=\"champ.img\"\r\n              alt=\"champ.name\"\r\n              *ngFor=\"let champ of player.champMains\" />\r\n          </div>\r\n        </div>\r\n      </td>\r\n      <td>\r\n        <div class=\"capitalize\">{{ player.gameStateStrength + ' ' + player.playStyle }}</div>\r\n        <div class=\"text-xs opacity-50 uppercase flex flex-col\" *ngIf=\"screenWidth >= 640\">\r\n          <span *ngFor=\"let attribute of getTopThreeAttributes(player)\">\r\n            {{ attribute }}\r\n          </span>\r\n        </div>\r\n      </td>\r\n      <td>\r\n        <div>\r\n          <img [src]=\"player.nationality.logo\" [alt]=\"player.nationality.name\" class=\"h-6 w-8 object-cover mx-2 drop-shadow-lg\" />\r\n        </div>\r\n      </td>\r\n    </tr>\r\n  </table>\r\n</div>\r\n"
        },
        {
            "name": "PositionBreakdownComponent",
            "id": "component-PositionBreakdownComponent-be968c69215d572add4edcffda4bb30dbbd99528744154491f4738661f331536d46eadc7fde6b95f2906338249b7527725d7408bb316b7070b2c2a223da1ba4e",
            "file": "src/app/shared/components/position-breakdown/position-breakdown.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-position-breakdown",
            "styleUrls": [
                "./position-breakdown.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./position-breakdown.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-position-breakdown',\r\n  templateUrl: './position-breakdown.component.html',\r\n  styleUrls: ['./position-breakdown.component.scss'],\r\n})\r\nexport class PositionBreakdownComponent {\r\n  constructor() {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./position-breakdown.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "extends": [],
            "templateData": "<div class=\"position-table\">\r\n  <h3 class=\"table-heading\">Position Breakdown</h3>\r\n  <ul class=\"positions\">\r\n    <!-- <li *ngFor=\"let pos of positions\">\r\n      <span>{{ pos.position }}</span\r\n      ><span>{{ pos.amount }}</span>\r\n    </li> -->\r\n  </ul>\r\n</div>\r\n"
        },
        {
            "name": "RosterComponent",
            "id": "component-RosterComponent-d9427955b97d4fbaa276b03247f2cd4b02a6fa1c20608122a3794061e82f360395476b462207174ce283ec0d6f93dd6111813b5af237d7d64305703227619e63",
            "file": "src/app/pages/roster/roster.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-roster",
            "styleUrls": [
                "./roster.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./roster.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-roster',\r\n  templateUrl: './roster.component.html',\r\n  styleUrls: ['./roster.component.scss'],\r\n})\r\nexport class RosterComponent {\r\n  constructor() {}\r\n\r\n  // sortData(sort: Sort) {\r\n  //   const data = this.pitchPlayers.concat(this.players);\r\n  //   if (!sort.active || sort.direction === '') {\r\n  //     this.sortedData = data;\r\n  //     return;\r\n  //   }\r\n\r\n  //   this.sortedData = data.sort((a, b) => {\r\n  //     const isAsc = sort.direction === 'asc';\r\n  //     switch (sort.active) {\r\n  //       case 'name':\r\n  //         return compare(a.lastNames[0], b.lastNames[0], isAsc);\r\n  //       case 'club':\r\n  //         return compare(a.club, b.club, isAsc);\r\n  //       case 'mainPositions':\r\n  //         return compare(a.mainPositions[0], b.mainPositions[0], isAsc);\r\n  //       case 'altPositions':\r\n  //         return compare(a.altPositions[0], b.altPositions[0], isAsc);\r\n  //       case 'foot':\r\n  //         return compare(a.foot, b.foot, isAsc);\r\n  //       case 'rating':\r\n  //         return compare(a.rating, b.rating, isAsc);\r\n  //       case 'age':\r\n  //         return compare(a.age, b.age, isAsc);\r\n  //       case 'nationality':\r\n  //         return compare(a.nationality, b.nationality, isAsc);\r\n  //       case 'roleDuty':\r\n  //         return compare(a.preferredRole, b.preferredRole, isAsc);\r\n  //       // case 'displayHeight': return compare(a.height, b.height, isAsc);\r\n  //       // case 'weight': return compare(a.weight, b.weight, isAsc);\r\n  //       default:\r\n  //         return 0;\r\n  //     }\r\n  //   });\r\n  // }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./roster.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "extends": [],
            "templateData": "<!-- <div #fullRosterTarget></div>\r\n<div class=\"display-container\" *ngIf=\"players.length > 0\">\r\n  <div class=\"main-heading\">\r\n    <button\r\n      mat-icon-button\r\n      (click)=\"goToRoster('topPage')\"\r\n      class=\"arrow-nav arrow-nav--bottom\"\r\n    >\r\n      <mat-icon>arrow_upward</mat-icon>\r\n    </button>\r\n    <h2>Full Roster</h2>\r\n  </div>\r\n\r\n  <app-position-breakdown></app-position-breakdown>\r\n  <h2 class=\"nation-name-heading\">{{ nationOrTier }} Team</h2>\r\n  <h3 class=\"table-heading\">Player Table</h3>\r\n  <table class=\"player-table\" matSort (matSortChange)=\"sortData($event)\">\r\n    <tr class=\"table-headings\">\r\n      <th mat-sort-header=\"name\">Name</th>\r\n      <th mat-sort-header=\"club\">Club</th>\r\n      <th mat-sort-header=\"nationality\">Nationality</th>\r\n      <th mat-sort-header=\"roleDuty\" class=\"desktop\">Preferred Role/Duty</th>\r\n      <th mat-sort-header=\"mainPositions\" class=\"desktop\">Position</th>\r\n      <th mat-sort-header=\"altPositions\" class=\"desktop\">Other Positions</th>\r\n      <th mat-sort-header=\"foot\" class=\"desktop\">Preferred Foot</th>\r\n      <th mat-sort-header=\"rating\">Rating</th>\r\n      <th mat-sort-header=\"age\">Age</th>\r\n    </tr>\r\n    <tbody>\r\n      <tr *ngFor=\"let player of sortedData\" class=\"player-row\">\r\n        <td>\r\n          <span *ngFor=\"let firstName of player.firstNames\">\r\n            {{ firstName }}\r\n          </span>\r\n          <span *ngFor=\"let lastName of player.lastNames\">\r\n            {{ lastName }}\r\n          </span>\r\n        </td>\r\n        <td>\r\n          <div class=\"capitalize\">\r\n            <img\r\n              [src]=\"player.clubLogo\"\r\n              [alt]=\"player.club\"\r\n              [matTooltip]=\"player.club\"\r\n              class=\"club-logo\"\r\n            />\r\n            <span class=\"desktop\">{{ player.club }}</span>\r\n          </div>\r\n        </td>\r\n        <td>\r\n          <div class=\"capitalize\">\r\n            <img\r\n              [src]=\"player.nationalityLogo\"\r\n              [alt]=\"player.nationality\"\r\n              [matTooltip]=\"player.nationality\"\r\n            />\r\n            <span class=\"desktop\">{{ player.nationality }}</span>\r\n          </div>\r\n        </td>\r\n        <td class=\"desktop\">\r\n          {{ player.preferredRole }} - {{ player.preferredDuty }}\r\n        </td>\r\n        <td>\r\n          <span\r\n            *ngFor=\"let pos of player.mainPositions\"\r\n            class=\"positions-span\"\r\n            >{{ pos }}</span\r\n          >\r\n        </td>\r\n        <td class=\"alt-positions desktop\">\r\n          <div>\r\n            <span\r\n              *ngFor=\"let pos of player.altPositions\"\r\n              class=\"positions-span\"\r\n              >{{ pos }}</span\r\n            >\r\n          </div>\r\n        </td>\r\n        <td class=\"desktop capitalize\">{{ player.foot }}</td>\r\n        <td>{{ player.rating }}</td>\r\n        <td class=\"desktop\">{{ player.age }}</td>\r\n      </tr>\r\n    </tbody>\r\n  </table>\r\n</div> -->\r\n"
        },
        {
            "name": "SimulationComponent",
            "id": "component-SimulationComponent-be0d7772af0be3a9365057c9c5c2a6aeabbecd85698bcb65514a8f230b030079087cd1a2f3a69a2657fe63e49b38cfcfdfc78ce42d760dba3a2f3ec48369a6f1",
            "file": "src/app/simulation/simulation.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-simulation",
            "styleUrls": [
                "./simulation.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./simulation.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "selectedNation",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GroupTeam | null",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "service",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SimulationService",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "changeSelectedNation",
                    "args": [
                        {
                            "name": "nation",
                            "type": "GroupTeam",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "nation",
                            "type": "GroupTeam",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onKeydownHandler",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'document:keydown.escape', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "document:keydown.escape",
                    "args": [],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21
                }
            ],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, HostListener } from '@angular/core';\r\nimport { GroupTeam } from 'app/models/nation.model';\r\nimport { SimulationService } from './simulation.service';\r\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\r\n\r\n@UntilDestroy()\r\n@Component({\r\n  selector: 'app-simulation',\r\n  templateUrl: './simulation.component.html',\r\n  styleUrls: ['./simulation.component.scss'],\r\n})\r\nexport class SimulationComponent {\r\n  service: SimulationService;\r\n  selectedNation: GroupTeam | null = null;\r\n\r\n  constructor(service: SimulationService) {\r\n    this.service = service;\r\n    service.selectedNation$.pipe(untilDestroyed(this)).subscribe(nation => (this.selectedNation = nation));\r\n  }\r\n\r\n  @HostListener('document:keydown.escape', ['$event']) onKeydownHandler() {\r\n    this.service.changeSelectedNation(null);\r\n  }\r\n\r\n  changeSelectedNation(nation?: GroupTeam) {\r\n    this.service.changeSelectedNation(nation || null);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\r\n",
                    "styleUrl": "./simulation.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "service",
                        "type": "SimulationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "service",
                        "type": "SimulationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<h1 class=\"text-center mt-12 text-3xl md:text-5xl\">Tournament Setup</h1>\r\n<app-tournament-form></app-tournament-form>\r\n<app-dashboard></app-dashboard>\r\n\r\n<router-outlet></router-outlet>\r\n\r\n<div class=\"h-screen w-full bg-black/25 fixed top-0 left-0\" *ngIf=\"service.isLoading$ | async\">\r\n  <!-- <mat-spinner class=\"z-10 fixed top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2\"></mat-spinner> -->\r\n</div>\r\n\r\n<app-nation-dialog *ngIf=\"selectedNation\" [class]=\"selectedNation ? 'show' : ''\" (click)=\"changeSelectedNation()\"></app-nation-dialog>\r\n"
        },
        {
            "name": "SquadRulesComponent",
            "id": "component-SquadRulesComponent-25cb7dada5e6e9a1bf7761a64acb8ec3f6438622707483dcfc583bee07e5eaed586481e78976d486a024c8e4c7da99c90f2e67d5e70088d0973b8a8396f498bd",
            "file": "src/app/shared/components/squad-rules/squad-rules.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-squad-rules",
            "styleUrls": [
                "./squad-rules.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./squad-rules.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-squad-rules',\r\n  templateUrl: './squad-rules.component.html',\r\n  styleUrls: ['./squad-rules.component.scss'],\r\n})\r\nexport class SquadRulesComponent implements OnInit {\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n\r\n  // checkSquadRules(countArr: number[]): boolean {\r\n  //   if (countArr[4] > 0) {\r\n  //     this.squadRules[0].check = '✅';\r\n  //   } else {\r\n  //     this.squadRules[0].check = '❌';\r\n  //   }\r\n  //   if (countArr[0] === 3) {\r\n  //     this.squadRules[1].check = '✅';\r\n  //   } else {\r\n  //     this.squadRules[1].check = '❌';\r\n  //   }\r\n  //   if (countArr[5] > 2 && countArr[5] < 5) {\r\n  //     this.squadRules[2].check = '✅';\r\n  //   } else {\r\n  //     this.squadRules[2].check = '❌';\r\n  //   }\r\n  //   if (countArr[1] > 5) {\r\n  //     this.squadRules[3].check = '✅';\r\n  //   } else {\r\n  //     this.squadRules[3].check = '❌';\r\n  //   }\r\n  //   if (countArr[6] > 1 && countArr[6] < 7) {\r\n  //     this.squadRules[4].check = '✅';\r\n  //   } else {\r\n  //     this.squadRules[4].check = '❌';\r\n  //   }\r\n  //   if (countArr[2] > 4) {\r\n  //     this.squadRules[5].check = '✅';\r\n  //   } else {\r\n  //     this.squadRules[5].check = '❌';\r\n  //   }\r\n  //   if (this.formation !== 'N/A') {\r\n  //     this.squadRules[6].check = '✅';\r\n  //   } else {\r\n  //     this.squadRules[6].check = '❌';\r\n  //   }\r\n\r\n  //   return !this.squadRules.find((rule) => rule.check === '❌');\r\n  // }\r\n\r\n  // getBackupPositions() {\r\n  //   const startingPositions: string[] = [];\r\n  //   this.pitchPlayers.forEach((player) => {\r\n  //     this.pitchPositions.forEach((pos) => {\r\n  //       if (player.pitchPosition === pos.position) {\r\n  //         startingPositions.push(pos.playerPosition);\r\n  //       }\r\n  //     });\r\n  //   });\r\n\r\n  //   const playersLeft = this.players.slice(0, 12);\r\n  //   for (let j = 0; j < this.players.slice(0, 12).length; j++) {\r\n  //     // for each player on the bench\r\n\r\n  //     let used = false;\r\n  //     const duplicates: string[] = [];\r\n\r\n  //     for (let i = 0; i < startingPositions.length; i++) {\r\n  //       const player = playersLeft[j];\r\n  //       // for each position in the starting lineup\r\n  //       if (\r\n  //         !duplicates.includes(startingPositions[i]) &&\r\n  //         startingPositions[i] !== ''\r\n  //       ) {\r\n  //         // if position hasn't already been used by same player\r\n  //         if (\r\n  //           player.mainPositions.find(\r\n  //             (mainPos) => mainPos === startingPositions[i]\r\n  //           )\r\n  //         ) {\r\n  //           // if main pos mathces\r\n  //           used = true;\r\n  //           duplicates.push(startingPositions[i]);\r\n  //           startingPositions[i] = '';\r\n  //         }\r\n\r\n  //         if (\r\n  //           player.altPositions.find(\r\n  //             (altPos) => altPos === startingPositions[i]\r\n  //           )\r\n  //         ) {\r\n  //           // if altPos matches\r\n  //           used = true;\r\n  //           duplicates.push(startingPositions[i]);\r\n  //           startingPositions[i] = '';\r\n  //         }\r\n  //       }\r\n  //     }\r\n  //     if (used) {\r\n  //       playersLeft.splice(j, 1, {} as Player);\r\n  //     }\r\n  //   }\r\n\r\n  //   this.squadRules[8].text = '';\r\n  //   for (let i = 0; i < startingPositions.length; i++) {\r\n  //     if (startingPositions[i] !== '') {\r\n  //       this.squadRules[8].text += ` ${startingPositions[i]}`;\r\n  //     }\r\n  //   }\r\n  //   if (this.squadRules[8].text === '') {\r\n  //     this.squadRules[7].check = '✅';\r\n  //   } else {\r\n  //     this.squadRules[7].check = '❌';\r\n  //   }\r\n  // }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./squad-rules.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"rules\">\r\n  <h4 class=\"rules-heading\">Squad Requirements</h4>\r\n  <hr />\r\n  <ul>\r\n    <!-- <li *ngFor=\"let rule of squadRules\">\r\n      <span>{{ rule.check }}</span> {{ rule.text }}\r\n    </li> -->\r\n  </ul>\r\n</div>\r\n"
        },
        {
            "name": "StarRatingComponent",
            "id": "component-StarRatingComponent-98f59a0af4faa47ec72ba68cfc662bd3cdf443f5d3bbb68eb0f2bb15d2414501cdddec34ac5c79f37f872c2d756bb6b0104d14ba97d1abd25514ac1956b33842",
            "file": "src/app/shared/components/star-rating/star-rating.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-star-rating",
            "styleUrls": [
                "./star-rating.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./star-rating.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "rating",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'rating-md'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "adjustedRating",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "screenWidth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "getScreenSize",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'window:resize', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "window:resize",
                    "args": [],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23
                }
            ],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, HostListener, Input } from '@angular/core';\r\nimport { checkHalfStar } from 'app/career/career.utils';\r\n\r\n@Component({\r\n  selector: 'app-star-rating',\r\n  templateUrl: './star-rating.component.html',\r\n  styleUrls: ['./star-rating.component.scss'],\r\n})\r\nexport class StarRatingComponent {\r\n  @Input() rating!: number;\r\n  @Input() size: string = 'rating-md';\r\n\r\n  adjustedRating: number;\r\n  screenWidth: number;\r\n\r\n  constructor() {\r\n    this.screenWidth = window.innerWidth;\r\n    this.getScreenSize();\r\n    this.adjustedRating = checkHalfStar(this.rating);\r\n  }\r\n\r\n  @HostListener('window:resize', ['$event'])\r\n  getScreenSize() {\r\n    this.screenWidth = window.innerWidth;\r\n  }\r\n\r\n  get stars() {\r\n    this.adjustedRating = checkHalfStar(this.rating);\r\n    return Array(Math.floor(this.adjustedRating)).fill(0);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./star-rating.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 14
            },
            "extends": [],
            "accessors": {
                "stars": {
                    "name": "stars",
                    "getSignature": {
                        "name": "stars",
                        "type": "",
                        "returnType": "",
                        "line": 27
                    }
                }
            },
            "templateData": "<div class=\"sm:text-2xl text-yellow-600 flex flex-nowrap\">\r\n  <fa-icon icon=\"star\" *ngFor=\"let star of stars\"></fa-icon>\r\n  <fa-icon icon=\"star-half\" *ngIf=\"adjustedRating % 1 !== 0\"></fa-icon>\r\n</div>\r\n"
        },
        {
            "name": "StatsOverviewComponent",
            "id": "component-StatsOverviewComponent-807d7da2a6b2d9e3df2f245f88a9b3a2b797f9abb801eb2e104368c88e374ac8f46a0b5b4447128424b07b7d2780ab154ae48e98ac6a1118398f73327c29f1f5",
            "file": "src/app/simulation/stats-overview/stats-overview.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-stats-overview",
            "styleUrls": [
                "./stats-overview.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./stats-overview.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "get",
                    "defaultValue": "_get",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "getDisplayRating",
                    "defaultValue": "getDisplayRating",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "rankings",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GroupTeam[][]",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "screenWidth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "service",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SimulationService",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "tournament",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Tournament | null",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "tournamentStats",
                    "defaultValue": "[\r\n    {\r\n      emoji: '🥇',\r\n    },\r\n    {\r\n      emoji: '🥈',\r\n    },\r\n    {\r\n      emoji: '🥉',\r\n    },\r\n    {\r\n      emoji: '📉',\r\n    },\r\n    {\r\n      emoji: '📈',\r\n    },\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 31
                }
            ],
            "methodsClass": [
                {
                    "name": "getScreenSize",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'window:resize', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "openNationStats",
                    "args": [
                        {
                            "name": "nation",
                            "type": "GroupTeam | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 97,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "nation",
                            "type": "GroupTeam | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "window:resize",
                    "args": [],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 93
                }
            ],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, HostListener } from '@angular/core';\r\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\r\nimport { GroupTeam } from 'app/models/nation.model';\r\nimport { Tournament } from 'app/simulation/simulation.model';\r\nimport { SimulationService } from 'app/simulation/simulation.service';\r\nimport { getDisplayRating } from 'app/simulation/simulation.utils';\r\nimport { get as _get } from 'lodash-es';\r\n\r\ninterface RankingsRow {\r\n  overall: GroupTeam;\r\n  attack: GroupTeam;\r\n  midfield: GroupTeam;\r\n  defense: GroupTeam;\r\n}\r\n\r\n@UntilDestroy()\r\n@Component({\r\n  selector: 'app-stats-overview',\r\n  templateUrl: './stats-overview.component.html',\r\n  styleUrls: ['./stats-overview.component.scss'],\r\n})\r\nexport class StatsOverviewComponent {\r\n  service: SimulationService;\r\n  screenWidth: number;\r\n  get = _get;\r\n  getDisplayRating = getDisplayRating;\r\n  tournament: Tournament | null = null;\r\n  // rankings: { heading: string; prop: string; class: string; nations?: GroupTeam[] }[] | null = null;\r\n  rankings: GroupTeam[][] = [];\r\n\r\n  tournamentStats = [\r\n    {\r\n      emoji: '🥇',\r\n    },\r\n    {\r\n      emoji: '🥈',\r\n    },\r\n    {\r\n      emoji: '🥉',\r\n    },\r\n    {\r\n      emoji: '📉',\r\n    },\r\n    {\r\n      emoji: '📈',\r\n    },\r\n  ];\r\n\r\n  constructor(service: SimulationService) {\r\n    this.service = service;\r\n    this.screenWidth = window.innerWidth;\r\n    this.getScreenSize();\r\n    service.tournament$.pipe(untilDestroyed(this)).subscribe(t => {\r\n      if (!t?.awards || !t?.allTeams) {\r\n        return;\r\n      }\r\n      this.tournament = t;\r\n      this.rankings = [];\r\n      for (let i = 0; i < t.allTeams.rankings.length; i++) {\r\n        this.rankings.push([t.allTeams.rankings[i], t.allTeams.attRankings[i], t.allTeams.midRankings[i], t.allTeams.defRankings[i]]);\r\n      }\r\n      // this.rankings = null;\r\n      // this.rankings = [\r\n      //   {\r\n      //     heading: 'Overall',\r\n      //     prop: 'r',\r\n      //     class: 'main',\r\n      //     nations: t.allTeams.rankings,\r\n      //   },\r\n      //   {\r\n      //     heading: 'Attack',\r\n      //     prop: 'attR',\r\n      //     class: 'att',\r\n      //     nations: t.allTeams.attRankings,\r\n      //   },\r\n      //   {\r\n      //     heading: 'Midfield',\r\n      //     prop: 'midR',\r\n      //     class: 'mid',\r\n      //     nations: t.allTeams.midRankings,\r\n      //   },\r\n      //   {\r\n      //     heading: 'Defense',\r\n      //     prop: 'defR',\r\n      //     class: 'def',\r\n      //     nations: t.allTeams.defRankings,\r\n      //   },\r\n      // ];\r\n    });\r\n  }\r\n\r\n  @HostListener('window:resize', ['$event'])\r\n  getScreenSize() {\r\n    this.screenWidth = window.innerWidth;\r\n  }\r\n\r\n  openNationStats(nation: GroupTeam | null) {\r\n    this.service.changeSelectedNation(nation);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'variables.scss';\r\n\r\n.stats {\r\n  font-size: 1.5rem;\r\n  padding: 1.5rem;\r\n  display: flex;\r\n  flex-flow: row wrap;\r\n\r\n  @media screen and (max-width: 600px) {\r\n    flex-flow: column;\r\n  }\r\n\r\n  >div {\r\n    display: flex;\r\n    flex-flow: column nowrap;\r\n    flex: 1;\r\n\r\n  }\r\n\r\n  h4 {\r\n    text-align: center;\r\n    font-size: 2.5rem;\r\n    padding: 0 0 1.5rem;\r\n  }\r\n\r\n  >ul >h4 {\r\n    padding-bottom: 1rem;\r\n  }\r\n\r\n  .nation-flag {\r\n    width: 2rem;\r\n    height: 2rem;\r\n    margin: 0 1rem;\r\n  }\r\n\r\n  li {\r\n    margin-bottom: 1rem;\r\n  }\r\n\r\n  .awards {\r\n    margin: 0 0 2rem;\r\n    @media screen and (max-width: 450px) {\r\n      flex: 1;\r\n    }\r\n  }\r\n\r\n  .stat {\r\n    display: flex;\r\n    align-items: center;\r\n    cursor: pointer;\r\n  }\r\n  .rankings {\r\n    display: flex;\r\n    flex-flow: wrap;\r\n    padding-left: 5rem;\r\n    @media screen and (max-width: 450px) {\r\n      padding-left: 0;\r\n    }\r\n\r\n    .heading {\r\n      padding: 1rem 1rem 1rem 0;\r\n      cursor: pointer;\r\n    }\r\n\r\n    details {\r\n      flex: 1;\r\n    }\r\n  }\r\n}\r\n",
                    "styleUrl": "./stats-overview.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "service",
                        "type": "SimulationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 47,
                "jsdoctags": [
                    {
                        "name": "service",
                        "type": "SimulationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"stats\">\r\n  <ul *ngIf=\"tournament?.awards\" class=\"awards\">\r\n    <h4>Awards</h4>\r\n    <li *ngFor=\"let award of tournament?.awards; let i = index\">\r\n      <div *ngIf=\"award\" class=\"stat\" (click)=\"openNationStats(award)\">\r\n        {{ tournamentStats[i].emoji }}\r\n        <img class=\"nation-flag\" [src]=\"award.logo\" [alt]=\"award.name\" />\r\n        <span>{{ award.name }}</span>\r\n      </div>\r\n    </li>\r\n  </ul>\r\n  <div *ngIf=\"tournament?.allTeams\">\r\n    <h4>World Rankings</h4>\r\n    <div class=\"overflow-x-auto\">\r\n      <table class=\"table table-compact table-zebra w-full\">\r\n        <thead>\r\n          <tr>\r\n            <th>#</th>\r\n            <th>Overall</th>\r\n            <th>Attack</th>\r\n            <th>Midfield</th>\r\n            <th>Defense</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr *ngFor=\"let row of rankings; let i = index\">\r\n            <th>{{ i + 1 }}</th>\r\n            <td *ngFor=\"let nation of row\">\r\n              <div class=\"cursor-pointer md:flex\" (click)=\"openNationStats(nation)\">\r\n                <img [src]=\"nation.logo\" [alt]=\"nation.name\" class=\"w-8 h-6 md:mr-4 drop-shadow-lg\" />\r\n                <!-- <img [src]=\"nation.logo\" [alt]=\"nation.name\" class=\"w-6 h-6 rounded object-cover md:mr-4 drop-shadow-lg\" /> -->\r\n                <span>{{ nation.abbreviation.toLocaleUpperCase() }}</span>\r\n              </div>\r\n            </td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "TournamentFormComponent",
            "id": "component-TournamentFormComponent-7e47944bc89c6dff3abcf652db38b3560d3e348c43642c9b484883a4acda149f4b4a399ef8894eae5b7d955c6a1875b10210280657c289b66c4b9164f3e02652",
            "file": "src/app/shared/components/tournament-form/tournament-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-tournament-form",
            "styleUrls": [
                "./tournament-form.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./tournament-form.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "buttonDisplay",
                    "defaultValue": "'Setup Tournament and Save'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "cannotSave",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "coaches",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Person[]",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "compareHosts",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 165
                },
                {
                    "name": "compareRegions",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 158
                },
                {
                    "name": "destroyRef",
                    "defaultValue": "inject(DestroyRef)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "drawData",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GroupTeam[][]",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "filteredNations",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GroupTeam[]",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "groupHosts",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 149
                },
                {
                    "name": "groupRegion",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 148
                },
                {
                    "name": "hostNations",
                    "defaultValue": "[...defaultHosts48]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GroupTeam[]",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "invalidHostsTooltip",
                    "defaultValue": "'Invalid hosts; please select different host(s) to setup.'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "leaderboard",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LeaderboardService",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "localData",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LeaderboardItem[] | null",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "nations",
                    "defaultValue": "nationsModule",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "nationsList",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GroupTeam[]",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "potentialHosts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GroupTeam[]",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "qualifier",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SimulationQualifiersService",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "regions",
                    "defaultValue": "regions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "simulator",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SimulationService",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "tournament",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Tournament | null",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "tournamentForm",
                    "defaultValue": "this.fb.group(\r\n    {\r\n      numOfGames: [1, Validators.required],\r\n      numOfTeams: [48, Validators.required],\r\n      availableRegions: [regions, Validators.required],\r\n      hostNations: [this.hostNations, [Validators.required, validateHosts]],\r\n    },\r\n    { validators: regionsValidator() }\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "user",
                    "defaultValue": "toSignal(this.auth.user$)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 51
                }
            ],
            "methodsClass": [
                {
                    "name": "cannotSaveCheck",
                    "args": [
                        {
                            "name": "availableRegions",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "6"
                        },
                        {
                            "name": "numOfGames",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "1"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 240,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "availableRegions",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "6",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "numOfGames",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "1",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "checkTournamentForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "compareArr",
                    "args": [
                        {
                            "name": "array1",
                            "type": "GroupTeam[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "array2",
                            "type": "GroupTeam[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 151,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "array1",
                            "type": "GroupTeam[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "array2",
                            "type": "GroupTeam[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createTeams",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 244,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "hostChanged",
                    "args": [
                        {
                            "name": "hosts",
                            "type": "GroupTeam[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 186,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "hosts",
                            "type": "GroupTeam[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "numOfGamesChanged",
                    "args": [
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 236,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "numOfTeamsChanged",
                    "args": [
                        {
                            "name": "str",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 222,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "str",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "regionChanged",
                    "args": [
                        {
                            "name": "regionSelected",
                            "type": "Region[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 172,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "regionSelected",
                            "type": "Region[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveTournament",
                    "args": [
                        {
                            "name": "awards",
                            "type": "[GroupTeam, GroupTeam, GroupTeam, GroupTeam, GroupTeam, , , , , , ]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "groups",
                            "type": "GroupTeam[][]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "hostNations",
                            "type": "GroupTeam[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 340,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "awards",
                            "type": "[GroupTeam, GroupTeam, GroupTeam, GroupTeam, GroupTeam, , , , , , ]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "groups",
                            "type": "GroupTeam[][]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "hostNations",
                            "type": "GroupTeam[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setupAndSaveTournament",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 129,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setupTournament",
                    "args": [
                        {
                            "name": "numOfGames",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "numOfTeams",
                            "type": "\"32\" | \"48\"",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "availableRegions",
                            "type": "Region[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "hostNations",
                            "type": "GroupTeam[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "save",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 254,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "numOfGames",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "numOfTeams",
                            "type": "\"32\" | \"48\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "availableRegions",
                            "type": "Region[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "hostNations",
                            "type": "GroupTeam[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "save",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "simulateTournament",
                    "args": [
                        {
                            "name": "tournament",
                            "type": "Tournament",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "numOfGames",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "save",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 313,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "tournament",
                            "type": "Tournament",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "numOfGames",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "save",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "simulateTournamentButton",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, DestroyRef, inject } from '@angular/core';\r\nimport { UntypedFormBuilder, Validators } from '@angular/forms';\r\nimport { AuthService } from '@core/services/auth.service';\r\nimport { getRandFloat } from '@shared/utils';\r\nimport { baseTeam, defaultHost32, defaultHosts48, GroupTeam, Nation } from 'app/models/nation.model';\r\nimport { Person } from 'app/models/player.model';\r\nimport { LeaderboardItem, LeaderboardService } from 'app/pages/leaderboard/leaderboard.service';\r\nimport { SimulationQualifiersService } from 'app/simulation/simulation-qualifiers.service';\r\nimport { Region, Tournament } from 'app/simulation/simulation.model';\r\nimport { SimulationService } from 'app/simulation/simulation.service';\r\nimport { addRankings, getHostNations, regions, regionsValidator, validateHosts } from 'app/simulation/simulation.utils';\r\nimport nationsModule from 'assets/json/nations.json';\r\nimport { filter, take } from 'rxjs/operators';\r\nimport { takeUntilDestroyed, toSignal } from '@angular/core/rxjs-interop';\r\n\r\n@Component({\r\n  selector: 'app-tournament-form',\r\n  templateUrl: './tournament-form.component.html',\r\n  styleUrls: ['./tournament-form.component.scss'],\r\n})\r\nexport class TournamentFormComponent {\r\n  simulator: SimulationService;\r\n  qualifier: SimulationQualifiersService;\r\n  leaderboard: LeaderboardService;\r\n  regions = regions;\r\n  nations = nationsModule;\r\n  nationsList: GroupTeam[] = [];\r\n  filteredNations: GroupTeam[];\r\n  tournament: Tournament | null = {};\r\n  cannotSave = true;\r\n  localData: LeaderboardItem[] | null = null;\r\n  drawData: GroupTeam[][] = [];\r\n  coaches: Person[] = [];\r\n  destroyRef = inject(DestroyRef);\r\n\r\n  hostNations: GroupTeam[] = [...defaultHosts48];\r\n  potentialHosts: GroupTeam[];\r\n  buttonDisplay = 'Setup Tournament and Save';\r\n  invalidHostsTooltip = 'Invalid hosts; please select different host(s) to setup.';\r\n\r\n  tournamentForm = this.fb.group(\r\n    {\r\n      numOfGames: [1, Validators.required],\r\n      numOfTeams: [48, Validators.required],\r\n      availableRegions: [regions, Validators.required],\r\n      hostNations: [this.hostNations, [Validators.required, validateHosts]],\r\n    },\r\n    { validators: regionsValidator() }\r\n  );\r\n\r\n  user = toSignal(this.auth.user$);\r\n\r\n  constructor(\r\n    simulator: SimulationService,\r\n    qualifier: SimulationQualifiersService,\r\n    leaderboard: LeaderboardService,\r\n    private auth: AuthService,\r\n    private fb: UntypedFormBuilder\r\n  ) {\r\n    this.simulator = simulator;\r\n    this.qualifier = qualifier;\r\n    this.leaderboard = leaderboard;\r\n\r\n    this.cannotSaveCheck();\r\n    this.createTeams();\r\n\r\n    // const updatedNations = this.simulator.getPersonInfo(this.nationsList);\r\n    const updatedNations = this.nationsList;\r\n\r\n    this.filteredNations = updatedNations.length === 156 ? updatedNations : this.nationsList;\r\n\r\n    const numOfTeams: 32 | 48 = this.tournamentForm.value.numOfTeams;\r\n    const numOfGames: number = this.tournamentForm.value.numOfGames;\r\n    this.potentialHosts = [];\r\n    this.coaches = this.leaderboard.fetchLocalNames() || [];\r\n    this.setupTournament(numOfGames, numOfTeams, regions, this.hostNations);\r\n  }\r\n\r\n  checkTournamentForm() {\r\n    const {\r\n      numOfGames,\r\n      numOfTeams,\r\n      availableRegions,\r\n      hostNations,\r\n    }: { numOfGames: number; numOfTeams: 32 | 48; availableRegions: Region[]; hostNations: GroupTeam[] } = this.tournamentForm.value;\r\n    console.log('CHECK TOURNAMENT FORM FUNC');\r\n    this.setupTournament(numOfGames, numOfTeams, availableRegions, hostNations);\r\n  }\r\n\r\n  simulateTournamentButton() {\r\n    if (!this.tournament?.groups) {\r\n      return;\r\n    }\r\n    this.simulateTournament(this.tournament, this.tournamentForm.value.numOfGames);\r\n  }\r\n\r\n  // addCoaches() {\r\n  //   if (!window.confirm('This may take a minute. Are you sure?')) {\r\n  //     return;\r\n  //   }\r\n  //   this.simulator.isLoading$.next(true);\r\n  //   forkJoin(this.simulator.getCoachInfo(this.nationsList))\r\n  //     .pipe(takeUntilDestroyed(this.destroyRef))\r\n  //     .subscribe(names => {\r\n  //       const coachesArr: Person[] = names.map(n => {\r\n  //         const potentialAges = [getRandomInt(35, 75), getRandomInt(45, 65), getRandomInt(45, 65)];\r\n  //         const age = potentialAges[getRandomInt(0, 2)];\r\n  //         const { firstNames, lastNames, firstNameUsage, lastNameUsage, nationality } = n;\r\n  //         return {\r\n  //           ...n,\r\n  //           firstNames: firstNames,\r\n  //           lastNames: lastNames,\r\n  //           singleLastName: pickSingleLastName(lastNames),\r\n  //           origin: nationality,\r\n  //           personality: getRandomPersonality(),\r\n  //           firstNameUsage,\r\n  //           lastNameUsage,\r\n  //           nationality,\r\n  //           age,\r\n  //         };\r\n  //       });\r\n  //       this.leaderboard.saveLocalStorage('names', coachesArr);\r\n  //       this.coaches = coachesArr;\r\n  //       this.simulator.isLoading$.next(false);\r\n  //       this.snackbar.open('Coaches successfully added. Setup new tournament to see coaches.', 'Dismiss');\r\n  //     });\r\n  // }\r\n\r\n  setupAndSaveTournament() {\r\n    const {\r\n      numOfGames,\r\n      numOfTeams,\r\n      availableRegions,\r\n      hostNations,\r\n    }: { numOfGames: number; numOfTeams: 32 | 48; availableRegions: Region[]; hostNations: GroupTeam[] } = this.tournamentForm.value;\r\n\r\n    this.localData = this.leaderboard.fetchLocalStorage();\r\n    if (this.user()) {\r\n      this.setupTournament(numOfGames, numOfTeams, availableRegions, hostNations, true);\r\n    } else if (this.localData && this.localData?.length > 9) {\r\n      // this.snackbar.open('Already saved 10 Tournaments. Please wait 24 hours to save a new one.', 'Dismiss');\r\n    } else if (!this.user()) {\r\n      // this.snackbar.open('Please login before submitting', 'Dismiss');\r\n    }\r\n    return;\r\n  }\r\n\r\n  groupRegion = () => 'World';\r\n  groupHosts = (host: GroupTeam) => host.region.toUpperCase();\r\n\r\n  compareArr(array1: GroupTeam[], array2: GroupTeam[]) {\r\n    if (array1 && array2 && array1.length === array2.length) {\r\n      return array1.every(t => array2.map(n => n.name).includes(t.name));\r\n    }\r\n    return false;\r\n  }\r\n\r\n  compareRegions = (item: Region, selected: Region) => {\r\n    if (selected.value && item.value) {\r\n      return item.value === selected.value;\r\n    }\r\n    return false;\r\n  };\r\n\r\n  compareHosts = (item: GroupTeam, selected: GroupTeam) => {\r\n    if (selected.name && item.name) {\r\n      return item.name === selected.name;\r\n    }\r\n    return false;\r\n  };\r\n\r\n  regionChanged(regionSelected: Region[]) {\r\n    if (!regionSelected) {\r\n      return;\r\n    }\r\n    const regionValues = regionSelected.map(r => r.value);\r\n    const numOfTeams = this.tournamentForm.value.numOfTeams;\r\n\r\n    this.filteredNations = this.nationsList.filter(nation => regionValues.includes(nation.region));\r\n    const newHostNations = this.tournamentForm.value.hostNations.filter((nation: GroupTeam) => regionValues.includes(nation.region));\r\n    this.tournamentForm.patchValue({ hostNations: newHostNations });\r\n    this.potentialHosts = getHostNations(this.filteredNations, numOfTeams);\r\n    this.cannotSaveCheck(regionSelected.length, this.tournamentForm.value.numOfGames);\r\n  }\r\n\r\n  hostChanged(hosts: GroupTeam[]) {\r\n    const numOfTeams: number = this.tournamentForm.value.numOfTeams;\r\n    const maxSelectedItems = numOfTeams > 32 ? 4 : 2;\r\n    const numOfHosts = hosts.length;\r\n    if (numOfHosts === maxSelectedItems) {\r\n      this.potentialHosts = [];\r\n    } else if (numOfHosts > 0) {\r\n      const filterHosts48 = () => {\r\n        if (numOfHosts === 1) {\r\n          return [\r\n            ...new Set(\r\n              hosts\r\n                .flatMap(h => h.cohosts48)\r\n                .concat(\r\n                  hosts.flatMap(h => h.triHosts48),\r\n                  hosts.flatMap(h => h.quadHosts48)\r\n                )\r\n            ),\r\n          ].filter(str => !hosts.flatMap(h => h.name).includes(str));\r\n        } else if (numOfHosts === 2) {\r\n          const possibleHosts = hosts[0].triHosts48\r\n            .filter(h => hosts[1].triHosts48.includes(h))\r\n            .concat(hosts[0].quadHosts48.filter(h => hosts[1].quadHosts48.includes(h)));\r\n          return [...new Set(possibleHosts)].filter(str => !hosts.flatMap(h => h.name).includes(str));\r\n        } else {\r\n          const possibleHosts = hosts[0].quadHosts48.filter(h => hosts[1].quadHosts48.includes(h) && hosts[2].quadHosts48.includes(h));\r\n          return [...new Set(possibleHosts)].filter(str => !hosts.flatMap(h => h.name).includes(str));\r\n        }\r\n      };\r\n      const cohosts: string[] = numOfTeams > 32 ? filterHosts48() : hosts.flatMap(h => h.cohosts32);\r\n      this.potentialHosts = getHostNations(this.filteredNations, numOfTeams).filter(c => cohosts.includes(c.name));\r\n    } else {\r\n      this.potentialHosts = getHostNations(this.filteredNations, numOfTeams);\r\n    }\r\n  }\r\n\r\n  numOfTeamsChanged(str: string) {\r\n    const numOfTeams = parseInt(str, 10);\r\n    this.tournamentForm.patchValue({ numOfTeams });\r\n\r\n    const hostNations = [];\r\n    if (numOfTeams === 48) {\r\n      hostNations.push(...defaultHosts48);\r\n    } else if (numOfTeams === 32) {\r\n      hostNations.push(defaultHost32);\r\n    }\r\n    this.tournamentForm.patchValue({ hostNations });\r\n    this.hostChanged(this.tournamentForm.value.hostNations);\r\n  }\r\n\r\n  numOfGamesChanged(value: number) {\r\n    this.cannotSaveCheck(this.tournamentForm.value.availableRegions.length, value);\r\n  }\r\n\r\n  cannotSaveCheck(availableRegions = 6, numOfGames = 1) {\r\n    this.cannotSave = !(this.tournamentForm.valid && availableRegions === 6 && numOfGames === 1);\r\n  }\r\n\r\n  createTeams() {\r\n    this.simulator.tournament$.next(null);\r\n    this.nationsList = [];\r\n    this.nations.forEach(tier => {\r\n      for (const nation of tier.nations) {\r\n        this.nationsList.push(baseTeam(this.tournamentForm.value.hostNations, nation as Nation));\r\n      }\r\n    });\r\n  }\r\n\r\n  setupTournament(numOfGames: number, numOfTeams: 32 | 48, availableRegions: Region[], hostNations: GroupTeam[], save?: boolean): void {\r\n    // console.log('TESTS\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nSETUP TOURNAMENT', numOfTeams);\r\n    this.createTeams();\r\n\r\n    if (this.coaches.length > 0) {\r\n      this.nationsList = this.nationsList.map(n => {\r\n        const coach = this.coaches.find(c => c.nationality === n.name);\r\n        if (coach) {\r\n          // only coaches in their prime years are allowed to be at the top\r\n          const ageTax = coach.age > 65 || coach.age < 45 ? 9 : 0;\r\n          const lowerRating = n.rating - 15 > 25 ? n.rating - 15 : 25;\r\n          const higherRating = n.rating + 15 < 99 - ageTax ? n.rating + 15 : 99 - ageTax;\r\n          return {\r\n            ...n,\r\n            coach: {\r\n              ...coach,\r\n              rating: getRandFloat(lowerRating, higherRating),\r\n            },\r\n          };\r\n        }\r\n        return n;\r\n      });\r\n    }\r\n\r\n    const nations = addRankings(this.nationsList, this.coaches.length > 0);\r\n    const allTeams = {\r\n      rankings: [...nations],\r\n      attRankings: [...nations.sort((a, b) => a.attRanking - b.attRanking)],\r\n      midRankings: [...nations.sort((a, b) => a.midRanking - b.midRanking)],\r\n      defRankings: [...nations.sort((a, b) => a.defRanking - b.defRanking)],\r\n    };\r\n    const teams = this.qualifier.chooseQualifyingTeams(availableRegions, numOfTeams, nations, hostNations);\r\n    const numOfGroups = teams.length / 4; // groups of 4\r\n    const teamsInGroup = teams.length / numOfGroups; // usually going to be 4\r\n\r\n    this.qualifier.organizeGroups(teams, teamsInGroup, numOfTeams, hostNations, availableRegions);\r\n\r\n    this.simulator.tournament$\r\n      .pipe(\r\n        takeUntilDestroyed(this.destroyRef),\r\n        filter(t => (t?.groups ? true : false)),\r\n        take(1)\r\n      )\r\n      .subscribe(t => {\r\n        if (!t?.groups) {\r\n          return;\r\n        }\r\n        const tournament = { allTeams, availableRegions, hostNations, ...t };\r\n        this.simulator.tournament$.next({\r\n          groups: tournament.groups,\r\n          allTeams,\r\n          availableRegions,\r\n          hostNations,\r\n        });\r\n\r\n        this.simulateTournament(tournament, numOfGames, save);\r\n      });\r\n  }\r\n\r\n  simulateTournament(tournament: Tournament, numOfGames: number, save?: boolean): void {\r\n    const groupsArr = tournament.groups || [];\r\n\r\n    const hostNations = tournament.hostNations;\r\n    const allTeams = tournament.allTeams;\r\n    const availableRegions = tournament.availableRegions;\r\n    const groups = this.simulator.simulateGroups(numOfGames, groupsArr);\r\n    const { bracket, groupWinners } = this.simulator.simulateBracket(groups);\r\n    const awards = this.simulator.getTournamentAwards(bracket, groups, availableRegions);\r\n    const newTournament = {\r\n      groups,\r\n      groupWinners,\r\n      bracket,\r\n      awards,\r\n      allTeams,\r\n      availableRegions,\r\n    };\r\n\r\n    this.simulator.tournament$.next(newTournament);\r\n    this.tournament = newTournament;\r\n    console.log(this.tournament);\r\n\r\n    if (save) {\r\n      this.saveTournament(awards, groups, hostNations);\r\n    }\r\n  }\r\n\r\n  saveTournament(\r\n    awards: [\r\n      GroupTeam,\r\n      GroupTeam,\r\n      GroupTeam,\r\n      GroupTeam,\r\n      GroupTeam,\r\n      (GroupTeam | undefined)?,\r\n      (GroupTeam | undefined)?,\r\n      (GroupTeam | undefined)?,\r\n      (GroupTeam | undefined)?,\r\n      (GroupTeam | undefined)?,\r\n      (GroupTeam | undefined)?,\r\n    ],\r\n    groups: GroupTeam[][],\r\n    hostNations?: GroupTeam[]\r\n  ) {\r\n    const data = this.localData || [];\r\n    if (data.length === 10 && new Date().toDateString() === data[0]?.time) {\r\n      // this.snackbar.open('Cannot submit more than 10 tournaments per day.', 'Dismiss');\r\n      // return;\r\n    }\r\n    // can save 10 tournaments per day, otherwise must wait 24 hours since 10th tournament\r\n    const filteredData = data.length > 9 ? data.slice(Math.max(data.length - 9, 0)) : data;\r\n\r\n    const hosts = groups.flat().filter(n => hostNations?.includes(n));\r\n    const worstRank = groups.flat().reduce((prev, curr) => (prev.ranking < curr.ranking || !hosts.includes(curr) ? curr : prev));\r\n    filteredData.push({\r\n      time: new Date().toDateString(),\r\n      tournament: {\r\n        winner: awards[0].name,\r\n        winnerRank: awards[0].ranking,\r\n        worst: worstRank.name,\r\n        worstRank: worstRank.ranking,\r\n        second: awards[1].name,\r\n        third: awards[2].name,\r\n      },\r\n    });\r\n    console.log(filteredData);\r\n    this.leaderboard.saveLocalStorage('tournamentSubmitted24Hours', filteredData);\r\n    // this.snackbar.open('Tournament Submitted', 'Dismiss');\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./tournament-form.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "simulator",
                        "type": "SimulationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "qualifier",
                        "type": "SimulationQualifiersService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "leaderboard",
                        "type": "LeaderboardService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "auth",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fb",
                        "type": "UntypedFormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 51,
                "jsdoctags": [
                    {
                        "name": "simulator",
                        "type": "SimulationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "qualifier",
                        "type": "SimulationQualifiersService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "leaderboard",
                        "type": "LeaderboardService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "auth",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fb",
                        "type": "UntypedFormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"flex flex-col mx-8 py-8\">\r\n  <form class=\"flex flex-col\" [formGroup]=\"tournamentForm\" (ngSubmit)=\"checkTournamentForm()\">\r\n    <div class=\"flex flex-col justify-center text-xl items-center\">\r\n      <div class=\"mx-8 mb-4 flex flex-col justify-between items-start w-full md:w-1/2\">\r\n        <label for=\"hostNations\">Host Nation(s)</label>\r\n        <ng-select\r\n          formControlName=\"hostNations\"\r\n          [items]=\"potentialHosts\"\r\n          [multiple]=\"true\"\r\n          placeholder=\"Please Select A Host Nation(s)\"\r\n          (ngModelChange)=\"hostChanged($event)\"\r\n          [compareWith]=\"compareHosts\"\r\n          bindLabel=\"name\"\r\n          [groupBy]=\"groupHosts\"\r\n          required\r\n          class=\"w-full\">\r\n          <ng-template ng-multi-label-tmp let-items=\"items\" let-clear=\"clear\">\r\n            <div class=\"ng-value flex\" *ngFor=\"let item of items\">\r\n              <span class=\"flex items-center px-1\"\r\n                ><img [src]=\"item.logo\" [alt]=\"item.name\" class=\"h-4 w-6 object-cover mr-1 drop-shadow-lg\" /> {{ item.name }}</span\r\n              >\r\n              <span class=\"ng-value-icon right\" (click)=\"clear(item)\" aria-hidden=\"true\">x</span>\r\n            </div>\r\n          </ng-template>\r\n          <ng-template ng-option-tmp let-item=\"item\">\r\n            <span class=\"flex items-center\">\r\n              <img [src]=\"item.logo\" [alt]=\"item.name\" class=\"h-4 w-6 object-cover mr-1 drop-shadow-lg\" /> {{ item.name }}</span\r\n            >\r\n          </ng-template>\r\n        </ng-select>\r\n      </div>\r\n      <!-- TEMPORARILY DISABLED UNTIL FIXED -->\r\n      <!-- <div class=\"mx-8 mb-4 flex flex-col justify-between items-start w-full md:w-1/2\">\r\n        <label for=\"region\">Regions Available</label>\r\n        <ng-select\r\n          formControlName=\"availableRegions\"\r\n          [items]=\"regions\"\r\n          [multiple]=\"true\"\r\n          [selectableGroup]=\"true\"\r\n          [selectableGroupAsModel]=\"false\"\r\n          [closeOnSelect]=\"false\"\r\n          [groupBy]=\"groupRegion\"\r\n          (ngModelChange)=\"regionChanged($event)\"\r\n          [compareWith]=\"compareRegions\"\r\n          required\r\n          placeholder=\"Please Select A Region\"\r\n          class=\"w-full\">\r\n        </ng-select>\r\n      </div> -->\r\n\r\n      <div class=\"mx-8 mb-4 flex flex-col justify-between items-start w-full md:w-1/2\">\r\n        <label for=\"numOfTeams\">Number of Teams</label>\r\n        <select formControlName=\"numOfTeams\" (ngModelChange)=\"numOfTeamsChanged($event)\" required class=\"border p-1 rounded w-full h-10\">\r\n          <option value=\"48\">48 - World Cup (2026)</option>\r\n          <option value=\"32\" disabled>32 - World Cup (1998-2022)</option>\r\n          <option value=\"24\" disabled>24 - EUROS, AFCON</option>\r\n          <option value=\"12\" disabled>12 - Copa América</option>\r\n        </select>\r\n      </div>\r\n\r\n      <div class=\"mx-8 mb-4 flex flex-col justify-between items-start w-full md:w-1/2\">\r\n        <label for=\"numOfGames\">Group Games Per Opponent (1-3)</label>\r\n        <input\r\n          type=\"number\"\r\n          formControlName=\"numOfGames\"\r\n          min=\"1\"\r\n          max=\"3\"\r\n          (ngModelChange)=\"numOfGamesChanged($event)\"\r\n          class=\"border p-1 rounded w-full h-10\" />\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"space-y-4 flex flex-col md:flex-row md:space-y-0 md:space-x-5 md:justify-center\">\r\n      <div *ngIf=\"!tournamentForm.valid\" class=\"tooltip\" data-tip=\"Invalid hosts; please select different host(s) to setup.\">\r\n        <button type=\"submit\" disabled class=\"btn btn-disabled\">Setup Tournament</button>\r\n      </div>\r\n      <button *ngIf=\"tournamentForm.valid\" type=\"submit\" class=\"btn\">Setup Tournament</button>\r\n\r\n      <!-- <button type=\"button\" *ngIf=\"user() && coaches.length < 1\" (click)=\"addCoaches()\" class=\"btn disabled:btn-disabled\">\r\n        Add Coaches (Beta)\r\n      </button> -->\r\n      <!-- <button\r\n        type=\"button\"\r\n        [disabled]=\"!tournamentForm.valid || cannotSave\"\r\n        (click)=\"setupAndSaveTournament()\"\r\n        class=\"btn disabled:btn-disabled\">\r\n        {{ buttonDisplay }}\r\n      </button> -->\r\n    </div>\r\n  </form>\r\n  <button\r\n    class=\"button\"\r\n    *ngIf=\"tournament?.groups\"\r\n    (click)=\"simulateTournamentButton()\"\r\n    class=\"btn btn-primary disabled:btn-disabled my-8 md:mx-auto md:w-80\">\r\n    Simulate\r\n  </button>\r\n</div>\r\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-73191415d064198bd722233ee50ad83ea2fc3ac0a12b1152bd53970f0f0f91fd9064ade33b7ae55cc6f0728c483808097588ae5d1144523ccd9207eb889c1ed3",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { SharedModule } from '@shared/shared.module';\r\nimport { CoreModule } from '@core/core.module';\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\n\r\nimport { HomeComponent } from './pages/home/home.component';\r\nimport { LeaderboardComponent } from './pages/leaderboard/leaderboard.component';\r\nimport { LineupComponent } from './pages/lineup/lineup.component';\r\nimport { RosterComponent } from './pages/roster/roster.component';\r\nimport { LoginComponent } from './pages/login/login.component';\r\nimport { BuildRosterComponent } from './pages/build-roster/build-roster.component';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\n\r\n@NgModule({\r\n  declarations: [AppComponent, HomeComponent, LeaderboardComponent, LineupComponent, RosterComponent, LoginComponent, BuildRosterComponent],\r\n  imports: [BrowserModule, AppRoutingModule, SharedModule, CoreModule, CommonModule, BrowserAnimationsModule],\r\n  providers: [],\r\n  bootstrap: [AppComponent],\r\n})\r\nexport class AppModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "BuildRosterComponent"
                        },
                        {
                            "name": "LeaderboardComponent"
                        },
                        {
                            "name": "LineupComponent"
                        },
                        {
                            "name": "LoginComponent"
                        },
                        {
                            "name": "RosterComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "CoreModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-71de8a1bc47e0b9994a193a6f76bdc3900d701f159639130164d0817f0a70cf9101f241956f0c1032c8df325587bad9fb18add40cb139c71ad0fa41637819e8e",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { AuthGuard } from '@core/services/auth.guard';\r\nimport { LeaderboardComponent } from './pages/leaderboard/leaderboard.component';\r\nimport { LoginComponent } from './pages/login/login.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    redirectTo: 'moba',\r\n    pathMatch: 'full',\r\n  },\r\n  {\r\n    path: 'simulation',\r\n    loadChildren: () => \"import('./simulation/simulation.module').then(m => m.SimulationModule)\",\r\n  },\r\n  {\r\n    path: 'leaderboard',\r\n    component: LeaderboardComponent,\r\n  },\r\n  { path: 'login', component: LoginComponent, canActivate: [AuthGuard] },\r\n  {\r\n    path: 'career',\r\n    loadChildren: () => \"import('./career/career.module').then(m => m.CareerModule)\",\r\n  },\r\n  {\r\n    path: 'moba',\r\n    loadChildren: () => \"import('./moba/moba.module').then(m => m.MobaModule)\",\r\n  },\r\n  { path: '**', redirectTo: '/simulation/group-stage' },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class AppRoutingModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CareerModule",
            "id": "module-CareerModule-6a95fac61a8cb9af013e7937cdfb765a7baae4c0e4b10f7d00727c600d4ccee3dbfefde4957bb958cd9eacd8095fdc77c7fb65fbc2f95ef69e57c046078e50dd",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/career/career.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { SharedModule } from '@shared/shared.module';\r\nimport { CareerComponent } from './career.component';\r\nimport { CareerService } from './career.service';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: CareerComponent,\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  declarations: [CareerComponent],\r\n  providers: [CareerService],\r\n  imports: [CommonModule, SharedModule, RouterModule.forChild(routes)],\r\n})\r\nexport class CareerModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "CareerService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "CareerComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CoreModule",
            "id": "module-CoreModule-99dee728e7236c3981851b60325d17ae620114148c6bf4cd605c0ffecfc0844456df7d453d5cc5fcf6d8dddfa7dd24dce51aea845066b0edc1f932b28fd4a678",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/core/core.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { provideFirestore, getFirestore } from '@angular/fire/firestore';\r\nimport { provideAuth, getAuth } from '@angular/fire/auth';\r\nimport { initializeApp, provideFirebaseApp } from '@angular/fire/app';\r\nimport { environment } from '@env';\r\n\r\n@NgModule({\r\n  imports: [\r\n    provideFirebaseApp(() => initializeApp(environment.firebase)),\r\n    provideAuth(() => getAuth()),\r\n    provideFirestore(() => getFirestore()),\r\n  ],\r\n})\r\nexport class CoreModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "provideAuth(() => getAuth())"
                        },
                        {
                            "name": "provideFirebaseApp(() => initializeApp(environment"
                        },
                        {
                            "name": "provideFirestore(() => getFirestore())"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "MobaModule",
            "id": "module-MobaModule-26ef22e7cb17c077069b6491b7c30a8b06f4e6cfc7b98ed72b60a403fab73b45ff5f09b7b51f66808bd67368fe25b6d69a3b0d816286c1348bdb9f8312645e6b",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/moba/moba.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HomeComponent } from './home/home.component';\nimport { RouterModule, Routes } from '@angular/router';\nimport { SharedModule } from '@shared/shared.module';\nimport { MobaService } from './moba.service';\nimport { PlayerSelectComponent } from './player-select/player-select.component';\nimport { DraftComponent } from './draft/draft.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: HomeComponent,\n    children: [\n      { path: 'player-select', component: PlayerSelectComponent },\n      { path: 'draft', component: DraftComponent },\n      { path: '', redirectTo: 'draft', pathMatch: 'full' },\n    ],\n  },\n];\n\n@NgModule({\n  declarations: [HomeComponent, PlayerSelectComponent, DraftComponent],\n  providers: [MobaService],\n  imports: [CommonModule, SharedModule, RouterModule.forChild(routes)],\n})\nexport class MobaModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "MobaService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DraftComponent"
                        },
                        {
                            "name": "HomeComponent"
                        },
                        {
                            "name": "PlayerSelectComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SharedModule",
            "id": "module-SharedModule-6b3f819ad8b307d924ddf95454015a4fcefecc4430f44719b6965f3e461f913887019ee723501126a4233895433eaac65ba98150a4423f6bc3fee7cad6551db1",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/shared/shared.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { RouterModule } from '@angular/router';\r\nimport { NgSelectModule } from '@ng-select/ng-select';\r\n\r\nimport { FontAwesomeModule, FaIconLibrary } from '@fortawesome/angular-fontawesome';\r\nimport { faBars, faStar, faXmark, faStarHalf } from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport * as fromComponents from './components';\r\nimport { ClickStopPropagationDirective } from './directives/click-stop-propagation.directive';\r\nimport { MemoizerPipe } from './pipes/memoizer.pipe';\r\nimport { StarRatingComponent } from './components/star-rating/star-rating.component';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n@NgModule({\r\n  declarations: [...fromComponents.components, ClickStopPropagationDirective, MemoizerPipe, StarRatingComponent],\r\n  imports: [RouterModule, ReactiveFormsModule, FormsModule, FontAwesomeModule, NgSelectModule, CommonModule],\r\n  exports: [NgSelectModule, ReactiveFormsModule, FormsModule, MemoizerPipe, ...fromComponents.components],\r\n})\r\nexport class SharedModule {\r\n  constructor(library: FaIconLibrary) {\r\n    library.addIcons(faBars, faXmark, faStar, faStarHalf);\r\n  }\r\n}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ClickStopPropagationDirective"
                        },
                        {
                            "name": "MemoizerPipe"
                        },
                        {
                            "name": "StarRatingComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "MemoizerPipe"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SimulationModule",
            "id": "module-SimulationModule-4a23a2d3bd29578970e269f8f2f70e796874f399f2874bb9407235fe921aee57dd0637d0d8e2005979c707efbf81bcba8ae04c868a5ae9e4911d57a3689cbc75",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/simulation/simulation.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { SimulationComponent } from './simulation.component';\r\nimport { SharedModule } from '@shared/shared.module';\r\nimport { SimulationService } from './simulation.service';\r\nimport { SimulationQualifiersService } from './simulation-qualifiers.service';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { GroupStageComponent } from './group-stage/group-stage.component';\r\nimport { KnockoutStageComponent } from './knockout-stage/knockout-stage.component';\r\nimport { StatsOverviewComponent } from './stats-overview/stats-overview.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: SimulationComponent,\r\n    children: [\r\n      {\r\n        path: 'group-stage',\r\n        component: GroupStageComponent,\r\n      },\r\n      {\r\n        path: 'bracket',\r\n        component: KnockoutStageComponent,\r\n      },\r\n      {\r\n        path: 'stats-overview',\r\n        component: StatsOverviewComponent,\r\n      },\r\n      { path: '', redirectTo: 'group-stage', pathMatch: 'full' },\r\n    ],\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  declarations: [SimulationComponent, GroupStageComponent, StatsOverviewComponent, KnockoutStageComponent],\r\n  providers: [SimulationService, SimulationQualifiersService],\r\n  imports: [CommonModule, SharedModule, RouterModule.forChild(routes)],\r\n})\r\nexport class SimulationModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "SimulationQualifiersService"
                        },
                        {
                            "name": "SimulationService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "GroupStageComponent"
                        },
                        {
                            "name": "KnockoutStageComponent"
                        },
                        {
                            "name": "SimulationComponent"
                        },
                        {
                            "name": "StatsOverviewComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "ageFactor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/career/career.constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(age: number, ability: number, hasLoanOption: boolean) => {\r\n  const limitYouthClub = false;\r\n  if (age < 18 && !limitYouthClub && !hasLoanOption) {\r\n    return CLUB_MULTIPLIER * 400;\r\n  } else {\r\n    return playerToClubAbility(ability);\r\n  }\r\n}"
            },
            {
                "name": "AllGameStates",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/moba/player/player.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "GameState[]",
                "defaultValue": "['early-game', 'mid-game', 'late-game']"
            },
            {
                "name": "allNations",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/models/nation.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => {\r\n  const newArr = nationsJson;\r\n  const nations: Nation[] = [];\r\n\r\n  Object.values(newArr).forEach(t => {\r\n    if (t.nations) {\r\n      nations.push(...(t.nations as Nation[]));\r\n    }\r\n  });\r\n\r\n  return nations;\r\n}"
            },
            {
                "name": "AllRoles",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/moba/player/player.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Role[]",
                "defaultValue": "['top', 'jungle', 'mid', 'adc', 'support']"
            },
            {
                "name": "AllUniquePlayStyles",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/moba/player/player.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "PlayStyle[]",
                "defaultValue": "[\r\n  'scaler',\r\n  'mechanical god',\r\n  'split-pusher',\r\n  'team-fighter',\r\n  'flex god',\r\n  'macro-player',\r\n  'leader',\r\n  'closer',\r\n  'baron stealer',\r\n]"
            },
            {
                "name": "backupDraw",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/simulation/group-draw.utils.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(pts: GroupTeam[][], nbrOfGroups: number, availableRegions: Region[]) => {\r\n  const regionValues = availableRegions.map(r => r.value);\r\n  const allTeams: GroupTeam[] = pts.flatMap((p, i) => {\r\n    const team = p.map(x => ({ ...x, pot: i + 1 }));\r\n    if (availableRegions.length > 1) {\r\n      team.sort(({ region: a }, { region: b }) => compare(a, b, true));\r\n    }\r\n    return team;\r\n  });\r\n  const groups: GroupTeam[][] = Array.from({ length: nbrOfGroups }, _ => []);\r\n  for (let i = 0; i < allTeams.length; i++) {\r\n    // for each team in the draw\r\n    const team = allTeams[i];\r\n    // console.log('TEAM', team.region, team.pot);\r\n    const candidateGroups = groups.filter(\r\n      // return each group that returns true to ...\r\n      group => {\r\n        if ((availableRegions.length > 4 && !regionValues.includes(RegionName.ofc)) || availableRegions.length > 5) {\r\n          // check the group has less teams than is needed in each group\r\n          return (\r\n            group.length < allTeams.length / nbrOfGroups &&\r\n            group.every(member => {\r\n              // console.log('MEMBER', member.region, member.pot);\r\n              return (\r\n                member.pot !== team.pot &&\r\n                (team.region !== RegionName.uefa\r\n                  ? group.every(m => m.region !== team.region) // checking that every member of this group does not match region\r\n                  : group.filter(m => m.region === RegionName.uefa).length < 2)\r\n              );\r\n            })\r\n          ); // if team is uefa, the group can have a uefa team\r\n        }\r\n        return group.length < allTeams.length / nbrOfGroups && group.every(member => member.pot !== team.pot);\r\n      }\r\n    );\r\n    candidateGroups[Math.floor(Math.random() * candidateGroups.length)].push(team);\r\n  }\r\n  console.log(\r\n    'groups',\r\n    groups.map(g => g.map(t => `${t.name} ${t.region}`))\r\n  );\r\n  return groups;\r\n}"
            },
            {
                "name": "baseTeam",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/models/nation.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(hostNations: GroupTeam[], nation: Nation): GroupTeam => {\r\n  // random nation values\r\n  let min = 0;\r\n  let max = 0;\r\n\r\n  switch (nation.nationTier) {\r\n    case 's':\r\n      min = 80;\r\n      max = 100;\r\n      break;\r\n    case 'a':\r\n      min = 70;\r\n      max = 95;\r\n      break;\r\n    case 'b':\r\n      min = 65;\r\n      max = 88;\r\n      break;\r\n    case 'c':\r\n      min = 60;\r\n      max = 88;\r\n      break;\r\n    case 'd':\r\n      min = 55;\r\n      max = 80;\r\n      break;\r\n    case 'e':\r\n      min = 40;\r\n      max = 78;\r\n      break;\r\n    case 'f':\r\n      min = 30;\r\n      max = 70;\r\n      break;\r\n    case 'g':\r\n      min = 25;\r\n      max = 55;\r\n      break;\r\n    default:\r\n      min = 25;\r\n      max = 55;\r\n      break;\r\n  }\r\n  const attRating = getRandFloat(min, max);\r\n  const midRating = getRandFloat(min, max);\r\n  const defRating = getRandFloat(min, max);\r\n  const penRating = getRandFloat(min, max);\r\n  return {\r\n    ...nation,\r\n    gDiff: 0,\r\n    gFor: 0,\r\n    gOpp: 0,\r\n    points: 0,\r\n    matchesPlayed: 0,\r\n    tier: nation.nationTier,\r\n    startingRating: {\r\n      att: attRating,\r\n      mid: midRating,\r\n      def: defRating,\r\n      pen: penRating,\r\n    },\r\n    dynamicRating: {\r\n      att: attRating,\r\n      mid: midRating,\r\n      def: defRating,\r\n      pen: penRating,\r\n    },\r\n    isBuffed: {\r\n      att: false,\r\n      mid: false,\r\n      def: false,\r\n      pen: false,\r\n    },\r\n    isDebuffed: {\r\n      att: false,\r\n      mid: false,\r\n      def: false,\r\n      pen: false,\r\n    },\r\n    currentBuffs: {\r\n      att: [],\r\n      mid: [],\r\n      def: [],\r\n      pen: [],\r\n    },\r\n    rating: (attRating + midRating + defRating) / 3,\r\n    ranking: 0,\r\n    attRanking: 0,\r\n    midRanking: 0,\r\n    defRanking: 0,\r\n    matchHistory: {\r\n      qualifiers: [],\r\n      group: [],\r\n      bracket: [],\r\n    },\r\n    reportCard: {\r\n      grade: null,\r\n      gradeStyle: null,\r\n      gradeSummary: null,\r\n      tournamentFinish: null,\r\n    },\r\n    homeTeam: hostNations.map(t => t.name).includes(nation.name) ? true : false,\r\n    region: nation.region as RegionName,\r\n  };\r\n}"
            },
            {
                "name": "blueSideBanRounds",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/moba/draft/draft.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[1, 3, 5, 14, 16]"
            },
            {
                "name": "blueSidePickRounds",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/moba/draft/draft.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[7, 10, 11, 18, 19]"
            },
            {
                "name": "challengeFactor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/career/player/player.utils.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(leagueDifficulty: LeagueDifficulty): number => {\r\n  switch (leagueDifficulty) {\r\n    case 'hard':\r\n      return 2;\r\n    case 'mediumHard':\r\n      return 1;\r\n    case 'medium':\r\n      return -1;\r\n    case 'mediumEasy':\r\n      return -3;\r\n    case 'easy':\r\n      return -5;\r\n    default:\r\n      return 0;\r\n  }\r\n}"
            },
            {
                "name": "checkCurrentAbility",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/career/player/player.utils.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(ability: number) => {\r\n  if (ability < 10) {\r\n    return 10;\r\n  } else if (ability > 200) {\r\n    return 200;\r\n  } else {\r\n    return ability;\r\n  }\r\n}"
            },
            {
                "name": "CLUB_MULTIPLIER",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/career/career.constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "2.5"
            },
            {
                "name": "compareFn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/simulation/group-draw.utils.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(first: string[], a: string, b: string) => {\r\n  let returnValue;\r\n  if (first.includes(a)) {\r\n    returnValue = -1;\r\n  } else if (first.includes(b)) {\r\n    returnValue = 1;\r\n  } else if (a < b) {\r\n    returnValue = -1;\r\n  } else if (b < a) {\r\n    returnValue = 1;\r\n  } else {\r\n    returnValue = 0;\r\n  }\r\n  return returnValue;\r\n}"
            },
            {
                "name": "components",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/index.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  LineupAccordionComponent,\r\n  NavBarComponent,\r\n  PitchViewComponent,\r\n  PositionBreakdownComponent,\r\n  SquadRulesComponent,\r\n  PlayerCardComponent,\r\n  NationDialogComponent,\r\n  TournamentFormComponent,\r\n  DashboardComponent,\r\n  StarRatingComponent,\r\n]"
            },
            {
                "name": "compStyleReqs",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/moba/draft/draft.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "CompStyleData[]",
                "defaultValue": "[\n  {\n    name: 'engage',\n    primary: ['mobility.engage', 'dmg.aoe', 'crowdControl.impact', 'crowdControl.aoe'],\n    secondary: ['dmg.burst', 'crowdControl.singleTarget', 'defense.mitigation', 'defense.sustain'],\n  },\n  {\n    name: 'pick',\n    primary: ['dmg.burst', 'dmg.singleTarget', 'crowdControl.singleTarget', 'dmg.skirmish'],\n    secondary: ['crowdControl.range', 'mobility.engage', 'mobility.reposition', 'crowdControl.impact'],\n  },\n  {\n    name: 'protect',\n    primary: ['dmg.dps', 'support.peel', 'support.utility', 'support.zoneControl'],\n    secondary: ['dmg.singleTarget', 'dmg.aoe', 'defense.sustain', 'defense.mitigation'],\n  },\n  {\n    name: 'siege',\n    primary: ['dmg.poke', 'dmg.siege', 'support.zoneControl', 'support.peel'],\n    secondary: ['dmg.waveClear', 'support.utility', 'dmg.dps', 'dmg.aoe'],\n  },\n  {\n    name: 'split',\n    primary: ['dmg.splitPush', 'dmg.skirmish', 'dmg.waveClear', 'support.peel'],\n    secondary: ['support.zoneControl', 'mobility.reposition', 'dmg.siege', 'dmg.singleTarget'],\n  },\n]"
            },
            {
                "name": "consistencyFactor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/career/player/player.utils.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(ca: CareerOverview, transfer: TransferOption) => {\r\n  const currentClubApps = ca.clubStats.find(c => c.id === transfer.club.id)?.currentClubStreak || 0;\r\n\r\n  if (currentClubApps > 4) {\r\n    return 3;\r\n  } else if (currentClubApps > 2.25) {\r\n    return 2;\r\n  } else if (currentClubApps > 1.5) {\r\n    return 1;\r\n  } else if (currentClubApps > 0.4) {\r\n    return 0;\r\n  } else {\r\n    return -1;\r\n  }\r\n}"
            },
            {
                "name": "defaultCoaches",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/models/default-coaches.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Person[]",
                "defaultValue": "[\r\n  {\r\n    firstNames: ['Jesús', 'Luis'],\r\n    lastNames: ['Álvarez', 'de', 'Eulate', 'Güergue'],\r\n    firstInitial: 'J',\r\n    singleLastName: 'Álvarez',\r\n    firstNameUsage: 'Spanish',\r\n    lastNameUsage: 'Spanish',\r\n    nationality: 'Andorra',\r\n    age: 52,\r\n    nickname: 'Koldo Álvarez',\r\n    origin: 'Spain',\r\n  },\r\n  {\r\n    firstNames: ['Luc'],\r\n    lastNames: ['Holtz'],\r\n    firstInitial: 'L',\r\n    singleLastName: 'Holtz',\r\n    firstNameUsage: 'French',\r\n    lastNameUsage: 'German',\r\n    nationality: 'Luxembourg',\r\n    age: 53,\r\n    origin: 'Luxembourg',\r\n  },\r\n  {\r\n    firstNames: ['Didier', 'Claude'],\r\n    lastNames: ['Deschamps'],\r\n    firstInitial: 'D',\r\n    singleLastName: 'Deschamps',\r\n    firstNameUsage: 'French',\r\n    lastNameUsage: 'French',\r\n    nationality: 'France',\r\n    age: 54,\r\n    origin: 'France',\r\n  },\r\n  {\r\n    firstNames: ['Jan', 'Olof'],\r\n    lastNames: ['Andersson'],\r\n    firstInitial: 'J',\r\n    singleLastName: 'Andersson',\r\n    firstNameUsage: 'Swedish',\r\n    lastNameUsage: 'Swedish',\r\n    nationality: 'Sweden',\r\n    age: 60,\r\n    origin: 'Sweden',\r\n    nickname: 'Janne Andersson',\r\n  },\r\n  {\r\n    firstNames: ['Gareth'],\r\n    lastNames: ['Southgate'],\r\n    firstInitial: 'G',\r\n    singleLastName: 'Southgate',\r\n    firstNameUsage: 'English (British)',\r\n    lastNameUsage: 'English',\r\n    nationality: 'England',\r\n    age: 52,\r\n    origin: 'England',\r\n  },\r\n  {\r\n    firstNames: ['Markku', 'Tapio'],\r\n    lastNames: ['Kanerva'],\r\n    firstInitial: 'M',\r\n    singleLastName: 'Kanerva',\r\n    firstNameUsage: 'Finnish',\r\n    lastNameUsage: 'Finnish',\r\n    nationality: 'Finland',\r\n    age: 58,\r\n    origin: 'Finland',\r\n  },\r\n  {\r\n    firstNames: ['Zlatko'],\r\n    lastNames: ['Dalić'],\r\n    firstInitial: 'Z',\r\n    singleLastName: 'Dalić',\r\n    firstNameUsage: 'Croatian',\r\n    lastNameUsage: 'Croatian',\r\n    nationality: 'Croatia',\r\n    age: 56,\r\n    origin: 'Croatia',\r\n  },\r\n  {\r\n    firstNames: ['Roberto'],\r\n    lastNames: ['Mancini'],\r\n    firstInitial: 'R',\r\n    singleLastName: 'Mancini',\r\n    firstNameUsage: 'Italian',\r\n    lastNameUsage: 'Italian',\r\n    nationality: 'Italy',\r\n    age: 58,\r\n    origin: 'Italy',\r\n  },\r\n  {\r\n    firstNames: ['Marco'],\r\n    lastNames: ['Rossi'],\r\n    firstInitial: 'M',\r\n    singleLastName: 'Rossi',\r\n    firstNameUsage: 'Italian',\r\n    lastNameUsage: 'Italian',\r\n    nationality: 'Hungary',\r\n    age: 58,\r\n    origin: 'Italy',\r\n  },\r\n  {\r\n    firstNames: ['Julio', 'César'],\r\n    lastNames: ['Ribas', 'Vlacovich'],\r\n    firstInitial: 'J',\r\n    singleLastName: 'Ribas',\r\n    firstNameUsage: 'Spanish',\r\n    lastNameUsage: 'Spanish',\r\n    nationality: 'Gibraltar',\r\n    age: 66,\r\n    origin: 'Uruguay',\r\n    nickname: 'Julio César Ribas',\r\n  },\r\n  {\r\n    firstNames: ['Jaroslav'],\r\n    lastNames: ['Šilhavy'],\r\n    firstInitial: 'J',\r\n    singleLastName: 'Šilhavy',\r\n    firstNameUsage: 'Czech',\r\n    lastNameUsage: 'Czech',\r\n    nationality: 'Czech Republic',\r\n    age: 61,\r\n    origin: 'Czech Republic',\r\n  },\r\n  {\r\n    firstNames: ['Stephen'],\r\n    lastNames: ['Clarke'],\r\n    firstInitial: 'S',\r\n    singleLastName: 'Clarke',\r\n    firstNameUsage: 'English',\r\n    lastNameUsage: 'English',\r\n    nationality: 'Scotland',\r\n    age: 59,\r\n    origin: 'Scotland',\r\n    nickname: 'Steve Clarke',\r\n  },\r\n  {\r\n    firstNames: ['Håkan', 'Georg'],\r\n    lastNames: ['Ericson'],\r\n    firstInitial: 'H',\r\n    singleLastName: 'Ericson',\r\n    firstNameUsage: 'Swedish',\r\n    lastNameUsage: 'Swedish',\r\n    nationality: 'Faroe Islands',\r\n    age: 62,\r\n    origin: 'Sweden',\r\n  },\r\n  {\r\n    firstNames: ['Dainis'],\r\n    lastNames: ['Kazakevičs'],\r\n    firstInitial: 'D',\r\n    singleLastName: 'Kazakevičs',\r\n    firstNameUsage: 'Latvian',\r\n    lastNameUsage: 'Latvian',\r\n    nationality: 'Latvia',\r\n    age: 41,\r\n    origin: 'Latvia',\r\n  },\r\n  {\r\n    firstNames: ['Stephen'],\r\n    lastNames: ['Kenny'],\r\n    firstInitial: 'S',\r\n    singleLastName: 'Kenny',\r\n    firstNameUsage: 'English',\r\n    lastNameUsage: 'Irish',\r\n    nationality: 'Ireland',\r\n    age: 51,\r\n    origin: 'Ireland',\r\n  },\r\n  {\r\n    firstNames: ['Kasper'],\r\n    lastNames: ['Hjulmand'],\r\n    firstInitial: 'K',\r\n    singleLastName: 'Hjulmand',\r\n    firstNameUsage: 'Danish',\r\n    lastNameUsage: 'Danish',\r\n    nationality: 'Denmark',\r\n    age: 50,\r\n    origin: 'Denmark',\r\n  },\r\n  {\r\n    firstNames: ['Giovanni'],\r\n    lastNames: ['De Biasi'],\r\n    firstInitial: 'G',\r\n    singleLastName: 'De Biasi',\r\n    firstNameUsage: 'Italian',\r\n    lastNameUsage: 'Italian',\r\n    nationality: 'Azerbaijan',\r\n    age: 66,\r\n    origin: 'Italy',\r\n    nickname: 'Gianni De Biasi',\r\n  },\r\n  {\r\n    firstNames: ['Martin'],\r\n    lastNames: ['Stocklasa'],\r\n    firstInitial: 'M',\r\n    singleLastName: 'Stocklasa',\r\n    firstNameUsage: 'Liechtenstein',\r\n    lastNameUsage: 'Liechtenstein',\r\n    nationality: 'Liechtenstein',\r\n    age: 43,\r\n    origin: 'Liechtenstein',\r\n  },\r\n  {\r\n    firstNames: ['Ståle'],\r\n    lastNames: ['Solbakken'],\r\n    firstInitial: 'S',\r\n    singleLastName: 'Solbakken',\r\n    firstNameUsage: 'Norwegian',\r\n    lastNameUsage: 'Norwegian',\r\n    nationality: 'Norway',\r\n    age: 54,\r\n    origin: 'Norway',\r\n  },\r\n  {\r\n    firstNames: ['Arnar', 'Þór'],\r\n    lastNames: ['Viðarsson'],\r\n    firstInitial: 'A',\r\n    singleLastName: 'Viðarsson',\r\n    firstNameUsage: 'Icelandic',\r\n    lastNameUsage: 'Icelandic',\r\n    nationality: 'Iceland',\r\n    age: 44,\r\n    origin: 'Iceland',\r\n  },\r\n  {\r\n    firstNames: ['Miodrag'],\r\n    lastNames: ['Radulović'],\r\n    firstInitial: 'M',\r\n    singleLastName: 'Radulović',\r\n    firstNameUsage: 'Serbian',\r\n    lastNameUsage: 'Serbian',\r\n    nationality: 'Montenegro',\r\n    age: 55,\r\n    origin: 'Montenegro',\r\n  },\r\n  {\r\n    firstNames: ['Thomas'],\r\n    lastNames: ['Häberli'],\r\n    firstInitial: 'T',\r\n    singleLastName: 'Häberli',\r\n    firstNameUsage: 'English',\r\n    lastNameUsage: 'Swiss',\r\n    nationality: 'Estonia',\r\n    age: 48,\r\n    origin: 'Switzerland',\r\n  },\r\n  {\r\n    firstNames: ['Willy', 'David', 'Frédéric'],\r\n    lastNames: ['Sagnol'],\r\n    firstInitial: 'W',\r\n    singleLastName: 'Sagnol',\r\n    firstNameUsage: 'French',\r\n    lastNameUsage: 'French',\r\n    nationality: 'Estonia',\r\n    age: 45,\r\n    origin: 'Georgia',\r\n  },\r\n  {\r\n    firstNames: ['Dragan'],\r\n    lastNames: ['Stojković'],\r\n    firstInitial: 'D',\r\n    singleLastName: 'Stojković',\r\n    firstNameUsage: 'Serbian',\r\n    lastNameUsage: 'Serb',\r\n    nationality: 'Serbia',\r\n    age: 48,\r\n    origin: 'Serbia',\r\n  },\r\n]"
            },
            {
                "name": "defaultCompStats",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/career/player/player.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "CompetitionStats",
                "defaultValue": "{\r\n  appearances: {\r\n    starts: 0,\r\n    sub: 0,\r\n    total: 0,\r\n  },\r\n  goals: 0,\r\n  assists: 0,\r\n  avgRating: 6.0,\r\n  aggRating: 0,\r\n}"
            },
            {
                "name": "defaultHost32",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/models/nation.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "GroupTeam",
                "defaultValue": "{\r\n  name: 'Qatar',\r\n  abbreviation: 'qat',\r\n  logo: 'https://fmdataba.com/images/n/QAT.svg',\r\n  emoji: '🇶🇦',\r\n  region: RegionName.afc,\r\n  points: 0,\r\n  gDiff: 0,\r\n  gFor: 0,\r\n  gOpp: 0,\r\n  tier: 'j',\r\n  nationTier: 'e',\r\n  startingRating: {\r\n    att: 0,\r\n    mid: 0,\r\n    def: 0,\r\n    pen: 0,\r\n  },\r\n  dynamicRating: {\r\n    att: 0,\r\n    mid: 0,\r\n    def: 0,\r\n    pen: 0,\r\n  },\r\n  isBuffed: {\r\n    att: false,\r\n    mid: false,\r\n    def: false,\r\n    pen: false,\r\n  },\r\n  isDebuffed: {\r\n    att: false,\r\n    mid: false,\r\n    def: false,\r\n    pen: false,\r\n  },\r\n  currentBuffs: {\r\n    att: [],\r\n    mid: [],\r\n    def: [],\r\n    pen: [],\r\n  },\r\n  rating: 0,\r\n  matchesPlayed: 0,\r\n  matchHistory: {\r\n    qualifiers: [],\r\n    group: [],\r\n    bracket: [],\r\n  },\r\n  reportCard: {\r\n    grade: null,\r\n    gradeStyle: null,\r\n    gradeSummary: null,\r\n    tournamentFinish: null,\r\n  },\r\n  ranking: 0,\r\n  attRanking: 0,\r\n  midRanking: 0,\r\n  defRanking: 0,\r\n  homeTeam: true,\r\n  canSoloHost32: true,\r\n  canSoloHost48: false,\r\n  cohosts32: [],\r\n  cohosts48: [],\r\n  triHosts48: [],\r\n  quadHosts48: [],\r\n}"
            },
            {
                "name": "defaultHosts48",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/models/nation.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "GroupTeam[]",
                "defaultValue": "[\r\n  {\r\n    name: 'Mexico',\r\n    abbreviation: 'mex',\r\n    logo: 'https://fmdataba.com/images/n/MEX.svg',\r\n    emoji: '🇲🇽',\r\n    region: RegionName.concacaf,\r\n    points: 0,\r\n    gDiff: 0,\r\n    gFor: 0,\r\n    gOpp: 0,\r\n    tier: 'b',\r\n    nationTier: 'b',\r\n    startingRating: {\r\n      att: 0,\r\n      mid: 0,\r\n      def: 0,\r\n      pen: 0,\r\n    },\r\n    dynamicRating: {\r\n      att: 0,\r\n      mid: 0,\r\n      def: 0,\r\n      pen: 0,\r\n    },\r\n    isBuffed: {\r\n      att: false,\r\n      mid: false,\r\n      def: false,\r\n      pen: false,\r\n    },\r\n    isDebuffed: {\r\n      att: false,\r\n      mid: false,\r\n      def: false,\r\n      pen: false,\r\n    },\r\n    currentBuffs: {\r\n      att: [],\r\n      mid: [],\r\n      def: [],\r\n      pen: [],\r\n    },\r\n    rating: 0,\r\n    matchesPlayed: 0,\r\n    matchHistory: {\r\n      qualifiers: [],\r\n      group: [],\r\n      bracket: [],\r\n    },\r\n    reportCard: {\r\n      grade: null,\r\n      gradeStyle: null,\r\n      gradeSummary: null,\r\n      tournamentFinish: null,\r\n    },\r\n    ranking: 0,\r\n    attRanking: 0,\r\n    midRanking: 0,\r\n    defRanking: 0,\r\n    homeTeam: true,\r\n    canSoloHost32: true,\r\n    cohosts32: ['United States'],\r\n    cohosts48: ['United States'],\r\n    canSoloHost48: false,\r\n    triHosts48: ['United States', 'Canada'],\r\n    quadHosts48: [],\r\n  },\r\n  {\r\n    name: 'United States',\r\n    abbreviation: 'usa',\r\n    logo: 'https://fmdataba.com/images/n/USA.svg',\r\n    emoji: '🇺🇸',\r\n    region: RegionName.concacaf,\r\n    points: 0,\r\n    gDiff: 0,\r\n    gFor: 0,\r\n    gOpp: 0,\r\n    tier: 'b',\r\n    nationTier: 'b',\r\n    startingRating: {\r\n      att: 0,\r\n      mid: 0,\r\n      def: 0,\r\n      pen: 0,\r\n    },\r\n    dynamicRating: {\r\n      att: 0,\r\n      mid: 0,\r\n      def: 0,\r\n      pen: 0,\r\n    },\r\n    isBuffed: {\r\n      att: false,\r\n      mid: false,\r\n      def: false,\r\n      pen: false,\r\n    },\r\n    isDebuffed: {\r\n      att: false,\r\n      mid: false,\r\n      def: false,\r\n      pen: false,\r\n    },\r\n    currentBuffs: {\r\n      att: [],\r\n      mid: [],\r\n      def: [],\r\n      pen: [],\r\n    },\r\n    rating: 0,\r\n    matchesPlayed: 0,\r\n    matchHistory: {\r\n      qualifiers: [],\r\n      group: [],\r\n      bracket: [],\r\n    },\r\n    reportCard: {\r\n      grade: null,\r\n      gradeStyle: null,\r\n      gradeSummary: null,\r\n      tournamentFinish: null,\r\n    },\r\n    ranking: 0,\r\n    attRanking: 0,\r\n    midRanking: 0,\r\n    defRanking: 0,\r\n    homeTeam: true,\r\n    canSoloHost32: true,\r\n    cohosts32: ['Canada', 'Mexico'],\r\n    cohosts48: ['Mexico'],\r\n    canSoloHost48: false,\r\n    triHosts48: ['Canada', 'Mexico'],\r\n    quadHosts48: [],\r\n  },\r\n  {\r\n    name: 'Canada',\r\n    abbreviation: 'can',\r\n    logo: 'https://fmdataba.com/images/n/CAN.svg',\r\n    emoji: '🇨🇦',\r\n    region: RegionName.concacaf,\r\n    points: 0,\r\n    gDiff: 0,\r\n    gFor: 0,\r\n    gOpp: 0,\r\n    tier: 'd',\r\n    nationTier: 'd',\r\n    startingRating: {\r\n      att: 0,\r\n      mid: 0,\r\n      def: 0,\r\n      pen: 0,\r\n    },\r\n    dynamicRating: {\r\n      att: 0,\r\n      mid: 0,\r\n      def: 0,\r\n      pen: 0,\r\n    },\r\n    isBuffed: {\r\n      att: false,\r\n      mid: false,\r\n      def: false,\r\n      pen: false,\r\n    },\r\n    isDebuffed: {\r\n      att: false,\r\n      mid: false,\r\n      def: false,\r\n      pen: false,\r\n    },\r\n    currentBuffs: {\r\n      att: [],\r\n      mid: [],\r\n      def: [],\r\n      pen: [],\r\n    },\r\n    rating: 0,\r\n    matchesPlayed: 0,\r\n    matchHistory: {\r\n      qualifiers: [],\r\n      group: [],\r\n      bracket: [],\r\n    },\r\n    reportCard: {\r\n      grade: null,\r\n      gradeStyle: null,\r\n      gradeSummary: null,\r\n      tournamentFinish: null,\r\n    },\r\n    ranking: 0,\r\n    attRanking: 0,\r\n    midRanking: 0,\r\n    defRanking: 0,\r\n    homeTeam: true,\r\n    canSoloHost32: true,\r\n    cohosts32: ['United States'],\r\n    cohosts48: [],\r\n    canSoloHost48: false,\r\n    triHosts48: ['Mexico', 'United States'],\r\n    quadHosts48: [],\r\n  },\r\n]"
            },
            {
                "name": "defaultOpponentMasteries",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/moba/draft/draft.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "DraftPlayer[]",
                "defaultValue": "[\n  {\n    mainRole: 'top',\n    championMastery: {\n      s: [1, 2],\n      a: [45, 46, 0],\n      b: [47, 44],\n      c: [],\n      d: [],\n    },\n  },\n  {\n    mainRole: 'jungle',\n    championMastery: {\n      s: [9, 10],\n      a: [11],\n      b: [12],\n      c: [13, 2, 8],\n      d: [],\n    },\n  },\n  {\n    mainRole: 'mid',\n    championMastery: {\n      s: [21, 22],\n      a: [20, 19],\n      b: [18, 17],\n      c: [],\n      d: [],\n    },\n  },\n  {\n    mainRole: 'adc',\n    championMastery: {\n      s: [33, 34, 35],\n      a: [32],\n      b: [29, 30, 31],\n      c: [],\n      d: [],\n    },\n  },\n  {\n    mainRole: 'support',\n    championMastery: {\n      s: [53],\n      a: [39, 40],\n      b: [40, 38],\n      c: [36, 37],\n      d: [],\n    },\n  },\n]"
            },
            {
                "name": "defaultPlayerMasteries",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/moba/draft/draft.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "DraftPlayer[]",
                "defaultValue": "[\n  {\n    mainRole: 'top',\n    championMastery: {\n      s: [47, 44],\n      a: [45, 46, 0],\n      b: [1, 2],\n      c: [],\n      d: [],\n    },\n  },\n  {\n    mainRole: 'jungle',\n    championMastery: {\n      s: [2, 8],\n      a: [9, 10],\n      b: [11, 12],\n      c: [13],\n      d: [],\n    },\n  },\n  {\n    mainRole: 'mid',\n    championMastery: {\n      s: [18, 17],\n      a: [20, 19],\n      b: [21, 22],\n      c: [28],\n      d: [],\n    },\n  },\n  {\n    mainRole: 'adc',\n    championMastery: {\n      s: [29, 30, 31],\n      a: [32],\n      b: [33, 34],\n      c: [],\n      d: [],\n    },\n  },\n  {\n    mainRole: 'support',\n    championMastery: {\n      s: [36, 37],\n      a: [38, 39],\n      b: [40, 41],\n      c: [53],\n      d: [],\n    },\n  },\n]"
            },
            {
                "name": "defaultPosBox",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/constants/position-boxes.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  playerClass: 'inactive player-box',\r\n  posBoxClass: 'active pos-box',\r\n  html: '',\r\n}"
            },
            {
                "name": "defaultSeasonStats",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/career/player/player.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "SeasonStats",
                "defaultValue": "{\r\n  allComps: { ...defaultCompStats },\r\n  league: { ...defaultCompStats },\r\n  cup: { ...defaultCompStats },\r\n  continental: { ...defaultCompStats },\r\n}"
            },
            {
                "name": "draw",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/simulation/group-draw.utils.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(\r\n  pts: GroupTeam[][],\r\n  nbrOfGroups: number,\r\n  availableRegions: Region[],\r\n  startTime: number,\r\n  failed = false\r\n): GroupTeam[][] => {\r\n  const regionValues = availableRegions.map(r => r.value);\r\n  const allTeams: GroupTeam[] = pts.flatMap((p, i) => {\r\n    const team = p.map(x => ({ ...x, pot: i + 1 }));\r\n    if (availableRegions.length > 1) {\r\n      team.sort(({ region: a }, { region: b }) => compare(a, b, true));\r\n    }\r\n    return team;\r\n  });\r\n  let test = false;\r\n  // console.log(allTeams.map(a => a.name));\r\n  const groups: GroupTeam[][] = Array.from({ length: nbrOfGroups }, _ => []);\r\n  for (let i = 0; i < allTeams.length; i++) {\r\n    // for each team in the draw\r\n    const team = allTeams[i];\r\n    // console.log('TEAM', team.region, team.pot);\r\n    const candidateGroups = groups.filter(\r\n      // return each group that returns true to ...\r\n      group => {\r\n        if (failed) {\r\n          return group.length < allTeams.length / nbrOfGroups && group.every(member => member.pot !== team.pot);\r\n        }\r\n        if ((availableRegions.length > 4 && !regionValues.includes(RegionName.ofc)) || availableRegions.length > 5) {\r\n          // check the group has less teams than is needed in each group\r\n          return (\r\n            group.length < allTeams.length / nbrOfGroups &&\r\n            group.every(member => {\r\n              // console.log('MEMBER', member.region, member.pot);\r\n              return (\r\n                member.pot !== team.pot &&\r\n                (team.region !== RegionName.uefa\r\n                  ? group.every(m => m.region !== team.region) // checking that every member of this group does not match region\r\n                  : group.filter(m => m.region === RegionName.uefa).length < 2)\r\n              );\r\n            })\r\n          ); // if team is uefa, the group can have a uefa team\r\n        }\r\n\r\n        const regions2 = availableRegions\r\n          .filter(r => r.qualifiers.auto + r.qualifiers.extra > 7 && r.qualifiers.auto + r.qualifiers.extra < 9)\r\n          .map(r => r.value);\r\n        const regions3 = availableRegions\r\n          .filter(r => r.qualifiers.auto + r.qualifiers.extra > 8 && r.qualifiers.auto + r.qualifiers.extra < 12)\r\n          .map(r => r.value);\r\n        const regions4 = availableRegions.filter(r => r.qualifiers.auto + r.qualifiers.extra > 11).map(r => r.value);\r\n        if (!test) {\r\n          // console.log(availableRegions, regions2, regions3, regions4);\r\n          test = false;\r\n        }\r\n        return (\r\n          group.length < allTeams.length / nbrOfGroups &&\r\n          group.every(member => {\r\n            if (availableRegions.length < 4) {\r\n              return member.pot !== team.pot;\r\n            }\r\n            if (regions4.includes(team.region)) {\r\n              return member;\r\n            }\r\n            if (regions3.includes(team.region)) {\r\n              return group.filter(m => regions3.includes(m.region)).length < 3;\r\n            }\r\n            // console.log(member.pot, team.pot);\r\n            return regions2.includes(team.region)\r\n              ? group.filter(m => regions2.includes(m.region)).length < 2\r\n              : group.every(m => m.region !== team.region);\r\n          })\r\n        );\r\n      }\r\n    );\r\n    if (candidateGroups.length < 1) {\r\n      if (Date.now() > startTime + 4000) {\r\n        // console.log(\r\n        //   'ERROR WITH POT DRAW initiate failsafe',\r\n        //   allTeams.map(t => `${t.name} ${t.pot} ${t.region}`)\r\n        // );\r\n        return draw(pts, nbrOfGroups, availableRegions, startTime, true);\r\n      }\r\n      return draw(pts, nbrOfGroups, availableRegions, startTime);\r\n    }\r\n    candidateGroups[Math.floor(Math.random() * candidateGroups.length)].push(team);\r\n  }\r\n\r\n  console.log(\r\n    'groups',\r\n    groups.map(g => g.map(t => `${t.name} ${t.region}`))\r\n  );\r\n  return groups;\r\n}"
            },
            {
                "name": "drawAndSort",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/simulation/group-draw.utils.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(t: GroupTeam[][], h: string[], nbrOfGroups: number, availableRegions: Region[], startTime?: number) => {\r\n  if (startTime) {\r\n    return sortGroups(h)(draw(t, nbrOfGroups, availableRegions, startTime));\r\n  } else {\r\n    return sortGroups(h)(backupDraw(t, nbrOfGroups, availableRegions));\r\n  }\r\n}"
            },
            {
                "name": "emptyDraftBans",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/moba/draft/draft.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Partial[]",
                "defaultValue": "[\n  {\n    isPlaceholder: true,\n    name: '1',\n  },\n  {\n    isPlaceholder: true,\n    name: '2',\n  },\n  {\n    isPlaceholder: true,\n    name: '3',\n  },\n  {\n    isPlaceholder: true,\n    name: '4',\n  },\n  {\n    isPlaceholder: true,\n    name: '5',\n  },\n]"
            },
            {
                "name": "emptyDraftPicks",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/moba/draft/draft.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Partial[]",
                "defaultValue": "[\n  {\n    isPlaceholder: true,\n    name: 'Top',\n  },\n  {\n    isPlaceholder: true,\n    name: 'Jungle',\n  },\n  {\n    isPlaceholder: true,\n    name: 'Mid',\n  },\n  {\n    isPlaceholder: true,\n    name: 'ADC',\n  },\n  {\n    isPlaceholder: true,\n    name: 'Support',\n  },\n]"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  production: true,\r\n  firebase: {\r\n    apiKey: \"AIzaSyC7Cxl8eSGaYlQUwXOGfOUiKsoeUXJnX2g\",\r\n    authDomain: \"national-team-generator.firebaseapp.com\",\r\n    projectId: \"national-team-generator\",\r\n    storageBucket: \"national-team-generator.appspot.com\",\r\n    messagingSenderId: \"30261669176\",\r\n    appId: \"1:30261669176:web:eca1c9103db91bab6265cd\",\r\n    measurementId: \"G-QV0DJSQSL2\"\r\n  }\r\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  production: false,\r\n  firebase: {\r\n    apiKey: \"AIzaSyC7Cxl8eSGaYlQUwXOGfOUiKsoeUXJnX2g\",\r\n    authDomain: \"national-team-generator.firebaseapp.com\",\r\n    projectId: \"national-team-generator\",\r\n    storageBucket: \"national-team-generator.appspot.com\",\r\n    messagingSenderId: \"30261669176\",\r\n    appId: \"1:30261669176:web:eca1c9103db91bab6265cd\",\r\n    measurementId: \"G-QV0DJSQSL2\"\r\n  }\r\n}"
            },
            {
                "name": "fringeRoles",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/career/career.constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "['breakthrough prospect', 'fringe player', 'impact sub']"
            },
            {
                "name": "getAdjustedTime",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/simulation/simulation.utils.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(time: number) => {\r\n  if (time > 120) {\r\n    return (time += 20);\r\n  }\r\n  if (time > 105) {\r\n    return (time += 15);\r\n  }\r\n  if (time > 90) {\r\n    return (time += 10);\r\n  }\r\n  if (time > 45) {\r\n    return (time += 5);\r\n  }\r\n  return time;\r\n}"
            },
            {
                "name": "originalOrder",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/utils.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(): number => 0"
            },
            {
                "name": "patchMSI24",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/moba/patch-lists/msi-24.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "AllRolesTierList",
                "defaultValue": "{\r\n  // top: [3, 5, 16, 14, 5] | sumTotal: 43\r\n  top: {\r\n    s: [1, 133, 5], // 3\r\n    a: [2, 4, 44, 45, 8], // 5\r\n    b: [3, 122, 79, 80, 76, 127, 129, 46, 0, 7, 70, 6, 47, 54, 56, 62], // 16\r\n    c: [22, 74, 124, 89, 17, 126, 128, 58, 132, 81, 43, 28, 136, 60], // 14\r\n    d: [120, 123, 114, 115, 23], // 5\r\n  },\r\n  // jungle: [2, 4, 15, 13, 1] | sumTotal: 35\r\n  jungle: {\r\n    s: [9, 133], // 2\r\n    a: [10, 8, 11, 43], // 4\r\n    b: [48, 42, 14, 0, 55, 64, 56, 68, 4, 49, 61, 72, 83, 67, 13], // 15\r\n    c: [82, 73, 75, 18, 6, 131, 74, 2, 130, 44, 84, 85, 58], // 13\r\n    d: [12], // 1\r\n  },\r\n  // mid: [2, 6, 9, 23, 2] | sumTotal: 42\r\n  mid: {\r\n    s: [16, 18],\r\n    a: [15, 19, 21, 50, 51, 52],\r\n    b: [20, 22, 86, 60, 77, 76, 17, 5, 90],\r\n    c: [87, 88, 71, 59, 93, 118, 73, 78, 74, 66, 119, 125, 121, 135, 92, 91, 137, 89, 70, 81, 27, 28, 34],\r\n    d: [134, 44],\r\n  },\r\n  // adc: [3, 1, 9, 15, 0] | sumTotal: 28\r\n  adc: {\r\n    s: [24, 26, 23],\r\n    a: [27, 32],\r\n    b: [31, 33, 94, 35, 34, 28, 30, 29],\r\n    c: [25, 96, 19, 69, 111, 97, 95, 98, 99, 21, 5, 100, 54, 62, 59],\r\n    d: [],\r\n  },\r\n  support: {\r\n    // support: [2, 2, 16, 17, 3] | sumTotal: 40\r\n    s: [25, 36],\r\n    a: [38, 37],\r\n    b: [40, 101, 65, 63, 45, 17, 102, 57, 11, 39, 41, 20, 46, 12, 26, 53],\r\n    c: [66, 104, 19, 105, 24, 107, 8, 106, 2, 43, 98, 110, 116, 117, 103, 112, 108],\r\n    d: [109, 113, 71],\r\n  },\r\n}"
            },
            {
                "name": "performanceFactor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/career/player/player.utils.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(app: number, gamesInSeason: number, avgRating: number): number => {\r\n  // more games in a season provides a high floor to the ability gain while\r\n  // higher rating provides a higher ceiling of ability gain\r\n  if (app / gamesInSeason > 0.8) {\r\n    if (avgRating > 7.5) {\r\n      return getRandomInt(6, 10);\r\n    } else if (avgRating > 7.0) {\r\n      return getRandomInt(6, 8);\r\n    } else if (avgRating > 6.5) {\r\n      return getRandomInt(5, 6);\r\n    } else {\r\n      return getRandomInt(4, 5);\r\n    }\r\n  } else if (app / gamesInSeason > 0.4) {\r\n    if (avgRating > 7.5) {\r\n      return getRandomInt(3, 9);\r\n    } else if (avgRating > 7.0) {\r\n      return getRandomInt(3, 7);\r\n    } else if (avgRating > 6.5) {\r\n      return getRandomInt(3, 5);\r\n    } else {\r\n      return getRandomInt(2, 4);\r\n    }\r\n  } else if (app / gamesInSeason > 0.2) {\r\n    if (avgRating > 7.5) {\r\n      return getRandomInt(1, 6);\r\n    } else if (avgRating > 7.0) {\r\n      return getRandomInt(1, 5);\r\n    } else if (avgRating > 6.5) {\r\n      return getRandomInt(0, 4);\r\n    } else {\r\n      return getRandomInt(0, 3);\r\n    }\r\n  } else {\r\n    return getRandomInt(-8, 0);\r\n  }\r\n}"
            },
            {
                "name": "pickSingleLastName",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/utils.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(names: string[]) => {\r\n  if (names.length > 0) {\r\n    const char = names[0].charAt(0);\r\n    const isLowerCase = char === char.toLowerCase() && char !== char.toUpperCase();\r\n    return isLowerCase ? names[1] : names[0];\r\n  }\r\n  return '';\r\n}"
            },
            {
                "name": "playerToClubAbility",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/career/career.constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(ability: number) => {\r\n  return ability * CLUB_MULTIPLIER + 115 - ability / 1.8;\r\n}"
            },
            {
                "name": "POSITION_BOXES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/constants/position-boxes.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "PositionBox[]",
                "defaultValue": "[\r\n  {\r\n    class: 'pos-box empty',\r\n    ...defaultPosBox,\r\n  },\r\n  {\r\n    class: 'pos-box empty',\r\n    ...defaultPosBox,\r\n  },\r\n  {\r\n    class: 'pos-box 23',\r\n    ...defaultPosBox,\r\n  },\r\n  {\r\n    class: 'pos-box 22',\r\n    ...defaultPosBox,\r\n  },\r\n  {\r\n    class: 'pos-box 21',\r\n    ...defaultPosBox,\r\n  },\r\n  {\r\n    class: 'pos-box empty',\r\n    ...defaultPosBox,\r\n  },\r\n  {\r\n    class: 'pos-box empty',\r\n    ...defaultPosBox,\r\n  },\r\n  {\r\n    class: 'pos-box 20',\r\n    ...defaultPosBox,\r\n  },\r\n  {\r\n    class: 'pos-box empty',\r\n    ...defaultPosBox,\r\n  },\r\n  {\r\n    class: 'pos-box 19',\r\n    ...defaultPosBox,\r\n  },\r\n  {\r\n    class: 'pos-box 18',\r\n    ...defaultPosBox,\r\n  },\r\n  {\r\n    class: 'pos-box 17',\r\n    ...defaultPosBox,\r\n  },\r\n  {\r\n    class: 'pos-box empty',\r\n    ...defaultPosBox,\r\n  },\r\n  {\r\n    class: 'pos-box 16',\r\n    ...defaultPosBox,\r\n  },\r\n  {\r\n    class: 'pos-box 15',\r\n    ...defaultPosBox,\r\n  },\r\n  {\r\n    class: 'pos-box empty',\r\n    ...defaultPosBox,\r\n  },\r\n  {\r\n    class: 'pos-box 14',\r\n    ...defaultPosBox,\r\n  },\r\n  {\r\n    class: 'pos-box 13',\r\n    ...defaultPosBox,\r\n  },\r\n  {\r\n    class: 'pos-box 12',\r\n    ...defaultPosBox,\r\n  },\r\n  {\r\n    class: 'pos-box empty',\r\n    ...defaultPosBox,\r\n  },\r\n  {\r\n    class: 'pos-box 11',\r\n    ...defaultPosBox,\r\n  },\r\n  {\r\n    class: 'pos-box 10',\r\n    ...defaultPosBox,\r\n  },\r\n  {\r\n    class: 'pos-box empty',\r\n    ...defaultPosBox,\r\n  },\r\n  {\r\n    class: 'pos-box 9',\r\n    ...defaultPosBox,\r\n  },\r\n  {\r\n    class: 'pos-box 8',\r\n    ...defaultPosBox,\r\n  },\r\n  {\r\n    class: 'pos-box 7',\r\n    ...defaultPosBox,\r\n  },\r\n  {\r\n    class: 'pos-box empty',\r\n    ...defaultPosBox,\r\n  },\r\n  {\r\n    class: 'pos-box 6',\r\n    ...defaultPosBox,\r\n  },\r\n  {\r\n    class: 'pos-box 5',\r\n    ...defaultPosBox,\r\n  },\r\n  {\r\n    class: 'pos-box empty',\r\n    ...defaultPosBox,\r\n  },\r\n  {\r\n    class: 'pos-box 4',\r\n    ...defaultPosBox,\r\n  },\r\n  {\r\n    class: 'pos-box 3',\r\n    ...defaultPosBox,\r\n  },\r\n  {\r\n    class: 'pos-box 2',\r\n    ...defaultPosBox,\r\n  },\r\n  {\r\n    class: 'pos-box empty',\r\n    ...defaultPosBox,\r\n  },\r\n  {\r\n    class: 'pos-box 1',\r\n    ...defaultPosBox,\r\n  },\r\n  {\r\n    class: 'pos-box empty',\r\n    ...defaultPosBox,\r\n  },\r\n  {\r\n    class: 'pos-box empty',\r\n    ...defaultPosBox,\r\n  },\r\n  {\r\n    class: 'pos-box empty',\r\n    ...defaultPosBox,\r\n  },\r\n  {\r\n    class: 'pos-box 0',\r\n    ...defaultPosBox,\r\n  },\r\n  {\r\n    class: 'pos-box empty',\r\n    ...defaultPosBox,\r\n  },\r\n  {\r\n    class: 'pos-box empty',\r\n    ...defaultPosBox,\r\n  },\r\n  {\r\n    class: 'pos-box empty',\r\n    ...defaultPosBox,\r\n  },\r\n]"
            },
            {
                "name": "positionFilters",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/moba/player/player.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type[]",
                "defaultValue": "Array.from([\r\n  {\r\n    name: 'all',\r\n    url: 'assets/images/role_icons/all.webp',\r\n  },\r\n  ...positions,\r\n])"
            },
            {
                "name": "positions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/moba/player/player.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type[]",
                "defaultValue": "[\r\n  {\r\n    name: 'top',\r\n    url: 'assets/images/role_icons/top.webp',\r\n  },\r\n  {\r\n    name: 'jungle',\r\n    url: 'assets/images/role_icons/jungle.webp',\r\n  },\r\n  {\r\n    name: 'mid',\r\n    url: 'assets/images/role_icons/mid.webp',\r\n  },\r\n  {\r\n    name: 'adc',\r\n    url: 'assets/images/role_icons/adc.webp',\r\n  },\r\n  {\r\n    name: 'support',\r\n    url: 'assets/images/role_icons/support.webp',\r\n  },\r\n]"
            },
            {
                "name": "possibleCupStandings",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/career/club/club.utils.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[1, 2, 4, 8, 16, 32, 64]"
            },
            {
                "name": "probability",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/utils.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(n: number) => {\r\n  return !!n && Math.random() <= n;\r\n}"
            },
            {
                "name": "redSideBanRounds",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/moba/draft/draft.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[2, 4, 6, 13, 15]"
            },
            {
                "name": "redSidePickRounds",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/moba/draft/draft.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[8, 9, 12, 17, 20]"
            },
            {
                "name": "regions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/simulation/simulation.utils.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Region[]",
                "defaultValue": "[\r\n  {\r\n    label: 'UEFA',\r\n    value: RegionName.uefa,\r\n    numOfTeams: 49,\r\n    qualifiers: {\r\n      auto: 0,\r\n      extra: 0,\r\n    },\r\n  },\r\n  {\r\n    label: 'CAF',\r\n    value: RegionName.caf,\r\n    numOfTeams: 39,\r\n    qualifiers: {\r\n      auto: 0,\r\n      extra: 0,\r\n    },\r\n  },\r\n  {\r\n    label: 'AFC',\r\n    value: RegionName.afc,\r\n    numOfTeams: 30,\r\n    qualifiers: {\r\n      auto: 0,\r\n      extra: 0,\r\n    },\r\n  },\r\n  {\r\n    label: 'CONCACAF',\r\n    value: RegionName.concacaf,\r\n    numOfTeams: 22,\r\n    qualifiers: {\r\n      auto: 0,\r\n      extra: 0,\r\n    },\r\n  },\r\n  {\r\n    label: 'CONMEBOL',\r\n    value: RegionName.conmebol,\r\n    numOfTeams: 10,\r\n    qualifiers: {\r\n      auto: 0,\r\n      extra: 0,\r\n    },\r\n  },\r\n  {\r\n    label: 'OFC',\r\n    value: RegionName.ofc,\r\n    numOfTeams: 6,\r\n    qualifiers: {\r\n      auto: 0,\r\n      extra: 0,\r\n    },\r\n  },\r\n]"
            },
            {
                "name": "regions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/moba/region/region.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "MobaRegion[]",
                "defaultValue": "[\r\n  {\r\n    regionAbbrev: 'KR',\r\n    leagueName: 'LCK',\r\n  },\r\n  {\r\n    regionAbbrev: 'CN',\r\n    leagueName: 'LPL',\r\n  },\r\n  {\r\n    regionAbbrev: 'EU',\r\n    leagueName: 'LEC',\r\n  },\r\n  {\r\n    regionAbbrev: 'NA',\r\n    leagueName: 'LCS',\r\n  },\r\n  {\r\n    regionAbbrev: 'APAC',\r\n    leagueName: 'PCS',\r\n  },\r\n  {\r\n    regionAbbrev: 'APAC',\r\n    leagueName: 'VCS',\r\n  },\r\n  {\r\n    regionAbbrev: 'BR',\r\n    leagueName: 'CBLOL',\r\n  },\r\n  {\r\n    regionAbbrev: 'LATAM',\r\n    leagueName: 'LLA',\r\n  },\r\n]"
            },
            {
                "name": "rolePriority",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/moba/player/player.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type",
                "defaultValue": "{\r\n  top: 1,\r\n  jungle: 2,\r\n  mid: 3,\r\n  adc: 4,\r\n  support: 5,\r\n}"
            },
            {
                "name": "sortByMainRole",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/moba/player/player.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(players: Player[]): Player[] => {\r\n  return players.sort((a, b) => {\r\n    const aRolePriority = rolePriority[a.mainRole] || Infinity;\r\n    const bRolePriority = rolePriority[b.mainRole] || Infinity;\r\n\r\n    return aRolePriority - bRolePriority;\r\n  });\r\n}"
            },
            {
                "name": "sortGroups",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/simulation/group-draw.utils.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(h: string[]) => (t: GroupTeam[][]) =>\r\n  t\r\n    .map(team => team.sort(({ name: a }: { name: string }, { name: b }: { name: string }) => compareFn(h, a, b)))\r\n    .sort(([{ name: a }], [{ name: b }]) => compareFn(h, a, b))"
            },
            {
                "name": "SQUAD_RULES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/constants/squad-rules.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "SquadRule[]",
                "defaultValue": "[\r\n  {\r\n    text: '1 starting goalkeeper',\r\n    check: '❌',\r\n  },\r\n  {\r\n    text: 'EXACTLY 3 goalkeepers in squad',\r\n    check: '❌',\r\n  },\r\n  {\r\n    text: '3-4 starting defenders',\r\n    check: '❌',\r\n  },\r\n  {\r\n    text: 'min. 6 defenders in squad',\r\n    check: '❌',\r\n  },\r\n  {\r\n    text: '2-6 starting midfielders',\r\n    check: '❌',\r\n  },\r\n  {\r\n    text: 'min. 5 midfielders in squad',\r\n    check: '❌',\r\n  },\r\n  {\r\n    text: 'Valid formation',\r\n    check: '❌',\r\n  },\r\n  {\r\n    text: 'Backup player in each position',\r\n    check: '❌',\r\n  },\r\n  {\r\n    text: '',\r\n    check: '→',\r\n  },\r\n]"
            },
            {
                "name": "squadRoles",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/career/career.constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "['squad player', 'regular starter', 'important player', 'star player']"
            },
            {
                "name": "tableHeaders",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/career/career.constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  'Year',\r\n  'Age',\r\n  'Team',\r\n  'Info (Transfer)',\r\n  'App',\r\n  'Goals',\r\n  'Assists',\r\n  'Avg Rating',\r\n  'Wage (£/week)',\r\n  'Player Role',\r\n]"
            },
            {
                "name": "tierValues",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/moba/draft/draft.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type",
                "defaultValue": "{\n  s: TierValue.S,\n  a: TierValue.A,\n  b: TierValue.B,\n  c: TierValue.C,\n  d: TierValue.D,\n  f: TierValue.F,\n}"
            },
            {
                "name": "youthFactor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/career/player/player.utils.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "({ age, potentialAbility, currentAbility }: Season): number => {\r\n  const potDiff = potentialAbility - currentAbility;\r\n  if (age < 18) {\r\n    return potDiff / 10 - 4;\r\n  } else if (age < 24) {\r\n    return potDiff / 20;\r\n  } else if (age < 32) {\r\n    return potDiff / 30;\r\n  } else {\r\n    return -potDiff / 10;\r\n  }\r\n}"
            }
        ],
        "functions": [
            {
                "name": "addRankings",
                "file": "src/app/simulation/simulation.utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "arr",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "hasCoaches",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "arr",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "hasCoaches",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "adjustClubStats",
                "file": "src/app/career/career.utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "clubStats",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "season",
                        "type": "Season",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "ClubStats[]",
                "jsdoctags": [
                    {
                        "name": "clubStats",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "season",
                        "type": "Season",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "adjustCurrentAbility",
                "file": "src/app/career/player/player.utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "season",
                        "type": "Season",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "stats",
                        "type": "SeasonStats",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "transfer",
                        "type": "TransferOption",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "career",
                        "type": "CareerOverview",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "leagueDiff",
                        "type": "LeagueDifficulty",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "number",
                "jsdoctags": [
                    {
                        "name": "season",
                        "type": "Season",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "stats",
                        "type": "SeasonStats",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "transfer",
                        "type": "TransferOption",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "career",
                        "type": "CareerOverview",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "leagueDiff",
                        "type": "LeagueDifficulty",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "calcCareerScore",
                "file": "src/app/career/career.utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "clubs",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "career",
                        "type": "CareerOverview",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "CareerScore",
                "jsdoctags": [
                    {
                        "name": "clubs",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "career",
                        "type": "CareerOverview",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "calcCareerStat",
                "file": "src/app/career/player/player.utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "seasons",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "propPath",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "number",
                "jsdoctags": [
                    {
                        "name": "seasons",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "propPath",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "calcGoalsOrAssists",
                "file": "src/app/career/simulation/simulation.utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>A computation based on probability and the # of seasons a player has been at their current club. This function is used to help calculate the # of goals and assists.</p>\n",
                "args": [
                    {
                        "name": "a",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "b",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "seasons",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "number",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 545,
                            "end": 546,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "a"
                        },
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 530,
                            "end": 535,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "param"
                        },
                        "comment": "<ul>\n<li>The first number.</li>\n</ul>\n",
                        "typeExpression": {
                            "pos": 536,
                            "end": 544,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 316,
                            "type": {
                                "pos": 537,
                                "end": 543,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 1,
                                "kind": 150
                            }
                        }
                    },
                    {
                        "name": {
                            "pos": 587,
                            "end": 588,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "b"
                        },
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 572,
                            "end": 577,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "param"
                        },
                        "comment": "<ul>\n<li>The second number.</li>\n</ul>\n",
                        "typeExpression": {
                            "pos": 578,
                            "end": 586,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 316,
                            "type": {
                                "pos": 579,
                                "end": 585,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 1,
                                "kind": 150
                            }
                        }
                    },
                    {
                        "name": {
                            "pos": 630,
                            "end": 637,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "seasons"
                        },
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 615,
                            "end": 620,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "param"
                        },
                        "comment": "<ul>\n<li>The number of seasons</li>\n</ul>\n",
                        "typeExpression": {
                            "pos": 621,
                            "end": 629,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 316,
                            "type": {
                                "pos": 622,
                                "end": 628,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 1,
                                "kind": 150
                            }
                        }
                    },
                    {
                        "tagName": {
                            "pos": 667,
                            "end": 674,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "returns"
                        },
                        "comment": "<p>Returns a number that helps calculate G/A statistics.</p>\n",
                        "returnType": "number"
                    }
                ]
            },
            {
                "name": "calcLeagueDifficulty",
                "file": "src/app/career/career.utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "clubRating",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "leagueRating",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "ability",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "LeagueDifficulty",
                "jsdoctags": [
                    {
                        "name": "clubRating",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "leagueRating",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "ability",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "calcScore",
                "file": "src/app/simulation/simulation.utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "team1",
                        "type": "GroupTeam",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "team2",
                        "type": "GroupTeam",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "canHaveExtraTime",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "literal type",
                "jsdoctags": [
                    {
                        "name": "team1",
                        "type": "GroupTeam",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "team2",
                        "type": "GroupTeam",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "canHaveExtraTime",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "calcSumRating",
                "file": "src/app/shared/utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "arr",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "number",
                "jsdoctags": [
                    {
                        "name": "arr",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "calcTotalStats",
                "file": "src/app/career/player/player.utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "seasons",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "career",
                        "type": "CareerOverview",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "SeasonStats",
                "jsdoctags": [
                    {
                        "name": "seasons",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "career",
                        "type": "CareerOverview",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "calcWeightedSumRating",
                "file": "src/app/shared/utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "arr",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "weight",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "arr",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "weight",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "checkForAvailableRoles",
                "file": "src/app/moba/draft/draft.utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "selectedRoles",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "Role[]",
                "jsdoctags": [
                    {
                        "name": "selectedRoles",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "checkHalfStar",
                "file": "src/app/career/career.utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "rating",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "rating",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "checkStars",
                "file": "src/app/pages/home/home.utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "starterRating",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "squadRating",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "starterRating",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "squadRating",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "compare",
                "file": "src/app/shared/utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "a",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "b",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "isAsc",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "a",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "b",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "isAsc",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "extraTimeResult",
                "file": "src/app/simulation/simulation.utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "match",
                        "type": "Match",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "match",
                        "type": "Match",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "findTeamInTournament",
                "file": "src/app/simulation/simulation.utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "groups",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "nation",
                        "type": "GroupTeam",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "groups",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "nation",
                        "type": "GroupTeam",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "formatDecimal",
                "file": "src/app/shared/utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "num",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "decimals",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "num",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "decimals",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "generateNewClubStandings",
                "file": "src/app/career/club/club.utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "club",
                        "type": "Club",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "literal type",
                "jsdoctags": [
                    {
                        "name": "club",
                        "type": "Club",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getAbbrevNumber",
                "file": "src/app/shared/utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "n",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "string",
                "jsdoctags": [
                    {
                        "name": "n",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getAbbrevString",
                "file": "src/app/shared/utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "str",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "string",
                "jsdoctags": [
                    {
                        "name": "str",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getAdviceTags",
                "file": "src/app/moba/draft/draft.utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "metaStrength",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "playerMasteries",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "opponentMasteries",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "literal type",
                "jsdoctags": [
                    {
                        "name": "metaStrength",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "playerMasteries",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "opponentMasteries",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getAge",
                "file": "src/app/moba/player/player.utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": []
            },
            {
                "name": "getAllMasteries",
                "file": "src/app/moba/draft/draft.utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "champ",
                        "type": "Champion",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "playerMasteries",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "champ",
                        "type": "Champion",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "playerMasteries",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getAppsForSeason",
                "file": "src/app/career/player/player.utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "club",
                        "type": "TransferOption",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "literal type",
                "jsdoctags": [
                    {
                        "name": "club",
                        "type": "TransferOption",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getAttributes",
                "file": "src/app/moba/player/player.utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "role",
                        "type": "Role",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "age",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "regionSkew",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "MobaAttributes",
                "jsdoctags": [
                    {
                        "name": "role",
                        "type": "Role",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "age",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "regionSkew",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getChampionMasteryBasedOnDiff",
                "file": "src/app/moba/draft/draft.utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Calculates the TierListRankings based on the provided list of champions and the draft difficulty.</p>\n",
                "args": [
                    {
                        "name": "allChamps",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "difficulty",
                        "type": "DraftDifficulty",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "TierListRankings",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 8664,
                            "end": 8673,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "allChamps"
                        },
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 8647,
                            "end": 8652,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "param"
                        },
                        "comment": "<ul>\n<li>The list of all champions to consider.</li>\n</ul>\n",
                        "typeExpression": {
                            "pos": 8653,
                            "end": 8663,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 316,
                            "type": {
                                "pos": 8654,
                                "end": 8662,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 1,
                                "kind": 188,
                                "elementType": {
                                    "pos": 8654,
                                    "end": 8660,
                                    "flags": 16777216,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 1,
                                    "kind": 150
                                }
                            }
                        }
                    },
                    {
                        "name": {
                            "pos": 8743,
                            "end": 8753,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "difficulty"
                        },
                        "type": "DraftDifficulty",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 8719,
                            "end": 8724,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "param"
                        },
                        "comment": "<ul>\n<li>The difficulty level of the draft (easy, medium, hard).</li>\n</ul>\n",
                        "typeExpression": {
                            "pos": 8725,
                            "end": 8742,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 316,
                            "type": {
                                "pos": 8726,
                                "end": 8741,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 1,
                                "kind": 183,
                                "typeName": {
                                    "pos": 8726,
                                    "end": 8741,
                                    "flags": 16777216,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 0,
                                    "kind": 80,
                                    "escapedText": "DraftDifficulty"
                                }
                            }
                        }
                    },
                    {
                        "tagName": {
                            "pos": 8816,
                            "end": 8822,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "return"
                        },
                        "comment": "<p>The TierListRankings object with champion slices for each tier (s, a, b, c, d).</p>\n",
                        "returnType": ""
                    }
                ]
            },
            {
                "name": "getChampMains",
                "file": "src/app/moba/player/player.utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "role",
                        "type": "Role",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "gameStateStrength",
                        "type": "GameState",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "Champion[]",
                "jsdoctags": [
                    {
                        "name": "role",
                        "type": "Role",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "gameStateStrength",
                        "type": "GameState",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getChampMasteries",
                "file": "src/app/moba/draft/draft.utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "champ",
                        "type": "DraftChampion",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "draftPhase",
                        "type": "DraftPhase",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "currentDraftRound",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "isRedSide",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "playerSide",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "champ",
                        "type": "DraftChampion",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "draftPhase",
                        "type": "DraftPhase",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "currentDraftRound",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "isRedSide",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "playerSide",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getChampPropFromDraftPhase",
                "file": "src/app/moba/draft/draft.utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "draftPhase",
                        "type": "DraftPhase",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "currentDraftRound",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "isRedSide",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "draftPhase",
                        "type": "DraftPhase",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "currentDraftRound",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "isRedSide",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getCompositionAdviceAndGrade",
                "file": "src/app/moba/draft/draft-grader.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "isBlueSide",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "blueSideChampPlaceholders",
                        "type": "WritableSignal",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "redSideChampPlaceholders",
                        "type": "WritableSignal",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "blueSideDraftScores",
                        "type": "WritableSignal",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "redSideDraftScores",
                        "type": "WritableSignal",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "isBlueSide",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "blueSideChampPlaceholders",
                        "type": "WritableSignal",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "redSideChampPlaceholders",
                        "type": "WritableSignal",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "blueSideDraftScores",
                        "type": "WritableSignal",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "redSideDraftScores",
                        "type": "WritableSignal",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getCurrentClub",
                "file": "src/app/career/club/club.utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "clubs",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "season",
                        "type": "Season",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "parentClub",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "ClubStats | null",
                "jsdoctags": [
                    {
                        "name": "clubs",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "season",
                        "type": "Season",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "parentClub",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getCurrentClubAsTransfer",
                "file": "src/app/career/club/club.utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "club",
                        "type": "ClubStats",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "season",
                        "type": "Season",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "parentClub",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "hasLoanOption",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "TransferOption",
                "jsdoctags": [
                    {
                        "name": "club",
                        "type": "ClubStats",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "season",
                        "type": "Season",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "parentClub",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "hasLoanOption",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getCurrentRoles",
                "file": "src/app/moba/player/player.utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "players",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "Player[]",
                "jsdoctags": [
                    {
                        "name": "players",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getDisplayRating",
                "file": "src/app/simulation/simulation.utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "rating",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "isGrade",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "rating",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "isGrade",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getDraftChampions",
                "file": "src/app/moba/draft/draft.utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "champions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "patchData",
                        "type": "PatchData",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "playerMasteries",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "opponentMasteries",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "DraftChampion[]",
                "jsdoctags": [
                    {
                        "name": "champions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "patchData",
                        "type": "PatchData",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "playerMasteries",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "opponentMasteries",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getGameStateStrength",
                "file": "src/app/moba/player/player.utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "playStyle",
                        "type": "PlayStyle",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "GameState",
                "jsdoctags": [
                    {
                        "name": "playStyle",
                        "type": "PlayStyle",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getGradeStyle",
                "file": "src/app/simulation/simulation.utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "grade",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "string | \"good-grade\" | \"ok-grade\" | \"bad-grade\"",
                "jsdoctags": [
                    {
                        "name": "grade",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getGradeSummary",
                "file": "src/app/simulation/simulation.utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "nationName",
                        "type": "GroupTeam",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "destrucuredGroupId": "35b12807-5b4e-440d-b7a8-452532652d75",
                        "destructuredParameter": true
                    },
                    {
                        "name": "reportCard",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "destrucuredGroupId": "35b12807-5b4e-440d-b7a8-452532652d75",
                        "destructuredParameter": true
                    },
                    {
                        "name": "matchesPlayed",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "destrucuredGroupId": "35b12807-5b4e-440d-b7a8-452532652d75",
                        "destructuredParameter": true
                    },
                    {
                        "name": "groupFinish",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "destrucuredGroupId": "35b12807-5b4e-440d-b7a8-452532652d75",
                        "destructuredParameter": true
                    }
                ],
                "returnType": "string",
                "jsdoctags": [
                    {
                        "name": "nationName",
                        "type": "GroupTeam",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "destrucuredGroupId": "35b12807-5b4e-440d-b7a8-452532652d75",
                        "destructuredParameter": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "reportCard",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "destrucuredGroupId": "35b12807-5b4e-440d-b7a8-452532652d75",
                        "destructuredParameter": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "matchesPlayed",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "destrucuredGroupId": "35b12807-5b4e-440d-b7a8-452532652d75",
                        "destructuredParameter": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "groupFinish",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "destrucuredGroupId": "35b12807-5b4e-440d-b7a8-452532652d75",
                        "destructuredParameter": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getHostNations",
                "file": "src/app/simulation/simulation.utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "filteredNations",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "numOfTeams",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "GroupTeam[]",
                "jsdoctags": [
                    {
                        "name": "filteredNations",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "numOfTeams",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getLeagueStandings",
                "file": "src/app/career/club/club.utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "club",
                        "type": "Club",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "number",
                "jsdoctags": [
                    {
                        "name": "club",
                        "type": "Club",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getMasterySort",
                "file": "src/app/moba/draft/draft.utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "draftPhase",
                        "type": "DraftPhase",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "currentDraftRound",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "isRedSide",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "\"playerMastery\" | \"opponentMastery\"",
                "jsdoctags": [
                    {
                        "name": "draftPhase",
                        "type": "DraftPhase",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "currentDraftRound",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "isRedSide",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getMetaStrength",
                "file": "src/app/moba/draft/draft.utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "champion",
                        "type": "Champion",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "patchVersion",
                        "type": "AllRolesTierList",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "champion",
                        "type": "Champion",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "patchVersion",
                        "type": "AllRolesTierList",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getName",
                "file": "src/app/moba/player/player.utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "newPlayerOptions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "region",
                        "type": "MobaRegion",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "selectedPlayers",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "returnType": "GamerTag",
                "jsdoctags": [
                    {
                        "name": "newPlayerOptions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "region",
                        "type": "MobaRegion",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "selectedPlayers",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getNameNationality",
                "file": "src/app/moba/region/region.utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "region",
                        "type": "MobaRegion",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "string",
                "jsdoctags": [
                    {
                        "name": "region",
                        "type": "MobaRegion",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getNationality",
                "file": "src/app/moba/player/player.utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "gamerTag",
                        "type": "GamerTag",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "Nation",
                "jsdoctags": [
                    {
                        "name": "gamerTag",
                        "type": "GamerTag",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getOverallRating",
                "file": "src/app/moba/player/player.utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "mechanics",
                        "type": "MobaAttributes",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "destrucuredGroupId": "7bee4031-7d3b-4523-b8a5-a423486d5fa3",
                        "destructuredParameter": true
                    },
                    {
                        "name": "intangible",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "destrucuredGroupId": "7bee4031-7d3b-4523-b8a5-a423486d5fa3",
                        "destructuredParameter": true
                    },
                    {
                        "name": "macro",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "destrucuredGroupId": "7bee4031-7d3b-4523-b8a5-a423486d5fa3",
                        "destructuredParameter": true
                    },
                    {
                        "name": "role",
                        "type": "Role",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "number",
                "jsdoctags": [
                    {
                        "name": "mechanics",
                        "type": "MobaAttributes",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "destrucuredGroupId": "7bee4031-7d3b-4523-b8a5-a423486d5fa3",
                        "destructuredParameter": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "intangible",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "destrucuredGroupId": "7bee4031-7d3b-4523-b8a5-a423486d5fa3",
                        "destructuredParameter": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "macro",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "destrucuredGroupId": "7bee4031-7d3b-4523-b8a5-a423486d5fa3",
                        "destructuredParameter": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "role",
                        "type": "Role",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getPatchData",
                "file": "src/app/moba/draft/draft.utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "name",
                        "type": "PatchName",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "PatchData",
                "jsdoctags": [
                    {
                        "name": "name",
                        "type": "PatchName",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getPlayerOptions",
                "file": "src/app/moba/player/player.utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "region",
                        "type": "MobaRegion",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "selectedPlayers",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "returnType": "Player[]",
                "jsdoctags": [
                    {
                        "name": "region",
                        "type": "MobaRegion",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "selectedPlayers",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getPlayingTime",
                "file": "src/app/career/career.utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "club",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "season",
                        "type": "Season",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "PlayingTime",
                "jsdoctags": [
                    {
                        "name": "club",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "season",
                        "type": "Season",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getPlayStyle",
                "file": "src/app/moba/player/player.utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "attributes",
                        "type": "MobaAttributes",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "age",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "PlayStyle",
                "jsdoctags": [
                    {
                        "name": "attributes",
                        "type": "MobaAttributes",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "age",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getRandFloat",
                "file": "src/app/shared/utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "min",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "max",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "decimalPlaces",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "2"
                    }
                ],
                "returnType": "number",
                "jsdoctags": [
                    {
                        "name": "min",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "max",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "decimalPlaces",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "2",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getRandomCardTimes",
                "file": "src/app/simulation/simulation.utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "events",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "time",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "MatchEvent[]",
                "jsdoctags": [
                    {
                        "name": "events",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "time",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getRandomGoalTimes",
                "file": "src/app/simulation/simulation.utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "forEventTimes",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "oppEventTimes",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "time",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "MatchEvent",
                "jsdoctags": [
                    {
                        "name": "forEventTimes",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "oppEventTimes",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "time",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getRandomInjuryTimes",
                "file": "src/app/simulation/simulation.utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "events",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "time",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "MatchEvent[]",
                "jsdoctags": [
                    {
                        "name": "events",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "time",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getRandomInt",
                "file": "src/app/shared/utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "mn",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "mx",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "number",
                "jsdoctags": [
                    {
                        "name": "mn",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "mx",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getRandomIntBC",
                "file": "src/app/shared/utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "min",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "max",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "skew",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "min",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "max",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "skew",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getRandomInts",
                "file": "src/app/shared/utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "min",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "max",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "quantity",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "Set<number>",
                "jsdoctags": [
                    {
                        "name": "min",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "max",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "quantity",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getRandomIntsBC",
                "file": "src/app/shared/utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "min",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "max",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "skew",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "quantity",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "min",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "max",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "skew",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "quantity",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getRandomMasteries",
                "file": "src/app/moba/draft/draft.utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Generates a list of draft players with randomly assigned champion masteries based on the provided patch tier list and difficulty level.</p>\n",
                "args": [
                    {
                        "name": "patchTierList",
                        "type": "PatchData",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "destrucuredGroupId": "d1fd5d28-0eb8-4f40-9bad-bbf01f4c60b8",
                        "destructuredParameter": true
                    },
                    {
                        "name": "difficulty",
                        "type": "DraftDifficulty",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "'medium'"
                    }
                ],
                "returnType": "DraftPlayer[]",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 9935,
                            "end": 9948,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "patchTierList"
                        },
                        "type": "PatchData",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "destrucuredGroupId": "d1fd5d28-0eb8-4f40-9bad-bbf01f4c60b8",
                        "destructuredParameter": true,
                        "tagName": {
                            "pos": 9917,
                            "end": 9922,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "param"
                        },
                        "comment": "<ul>\n<li>An object containing the patch tier list for each role.</li>\n</ul>\n",
                        "typeExpression": {
                            "pos": 9923,
                            "end": 9934,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 316,
                            "type": {
                                "pos": 9924,
                                "end": 9933,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 1,
                                "kind": 183,
                                "typeName": {
                                    "pos": 9924,
                                    "end": 9933,
                                    "flags": 16777216,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 0,
                                    "kind": 80,
                                    "escapedText": "PatchData"
                                }
                            }
                        }
                    },
                    {
                        "name": {
                            "pos": 10036,
                            "end": 10046,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "difficulty"
                        },
                        "type": "DraftDifficulty",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "'medium'",
                        "tagName": {
                            "pos": 10011,
                            "end": 10016,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "param"
                        },
                        "comment": "<ul>\n<li>The difficulty level for generating the champion masteries. Defaults to &#39;medium&#39;.</li>\n</ul>\n",
                        "typeExpression": {
                            "pos": 10017,
                            "end": 10034,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 316,
                            "type": {
                                "pos": 10018,
                                "end": 10033,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 1,
                                "kind": 183,
                                "typeName": {
                                    "pos": 10018,
                                    "end": 10033,
                                    "flags": 16777216,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 0,
                                    "kind": 80,
                                    "escapedText": "DraftDifficulty"
                                }
                            }
                        }
                    },
                    {
                        "tagName": {
                            "pos": 10145,
                            "end": 10151,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "return"
                        },
                        "comment": "<p>An array of draft players with their main role and randomly assigned champion masteries.</p>\n",
                        "returnType": "[]"
                    }
                ]
            },
            {
                "name": "getRandomPersonality",
                "file": "src/app/shared/utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [],
                "returnType": "string"
            },
            {
                "name": "getRegionSkew",
                "file": "src/app/moba/region/region.utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "region",
                        "type": "MobaRegion",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "number",
                "jsdoctags": [
                    {
                        "name": "region",
                        "type": "MobaRegion",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getRoleBasedAttributes",
                "file": "src/app/moba/player/player.utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "role",
                        "type": "Role",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "attributeGroup",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "age",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "regionSkew",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "AttributeGroup",
                "jsdoctags": [
                    {
                        "name": "role",
                        "type": "Role",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "attributeGroup",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "age",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "regionSkew",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getRoleFromFilter",
                "file": "src/app/moba/draft/draft.model.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "role",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "Role | undefined",
                "jsdoctags": [
                    {
                        "name": "role",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getRoleMastery",
                "file": "src/app/moba/draft/draft.utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "id",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "roleMasteries",
                        "type": "TierListRankings",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "id",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "roleMasteries",
                        "type": "TierListRankings",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getRoleMetaStrength",
                "file": "src/app/moba/draft/draft.utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "id",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "roleTierList",
                        "type": "TierListRankings",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "number",
                "jsdoctags": [
                    {
                        "name": "id",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "roleTierList",
                        "type": "TierListRankings",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getSkewedAssists",
                "file": "src/app/career/simulation/simulation.utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "diff",
                        "type": "LeagueDifficulty",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "apps",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "diff",
                        "type": "LeagueDifficulty",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "apps",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getSkewedGoals",
                "file": "src/app/career/simulation/simulation.utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "diff",
                        "type": "LeagueDifficulty",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "apps",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "diff",
                        "type": "LeagueDifficulty",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "apps",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getTeamBuffs",
                "file": "src/app/simulation/simulation.utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "team",
                        "type": "GroupTeam",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "otherTeam",
                        "type": "GroupTeam",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "winner",
                        "type": "GroupTeam",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "loser",
                        "type": "GroupTeam",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "forEventTimes",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "oppEventTimes",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "team",
                        "type": "GroupTeam",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "otherTeam",
                        "type": "GroupTeam",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "winner",
                        "type": "GroupTeam",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "loser",
                        "type": "GroupTeam",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "forEventTimes",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "oppEventTimes",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getTeamCompStyleScoring",
                "file": "src/app/moba/draft/draft-grader.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Calculates the team&#39;s composition style statistics based on the selected champions.</p>\n",
                "args": [
                    {
                        "name": "selectedTeamChamps",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "CompStyleStats",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 2135,
                            "end": 2153,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "selectedTeamChamps"
                        },
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 2111,
                            "end": 2116,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "param"
                        },
                        "comment": "<ul>\n<li>The array of champions selected for the team.</li>\n</ul>\n",
                        "typeExpression": {
                            "pos": 2117,
                            "end": 2134,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 316,
                            "type": {
                                "pos": 2118,
                                "end": 2133,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 1,
                                "kind": 188,
                                "elementType": {
                                    "pos": 2118,
                                    "end": 2131,
                                    "flags": 16777216,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 1,
                                    "kind": 183,
                                    "typeName": {
                                        "pos": 2118,
                                        "end": 2131,
                                        "flags": 16777216,
                                        "modifierFlagsCache": 0,
                                        "transformFlags": 0,
                                        "kind": 80,
                                        "escapedText": "DraftChampion"
                                    }
                                }
                            }
                        }
                    },
                    {
                        "tagName": {
                            "pos": 2207,
                            "end": 2213,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "return"
                        },
                        "comment": "<p>The composition style statistics for the team.</p>\n",
                        "returnType": ""
                    }
                ]
            },
            {
                "name": "getTransferFee",
                "file": "src/app/career/career.utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "club",
                        "type": "Club",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "parentClub",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "hasLoanOption",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "playingTime",
                        "type": "PlayingTime",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "season",
                        "type": "Season",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "literal type",
                "jsdoctags": [
                    {
                        "name": "club",
                        "type": "Club",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "parentClub",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "hasLoanOption",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "playingTime",
                        "type": "PlayingTime",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "season",
                        "type": "Season",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getWage",
                "file": "src/app/career/career.utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "playingTime",
                        "type": "PlayingTime",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "parentClub",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "hasLoanOption",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "number",
                "jsdoctags": [
                    {
                        "name": "playingTime",
                        "type": "PlayingTime",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "parentClub",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "hasLoanOption",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "groupByProp",
                "file": "src/app/shared/utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "arr",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "prop",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "arr",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "prop",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "groupLetters",
                "file": "src/app/simulation/simulation.utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "index",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "index",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "isArrayOfStrings",
                "file": "src/app/shared/utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "value",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "string[]",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 5535,
                            "end": 5540,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "value"
                        },
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 5529,
                            "end": 5534,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "param"
                        },
                        "comment": "<p>any type of value</p>\n"
                    },
                    {
                        "tagName": {
                            "pos": 5564,
                            "end": 5571,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "returns"
                        },
                        "comment": "<p>boolean</p>\n"
                    }
                ]
            },
            {
                "name": "isCompatPlayStyle",
                "file": "src/app/moba/player/player.utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "map",
                        "type": "Map",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "playStyle",
                        "type": "PlayStyle",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "boolean",
                "jsdoctags": [
                    {
                        "name": "map",
                        "type": "Map",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "playStyle",
                        "type": "PlayStyle",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "isFirstName",
                "file": "src/app/core/services/firestore.model.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "x",
                        "type": "FirstName",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "FirstName",
                "jsdoctags": [
                    {
                        "name": "x",
                        "type": "FirstName",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "isNation",
                "file": "src/app/models/nation.model.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "value",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "Nation",
                "jsdoctags": [
                    {
                        "name": "value",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "isRole",
                "file": "src/app/moba/player/player.model.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "value",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "Role",
                "jsdoctags": [
                    {
                        "name": "value",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "isTopNumOfMap",
                "file": "src/app/shared/utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "map",
                        "type": "Map",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "searchString",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "topBy",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "boolean",
                "jsdoctags": [
                    {
                        "name": "map",
                        "type": "Map",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "searchString",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "topBy",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "mapRange",
                "file": "src/app/shared/utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "value",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fromMin",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fromMax",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "toMin",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "toMax",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "number",
                "jsdoctags": [
                    {
                        "name": "value",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fromMin",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fromMax",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "toMin",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "toMax",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "matchScore",
                "file": "src/app/simulation/simulation.utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "team",
                        "type": "GroupTeam",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "otherTeam",
                        "type": "GroupTeam",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "hasExtraTime",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "Match",
                "jsdoctags": [
                    {
                        "name": "team",
                        "type": "GroupTeam",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "otherTeam",
                        "type": "GroupTeam",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "hasExtraTime",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "median",
                "file": "src/app/shared/utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "values",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "values",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "needsMoreDmgAdvice",
                "file": "src/app/moba/draft/draft-grader.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "selectedTeamChamps",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "literal type",
                "jsdoctags": [
                    {
                        "name": "selectedTeamChamps",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "needsMoreScalingAdvice",
                "file": "src/app/moba/draft/draft-grader.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "selectedTeamChamps",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "literal type",
                "jsdoctags": [
                    {
                        "name": "selectedTeamChamps",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "newSeasonStr",
                "file": "src/app/career/career.utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "year",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "year",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "regionQualifierHelper",
                "file": "src/app/simulation/simulation.utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "region",
                        "type": "Region",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "tournamentSize",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "hostNations",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "literal type",
                "jsdoctags": [
                    {
                        "name": "region",
                        "type": "Region",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "tournamentSize",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "hostNations",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "regionsValidator",
                "file": "src/app/simulation/simulation.utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [],
                "returnType": "ValidatorFn"
            },
            {
                "name": "roundOf32Helper",
                "file": "src/app/simulation/simulation.utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "groups",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "literal type",
                "jsdoctags": [
                    {
                        "name": "groups",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "shuffle",
                "file": "src/app/shared/utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "arr",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "arr",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "simulateApps",
                "file": "src/app/career/simulation/simulation.utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "appearances",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "transfer",
                        "type": "TransferOption",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "season",
                        "type": "Season",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "career",
                        "type": "CareerOverview",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "literal type",
                "jsdoctags": [
                    {
                        "name": "appearances",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "transfer",
                        "type": "TransferOption",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "season",
                        "type": "Season",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "career",
                        "type": "CareerOverview",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "sortEventTimes",
                "file": "src/app/simulation/simulation.utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "a",
                        "type": "MatchEvent",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "b",
                        "type": "MatchEvent",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "a",
                        "type": "MatchEvent",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "b",
                        "type": "MatchEvent",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "sortMapAttributes",
                "file": "src/app/moba/player/player.utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "attributes",
                        "type": "MobaAttributes",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "attributes",
                        "type": "MobaAttributes",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "startsWithVowel",
                "file": "src/app/shared/utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "word",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "boolean",
                "jsdoctags": [
                    {
                        "name": "word",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "totalSeasonsStr",
                "file": "src/app/career/career.utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "first",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "last",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "first",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "last",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "validateHosts",
                "file": "src/app/simulation/simulation.utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "control",
                        "type": "AbstractControl",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "control",
                        "type": "AbstractControl",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "whoWon",
                "file": "src/app/simulation/simulation.utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "goalsFor",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "goalsAg",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "forEvents",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "oppEvents",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "team",
                        "type": "GroupTeam",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "otherTeam",
                        "type": "GroupTeam",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "isPenaltyWin",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "literal type",
                "jsdoctags": [
                    {
                        "name": "goalsFor",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "goalsAg",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "forEvents",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "oppEvents",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "team",
                        "type": "GroupTeam",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "otherTeam",
                        "type": "GroupTeam",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "isPenaltyWin",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "Archetype",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"bruiser\" | \"tank\" | \"mage\" | \"assassin\" | \"enchanter\" | \"fighter\" | \"crit-marksman\" | \"lethality-marksman\" | \"terrainAbuser\" | \"split-pusher\" | \"immobile\" | \"mobile\" | \"lane-bully\" | \"aoe\" | \"duelist\"",
                "file": "src/app/moba/champion/champion.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "CompRole",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"hard-engage\" | \"engage\" | \"poke\" | \"isolator\" | \"anti-engage\" | \"team-fight-burst\" | \"team-fight-sustain\" | \"carry\"",
                "file": "src/app/moba/champion/champion.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "CompStyle",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"engage\" | \"pick\" | \"protect\" | \"siege\" | \"split\"",
                "file": "src/app/moba/draft/draft.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "DamageType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"high ad\" | \"high ap\" | \"high mix\" | \"low ad\" | \"low ap\" | \"low mix\" | \"utility\"",
                "file": "src/app/moba/champion/champion.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "DraftAdviceTag",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"Counters Banned\" | \"Recommended\" | \"Counter Pick\" | \"Not Recommended\" | \"High Synergy\"",
                "file": "src/app/moba/draft/draft.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "DraftDifficulty",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"easy\" | \"medium\" | \"hard\"",
                "file": "src/app/moba/draft/draft.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "DraftPhase",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"Blue Ban 1\" | \"Blue Ban 2\" | \"Blue Ban 3\" | \"Blue Ban 4\" | \"Blue Ban 5\" | \"Blue Pick 1\" | \"Blue Pick 2\" | \"Blue Pick 3\" | \"Blue Pick 4\" | \"Blue Pick 5\" | \"Red Ban 1\" | \"Red Ban 2\" | \"Red Ban 3\" | \"Red Ban 4\" | \"Red Ban 5\" | \"Red Pick 1\" | \"Red Pick 2\" | \"Red Pick 3\" | \"Red Pick 4\" | \"Red Pick 5\" | \"Draft Complete\"",
                "file": "src/app/moba/draft/draft.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "DraftSortHeader",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"name\" | \"mastery\" | \"meta\" | \"synergy\" | \"counter\"",
                "file": "src/app/moba/draft/draft.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "EventEmoji",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"⚽\" | \"🟨\" | \"🟥\" | \"🟨🟥\" | \"🚑\"",
                "file": "src/app/simulation/simulation.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "FilterRole",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Role | \"all\"",
                "file": "src/app/moba/player/player.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "GameState",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"early-game\" | \"mid-game\" | \"late-game\"",
                "file": "src/app/moba/player/player.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "KnockoutRound",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "[]",
                "file": "src/app/simulation/simulation.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 188
            },
            {
                "name": "LeagueDifficulty",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"easy\" | \"mediumEasy\" | \"medium\" | \"mediumHard\" | \"hard\"",
                "file": "src/app/career/club/club.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "LeagueName",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"LCS\" | \"LEC\" | \"LPL\" | \"LCK\" | \"VCS\" | \"CBLOL\" | \"PCS\" | \"LLA\"",
                "file": "src/app/moba/region/region.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "LetterRank",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"S\" | \"A\" | \"B\" | \"C\" | \"D\" | \"F\" | \"N/A\" | \"S+\" | \"S-\" | \"A+\" | \"A-\" | \"B+\" | \"B-\" | \"C+\" | \"C-\" | \"D+\" | \"D-\"",
                "file": "src/app/moba/draft/draft.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "MobaDraftKey",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "src/app/moba/moba.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 201
            },
            {
                "name": "MobaStorageKey",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"moba_region\" | \"moba_player_options\" | \"moba_selected_players\"",
                "file": "src/app/moba/moba.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "Name",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "FirstName | LastName",
                "file": "src/app/core/services/firestore.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "PatchName",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "src/app/moba/draft/draft.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 201
            },
            {
                "name": "PatchVersion",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "src/app/moba/draft/draft.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 201
            },
            {
                "name": "PlayingTime",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"breakthrough prospect\" | \"fringe player\" | \"impact sub\" | \"squad player\" | \"regular starter\" | \"important player\" | \"star player\"",
                "file": "src/app/career/player/player.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "PlayStyle",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"scaler\" | \"mechanical god\" | \"split-pusher\" | \"team-fighter\" | \"closer\" | \"flex god\" | \"macro-player\" | \"leader\" | \"baron stealer\" | \"prodigy\" | \"journeyman\" | \"specialist\"",
                "file": "src/app/moba/player/player.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "RegionAbbrev",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"NA\" | \"EU\" | \"CN\" | \"KR\" | \"BR\" | \"APAC\" | \"LATAM\"",
                "file": "src/app/moba/region/region.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "Role",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"top\" | \"jungle\" | \"mid\" | \"adc\" | \"support\"",
                "file": "src/app/moba/player/player.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "TransferType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"loan\" | \"transfer\" | \"stay\" | \"transfer/loan\" | \"re-sign\" | \"sign\"",
                "file": "src/app/career/club/club.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            }
        ],
        "enumerations": [
            {
                "name": "Region",
                "childs": [
                    {
                        "name": "UEFA",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "uefa"
                    },
                    {
                        "name": "CONMEBOL",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "conembol"
                    },
                    {
                        "name": "CONCACAF",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "concacaf"
                    },
                    {
                        "name": "CAF",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "caf"
                    },
                    {
                        "name": "AFC",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "afc"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/models/club.model.ts"
            },
            {
                "name": "RegionName",
                "childs": [
                    {
                        "name": "uefa",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "uefa"
                    },
                    {
                        "name": "afc",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "afc"
                    },
                    {
                        "name": "caf",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "caf"
                    },
                    {
                        "name": "concacaf",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "concacaf"
                    },
                    {
                        "name": "conmebol",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "conmebol"
                    },
                    {
                        "name": "ofc",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "ofc"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/simulation/simulation.model.ts"
            },
            {
                "name": "RoleIndex",
                "childs": [
                    {
                        "name": "TOP",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "JUNGLE",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "MID",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "ADC",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "SUPPORT",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/moba/player/player.model.ts"
            },
            {
                "name": "TierValue",
                "childs": [
                    {
                        "name": "S",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 20
                    },
                    {
                        "name": "A",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 16
                    },
                    {
                        "name": "B",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 12
                    },
                    {
                        "name": "C",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 8
                    },
                    {
                        "name": "D",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 4
                    },
                    {
                        "name": "F",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 0
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/moba/draft/draft.model.ts"
            }
        ],
        "groupedVariables": {
            "src/app/career/career.constants.ts": [
                {
                    "name": "ageFactor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/career/career.constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(age: number, ability: number, hasLoanOption: boolean) => {\r\n  const limitYouthClub = false;\r\n  if (age < 18 && !limitYouthClub && !hasLoanOption) {\r\n    return CLUB_MULTIPLIER * 400;\r\n  } else {\r\n    return playerToClubAbility(ability);\r\n  }\r\n}"
                },
                {
                    "name": "CLUB_MULTIPLIER",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/career/career.constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "2.5"
                },
                {
                    "name": "fringeRoles",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/career/career.constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "['breakthrough prospect', 'fringe player', 'impact sub']"
                },
                {
                    "name": "playerToClubAbility",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/career/career.constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(ability: number) => {\r\n  return ability * CLUB_MULTIPLIER + 115 - ability / 1.8;\r\n}"
                },
                {
                    "name": "squadRoles",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/career/career.constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "['squad player', 'regular starter', 'important player', 'star player']"
                },
                {
                    "name": "tableHeaders",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/career/career.constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  'Year',\r\n  'Age',\r\n  'Team',\r\n  'Info (Transfer)',\r\n  'App',\r\n  'Goals',\r\n  'Assists',\r\n  'Avg Rating',\r\n  'Wage (£/week)',\r\n  'Player Role',\r\n]"
                }
            ],
            "src/app/moba/player/player.model.ts": [
                {
                    "name": "AllGameStates",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/moba/player/player.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GameState[]",
                    "defaultValue": "['early-game', 'mid-game', 'late-game']"
                },
                {
                    "name": "AllRoles",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/moba/player/player.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Role[]",
                    "defaultValue": "['top', 'jungle', 'mid', 'adc', 'support']"
                },
                {
                    "name": "AllUniquePlayStyles",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/moba/player/player.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PlayStyle[]",
                    "defaultValue": "[\r\n  'scaler',\r\n  'mechanical god',\r\n  'split-pusher',\r\n  'team-fighter',\r\n  'flex god',\r\n  'macro-player',\r\n  'leader',\r\n  'closer',\r\n  'baron stealer',\r\n]"
                },
                {
                    "name": "positionFilters",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/moba/player/player.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type[]",
                    "defaultValue": "Array.from([\r\n  {\r\n    name: 'all',\r\n    url: 'assets/images/role_icons/all.webp',\r\n  },\r\n  ...positions,\r\n])"
                },
                {
                    "name": "positions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/moba/player/player.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type[]",
                    "defaultValue": "[\r\n  {\r\n    name: 'top',\r\n    url: 'assets/images/role_icons/top.webp',\r\n  },\r\n  {\r\n    name: 'jungle',\r\n    url: 'assets/images/role_icons/jungle.webp',\r\n  },\r\n  {\r\n    name: 'mid',\r\n    url: 'assets/images/role_icons/mid.webp',\r\n  },\r\n  {\r\n    name: 'adc',\r\n    url: 'assets/images/role_icons/adc.webp',\r\n  },\r\n  {\r\n    name: 'support',\r\n    url: 'assets/images/role_icons/support.webp',\r\n  },\r\n]"
                },
                {
                    "name": "rolePriority",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/moba/player/player.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "defaultValue": "{\r\n  top: 1,\r\n  jungle: 2,\r\n  mid: 3,\r\n  adc: 4,\r\n  support: 5,\r\n}"
                },
                {
                    "name": "sortByMainRole",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/moba/player/player.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(players: Player[]): Player[] => {\r\n  return players.sort((a, b) => {\r\n    const aRolePriority = rolePriority[a.mainRole] || Infinity;\r\n    const bRolePriority = rolePriority[b.mainRole] || Infinity;\r\n\r\n    return aRolePriority - bRolePriority;\r\n  });\r\n}"
                }
            ],
            "src/app/models/nation.model.ts": [
                {
                    "name": "allNations",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/models/nation.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => {\r\n  const newArr = nationsJson;\r\n  const nations: Nation[] = [];\r\n\r\n  Object.values(newArr).forEach(t => {\r\n    if (t.nations) {\r\n      nations.push(...(t.nations as Nation[]));\r\n    }\r\n  });\r\n\r\n  return nations;\r\n}"
                },
                {
                    "name": "baseTeam",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/models/nation.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(hostNations: GroupTeam[], nation: Nation): GroupTeam => {\r\n  // random nation values\r\n  let min = 0;\r\n  let max = 0;\r\n\r\n  switch (nation.nationTier) {\r\n    case 's':\r\n      min = 80;\r\n      max = 100;\r\n      break;\r\n    case 'a':\r\n      min = 70;\r\n      max = 95;\r\n      break;\r\n    case 'b':\r\n      min = 65;\r\n      max = 88;\r\n      break;\r\n    case 'c':\r\n      min = 60;\r\n      max = 88;\r\n      break;\r\n    case 'd':\r\n      min = 55;\r\n      max = 80;\r\n      break;\r\n    case 'e':\r\n      min = 40;\r\n      max = 78;\r\n      break;\r\n    case 'f':\r\n      min = 30;\r\n      max = 70;\r\n      break;\r\n    case 'g':\r\n      min = 25;\r\n      max = 55;\r\n      break;\r\n    default:\r\n      min = 25;\r\n      max = 55;\r\n      break;\r\n  }\r\n  const attRating = getRandFloat(min, max);\r\n  const midRating = getRandFloat(min, max);\r\n  const defRating = getRandFloat(min, max);\r\n  const penRating = getRandFloat(min, max);\r\n  return {\r\n    ...nation,\r\n    gDiff: 0,\r\n    gFor: 0,\r\n    gOpp: 0,\r\n    points: 0,\r\n    matchesPlayed: 0,\r\n    tier: nation.nationTier,\r\n    startingRating: {\r\n      att: attRating,\r\n      mid: midRating,\r\n      def: defRating,\r\n      pen: penRating,\r\n    },\r\n    dynamicRating: {\r\n      att: attRating,\r\n      mid: midRating,\r\n      def: defRating,\r\n      pen: penRating,\r\n    },\r\n    isBuffed: {\r\n      att: false,\r\n      mid: false,\r\n      def: false,\r\n      pen: false,\r\n    },\r\n    isDebuffed: {\r\n      att: false,\r\n      mid: false,\r\n      def: false,\r\n      pen: false,\r\n    },\r\n    currentBuffs: {\r\n      att: [],\r\n      mid: [],\r\n      def: [],\r\n      pen: [],\r\n    },\r\n    rating: (attRating + midRating + defRating) / 3,\r\n    ranking: 0,\r\n    attRanking: 0,\r\n    midRanking: 0,\r\n    defRanking: 0,\r\n    matchHistory: {\r\n      qualifiers: [],\r\n      group: [],\r\n      bracket: [],\r\n    },\r\n    reportCard: {\r\n      grade: null,\r\n      gradeStyle: null,\r\n      gradeSummary: null,\r\n      tournamentFinish: null,\r\n    },\r\n    homeTeam: hostNations.map(t => t.name).includes(nation.name) ? true : false,\r\n    region: nation.region as RegionName,\r\n  };\r\n}"
                },
                {
                    "name": "defaultHost32",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/models/nation.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GroupTeam",
                    "defaultValue": "{\r\n  name: 'Qatar',\r\n  abbreviation: 'qat',\r\n  logo: 'https://fmdataba.com/images/n/QAT.svg',\r\n  emoji: '🇶🇦',\r\n  region: RegionName.afc,\r\n  points: 0,\r\n  gDiff: 0,\r\n  gFor: 0,\r\n  gOpp: 0,\r\n  tier: 'j',\r\n  nationTier: 'e',\r\n  startingRating: {\r\n    att: 0,\r\n    mid: 0,\r\n    def: 0,\r\n    pen: 0,\r\n  },\r\n  dynamicRating: {\r\n    att: 0,\r\n    mid: 0,\r\n    def: 0,\r\n    pen: 0,\r\n  },\r\n  isBuffed: {\r\n    att: false,\r\n    mid: false,\r\n    def: false,\r\n    pen: false,\r\n  },\r\n  isDebuffed: {\r\n    att: false,\r\n    mid: false,\r\n    def: false,\r\n    pen: false,\r\n  },\r\n  currentBuffs: {\r\n    att: [],\r\n    mid: [],\r\n    def: [],\r\n    pen: [],\r\n  },\r\n  rating: 0,\r\n  matchesPlayed: 0,\r\n  matchHistory: {\r\n    qualifiers: [],\r\n    group: [],\r\n    bracket: [],\r\n  },\r\n  reportCard: {\r\n    grade: null,\r\n    gradeStyle: null,\r\n    gradeSummary: null,\r\n    tournamentFinish: null,\r\n  },\r\n  ranking: 0,\r\n  attRanking: 0,\r\n  midRanking: 0,\r\n  defRanking: 0,\r\n  homeTeam: true,\r\n  canSoloHost32: true,\r\n  canSoloHost48: false,\r\n  cohosts32: [],\r\n  cohosts48: [],\r\n  triHosts48: [],\r\n  quadHosts48: [],\r\n}"
                },
                {
                    "name": "defaultHosts48",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/models/nation.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GroupTeam[]",
                    "defaultValue": "[\r\n  {\r\n    name: 'Mexico',\r\n    abbreviation: 'mex',\r\n    logo: 'https://fmdataba.com/images/n/MEX.svg',\r\n    emoji: '🇲🇽',\r\n    region: RegionName.concacaf,\r\n    points: 0,\r\n    gDiff: 0,\r\n    gFor: 0,\r\n    gOpp: 0,\r\n    tier: 'b',\r\n    nationTier: 'b',\r\n    startingRating: {\r\n      att: 0,\r\n      mid: 0,\r\n      def: 0,\r\n      pen: 0,\r\n    },\r\n    dynamicRating: {\r\n      att: 0,\r\n      mid: 0,\r\n      def: 0,\r\n      pen: 0,\r\n    },\r\n    isBuffed: {\r\n      att: false,\r\n      mid: false,\r\n      def: false,\r\n      pen: false,\r\n    },\r\n    isDebuffed: {\r\n      att: false,\r\n      mid: false,\r\n      def: false,\r\n      pen: false,\r\n    },\r\n    currentBuffs: {\r\n      att: [],\r\n      mid: [],\r\n      def: [],\r\n      pen: [],\r\n    },\r\n    rating: 0,\r\n    matchesPlayed: 0,\r\n    matchHistory: {\r\n      qualifiers: [],\r\n      group: [],\r\n      bracket: [],\r\n    },\r\n    reportCard: {\r\n      grade: null,\r\n      gradeStyle: null,\r\n      gradeSummary: null,\r\n      tournamentFinish: null,\r\n    },\r\n    ranking: 0,\r\n    attRanking: 0,\r\n    midRanking: 0,\r\n    defRanking: 0,\r\n    homeTeam: true,\r\n    canSoloHost32: true,\r\n    cohosts32: ['United States'],\r\n    cohosts48: ['United States'],\r\n    canSoloHost48: false,\r\n    triHosts48: ['United States', 'Canada'],\r\n    quadHosts48: [],\r\n  },\r\n  {\r\n    name: 'United States',\r\n    abbreviation: 'usa',\r\n    logo: 'https://fmdataba.com/images/n/USA.svg',\r\n    emoji: '🇺🇸',\r\n    region: RegionName.concacaf,\r\n    points: 0,\r\n    gDiff: 0,\r\n    gFor: 0,\r\n    gOpp: 0,\r\n    tier: 'b',\r\n    nationTier: 'b',\r\n    startingRating: {\r\n      att: 0,\r\n      mid: 0,\r\n      def: 0,\r\n      pen: 0,\r\n    },\r\n    dynamicRating: {\r\n      att: 0,\r\n      mid: 0,\r\n      def: 0,\r\n      pen: 0,\r\n    },\r\n    isBuffed: {\r\n      att: false,\r\n      mid: false,\r\n      def: false,\r\n      pen: false,\r\n    },\r\n    isDebuffed: {\r\n      att: false,\r\n      mid: false,\r\n      def: false,\r\n      pen: false,\r\n    },\r\n    currentBuffs: {\r\n      att: [],\r\n      mid: [],\r\n      def: [],\r\n      pen: [],\r\n    },\r\n    rating: 0,\r\n    matchesPlayed: 0,\r\n    matchHistory: {\r\n      qualifiers: [],\r\n      group: [],\r\n      bracket: [],\r\n    },\r\n    reportCard: {\r\n      grade: null,\r\n      gradeStyle: null,\r\n      gradeSummary: null,\r\n      tournamentFinish: null,\r\n    },\r\n    ranking: 0,\r\n    attRanking: 0,\r\n    midRanking: 0,\r\n    defRanking: 0,\r\n    homeTeam: true,\r\n    canSoloHost32: true,\r\n    cohosts32: ['Canada', 'Mexico'],\r\n    cohosts48: ['Mexico'],\r\n    canSoloHost48: false,\r\n    triHosts48: ['Canada', 'Mexico'],\r\n    quadHosts48: [],\r\n  },\r\n  {\r\n    name: 'Canada',\r\n    abbreviation: 'can',\r\n    logo: 'https://fmdataba.com/images/n/CAN.svg',\r\n    emoji: '🇨🇦',\r\n    region: RegionName.concacaf,\r\n    points: 0,\r\n    gDiff: 0,\r\n    gFor: 0,\r\n    gOpp: 0,\r\n    tier: 'd',\r\n    nationTier: 'd',\r\n    startingRating: {\r\n      att: 0,\r\n      mid: 0,\r\n      def: 0,\r\n      pen: 0,\r\n    },\r\n    dynamicRating: {\r\n      att: 0,\r\n      mid: 0,\r\n      def: 0,\r\n      pen: 0,\r\n    },\r\n    isBuffed: {\r\n      att: false,\r\n      mid: false,\r\n      def: false,\r\n      pen: false,\r\n    },\r\n    isDebuffed: {\r\n      att: false,\r\n      mid: false,\r\n      def: false,\r\n      pen: false,\r\n    },\r\n    currentBuffs: {\r\n      att: [],\r\n      mid: [],\r\n      def: [],\r\n      pen: [],\r\n    },\r\n    rating: 0,\r\n    matchesPlayed: 0,\r\n    matchHistory: {\r\n      qualifiers: [],\r\n      group: [],\r\n      bracket: [],\r\n    },\r\n    reportCard: {\r\n      grade: null,\r\n      gradeStyle: null,\r\n      gradeSummary: null,\r\n      tournamentFinish: null,\r\n    },\r\n    ranking: 0,\r\n    attRanking: 0,\r\n    midRanking: 0,\r\n    defRanking: 0,\r\n    homeTeam: true,\r\n    canSoloHost32: true,\r\n    cohosts32: ['United States'],\r\n    cohosts48: [],\r\n    canSoloHost48: false,\r\n    triHosts48: ['Mexico', 'United States'],\r\n    quadHosts48: [],\r\n  },\r\n]"
                }
            ],
            "src/app/simulation/group-draw.utils.ts": [
                {
                    "name": "backupDraw",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/simulation/group-draw.utils.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(pts: GroupTeam[][], nbrOfGroups: number, availableRegions: Region[]) => {\r\n  const regionValues = availableRegions.map(r => r.value);\r\n  const allTeams: GroupTeam[] = pts.flatMap((p, i) => {\r\n    const team = p.map(x => ({ ...x, pot: i + 1 }));\r\n    if (availableRegions.length > 1) {\r\n      team.sort(({ region: a }, { region: b }) => compare(a, b, true));\r\n    }\r\n    return team;\r\n  });\r\n  const groups: GroupTeam[][] = Array.from({ length: nbrOfGroups }, _ => []);\r\n  for (let i = 0; i < allTeams.length; i++) {\r\n    // for each team in the draw\r\n    const team = allTeams[i];\r\n    // console.log('TEAM', team.region, team.pot);\r\n    const candidateGroups = groups.filter(\r\n      // return each group that returns true to ...\r\n      group => {\r\n        if ((availableRegions.length > 4 && !regionValues.includes(RegionName.ofc)) || availableRegions.length > 5) {\r\n          // check the group has less teams than is needed in each group\r\n          return (\r\n            group.length < allTeams.length / nbrOfGroups &&\r\n            group.every(member => {\r\n              // console.log('MEMBER', member.region, member.pot);\r\n              return (\r\n                member.pot !== team.pot &&\r\n                (team.region !== RegionName.uefa\r\n                  ? group.every(m => m.region !== team.region) // checking that every member of this group does not match region\r\n                  : group.filter(m => m.region === RegionName.uefa).length < 2)\r\n              );\r\n            })\r\n          ); // if team is uefa, the group can have a uefa team\r\n        }\r\n        return group.length < allTeams.length / nbrOfGroups && group.every(member => member.pot !== team.pot);\r\n      }\r\n    );\r\n    candidateGroups[Math.floor(Math.random() * candidateGroups.length)].push(team);\r\n  }\r\n  console.log(\r\n    'groups',\r\n    groups.map(g => g.map(t => `${t.name} ${t.region}`))\r\n  );\r\n  return groups;\r\n}"
                },
                {
                    "name": "compareFn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/simulation/group-draw.utils.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(first: string[], a: string, b: string) => {\r\n  let returnValue;\r\n  if (first.includes(a)) {\r\n    returnValue = -1;\r\n  } else if (first.includes(b)) {\r\n    returnValue = 1;\r\n  } else if (a < b) {\r\n    returnValue = -1;\r\n  } else if (b < a) {\r\n    returnValue = 1;\r\n  } else {\r\n    returnValue = 0;\r\n  }\r\n  return returnValue;\r\n}"
                },
                {
                    "name": "draw",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/simulation/group-draw.utils.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(\r\n  pts: GroupTeam[][],\r\n  nbrOfGroups: number,\r\n  availableRegions: Region[],\r\n  startTime: number,\r\n  failed = false\r\n): GroupTeam[][] => {\r\n  const regionValues = availableRegions.map(r => r.value);\r\n  const allTeams: GroupTeam[] = pts.flatMap((p, i) => {\r\n    const team = p.map(x => ({ ...x, pot: i + 1 }));\r\n    if (availableRegions.length > 1) {\r\n      team.sort(({ region: a }, { region: b }) => compare(a, b, true));\r\n    }\r\n    return team;\r\n  });\r\n  let test = false;\r\n  // console.log(allTeams.map(a => a.name));\r\n  const groups: GroupTeam[][] = Array.from({ length: nbrOfGroups }, _ => []);\r\n  for (let i = 0; i < allTeams.length; i++) {\r\n    // for each team in the draw\r\n    const team = allTeams[i];\r\n    // console.log('TEAM', team.region, team.pot);\r\n    const candidateGroups = groups.filter(\r\n      // return each group that returns true to ...\r\n      group => {\r\n        if (failed) {\r\n          return group.length < allTeams.length / nbrOfGroups && group.every(member => member.pot !== team.pot);\r\n        }\r\n        if ((availableRegions.length > 4 && !regionValues.includes(RegionName.ofc)) || availableRegions.length > 5) {\r\n          // check the group has less teams than is needed in each group\r\n          return (\r\n            group.length < allTeams.length / nbrOfGroups &&\r\n            group.every(member => {\r\n              // console.log('MEMBER', member.region, member.pot);\r\n              return (\r\n                member.pot !== team.pot &&\r\n                (team.region !== RegionName.uefa\r\n                  ? group.every(m => m.region !== team.region) // checking that every member of this group does not match region\r\n                  : group.filter(m => m.region === RegionName.uefa).length < 2)\r\n              );\r\n            })\r\n          ); // if team is uefa, the group can have a uefa team\r\n        }\r\n\r\n        const regions2 = availableRegions\r\n          .filter(r => r.qualifiers.auto + r.qualifiers.extra > 7 && r.qualifiers.auto + r.qualifiers.extra < 9)\r\n          .map(r => r.value);\r\n        const regions3 = availableRegions\r\n          .filter(r => r.qualifiers.auto + r.qualifiers.extra > 8 && r.qualifiers.auto + r.qualifiers.extra < 12)\r\n          .map(r => r.value);\r\n        const regions4 = availableRegions.filter(r => r.qualifiers.auto + r.qualifiers.extra > 11).map(r => r.value);\r\n        if (!test) {\r\n          // console.log(availableRegions, regions2, regions3, regions4);\r\n          test = false;\r\n        }\r\n        return (\r\n          group.length < allTeams.length / nbrOfGroups &&\r\n          group.every(member => {\r\n            if (availableRegions.length < 4) {\r\n              return member.pot !== team.pot;\r\n            }\r\n            if (regions4.includes(team.region)) {\r\n              return member;\r\n            }\r\n            if (regions3.includes(team.region)) {\r\n              return group.filter(m => regions3.includes(m.region)).length < 3;\r\n            }\r\n            // console.log(member.pot, team.pot);\r\n            return regions2.includes(team.region)\r\n              ? group.filter(m => regions2.includes(m.region)).length < 2\r\n              : group.every(m => m.region !== team.region);\r\n          })\r\n        );\r\n      }\r\n    );\r\n    if (candidateGroups.length < 1) {\r\n      if (Date.now() > startTime + 4000) {\r\n        // console.log(\r\n        //   'ERROR WITH POT DRAW initiate failsafe',\r\n        //   allTeams.map(t => `${t.name} ${t.pot} ${t.region}`)\r\n        // );\r\n        return draw(pts, nbrOfGroups, availableRegions, startTime, true);\r\n      }\r\n      return draw(pts, nbrOfGroups, availableRegions, startTime);\r\n    }\r\n    candidateGroups[Math.floor(Math.random() * candidateGroups.length)].push(team);\r\n  }\r\n\r\n  console.log(\r\n    'groups',\r\n    groups.map(g => g.map(t => `${t.name} ${t.region}`))\r\n  );\r\n  return groups;\r\n}"
                },
                {
                    "name": "drawAndSort",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/simulation/group-draw.utils.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(t: GroupTeam[][], h: string[], nbrOfGroups: number, availableRegions: Region[], startTime?: number) => {\r\n  if (startTime) {\r\n    return sortGroups(h)(draw(t, nbrOfGroups, availableRegions, startTime));\r\n  } else {\r\n    return sortGroups(h)(backupDraw(t, nbrOfGroups, availableRegions));\r\n  }\r\n}"
                },
                {
                    "name": "sortGroups",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/simulation/group-draw.utils.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(h: string[]) => (t: GroupTeam[][]) =>\r\n  t\r\n    .map(team => team.sort(({ name: a }: { name: string }, { name: b }: { name: string }) => compareFn(h, a, b)))\r\n    .sort(([{ name: a }], [{ name: b }]) => compareFn(h, a, b))"
                }
            ],
            "src/app/moba/draft/draft.model.ts": [
                {
                    "name": "blueSideBanRounds",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/moba/draft/draft.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[1, 3, 5, 14, 16]"
                },
                {
                    "name": "blueSidePickRounds",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/moba/draft/draft.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[7, 10, 11, 18, 19]"
                },
                {
                    "name": "compStyleReqs",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/moba/draft/draft.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CompStyleData[]",
                    "defaultValue": "[\n  {\n    name: 'engage',\n    primary: ['mobility.engage', 'dmg.aoe', 'crowdControl.impact', 'crowdControl.aoe'],\n    secondary: ['dmg.burst', 'crowdControl.singleTarget', 'defense.mitigation', 'defense.sustain'],\n  },\n  {\n    name: 'pick',\n    primary: ['dmg.burst', 'dmg.singleTarget', 'crowdControl.singleTarget', 'dmg.skirmish'],\n    secondary: ['crowdControl.range', 'mobility.engage', 'mobility.reposition', 'crowdControl.impact'],\n  },\n  {\n    name: 'protect',\n    primary: ['dmg.dps', 'support.peel', 'support.utility', 'support.zoneControl'],\n    secondary: ['dmg.singleTarget', 'dmg.aoe', 'defense.sustain', 'defense.mitigation'],\n  },\n  {\n    name: 'siege',\n    primary: ['dmg.poke', 'dmg.siege', 'support.zoneControl', 'support.peel'],\n    secondary: ['dmg.waveClear', 'support.utility', 'dmg.dps', 'dmg.aoe'],\n  },\n  {\n    name: 'split',\n    primary: ['dmg.splitPush', 'dmg.skirmish', 'dmg.waveClear', 'support.peel'],\n    secondary: ['support.zoneControl', 'mobility.reposition', 'dmg.siege', 'dmg.singleTarget'],\n  },\n]"
                },
                {
                    "name": "defaultOpponentMasteries",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/moba/draft/draft.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DraftPlayer[]",
                    "defaultValue": "[\n  {\n    mainRole: 'top',\n    championMastery: {\n      s: [1, 2],\n      a: [45, 46, 0],\n      b: [47, 44],\n      c: [],\n      d: [],\n    },\n  },\n  {\n    mainRole: 'jungle',\n    championMastery: {\n      s: [9, 10],\n      a: [11],\n      b: [12],\n      c: [13, 2, 8],\n      d: [],\n    },\n  },\n  {\n    mainRole: 'mid',\n    championMastery: {\n      s: [21, 22],\n      a: [20, 19],\n      b: [18, 17],\n      c: [],\n      d: [],\n    },\n  },\n  {\n    mainRole: 'adc',\n    championMastery: {\n      s: [33, 34, 35],\n      a: [32],\n      b: [29, 30, 31],\n      c: [],\n      d: [],\n    },\n  },\n  {\n    mainRole: 'support',\n    championMastery: {\n      s: [53],\n      a: [39, 40],\n      b: [40, 38],\n      c: [36, 37],\n      d: [],\n    },\n  },\n]"
                },
                {
                    "name": "defaultPlayerMasteries",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/moba/draft/draft.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DraftPlayer[]",
                    "defaultValue": "[\n  {\n    mainRole: 'top',\n    championMastery: {\n      s: [47, 44],\n      a: [45, 46, 0],\n      b: [1, 2],\n      c: [],\n      d: [],\n    },\n  },\n  {\n    mainRole: 'jungle',\n    championMastery: {\n      s: [2, 8],\n      a: [9, 10],\n      b: [11, 12],\n      c: [13],\n      d: [],\n    },\n  },\n  {\n    mainRole: 'mid',\n    championMastery: {\n      s: [18, 17],\n      a: [20, 19],\n      b: [21, 22],\n      c: [28],\n      d: [],\n    },\n  },\n  {\n    mainRole: 'adc',\n    championMastery: {\n      s: [29, 30, 31],\n      a: [32],\n      b: [33, 34],\n      c: [],\n      d: [],\n    },\n  },\n  {\n    mainRole: 'support',\n    championMastery: {\n      s: [36, 37],\n      a: [38, 39],\n      b: [40, 41],\n      c: [53],\n      d: [],\n    },\n  },\n]"
                },
                {
                    "name": "emptyDraftBans",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/moba/draft/draft.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Partial[]",
                    "defaultValue": "[\n  {\n    isPlaceholder: true,\n    name: '1',\n  },\n  {\n    isPlaceholder: true,\n    name: '2',\n  },\n  {\n    isPlaceholder: true,\n    name: '3',\n  },\n  {\n    isPlaceholder: true,\n    name: '4',\n  },\n  {\n    isPlaceholder: true,\n    name: '5',\n  },\n]"
                },
                {
                    "name": "emptyDraftPicks",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/moba/draft/draft.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Partial[]",
                    "defaultValue": "[\n  {\n    isPlaceholder: true,\n    name: 'Top',\n  },\n  {\n    isPlaceholder: true,\n    name: 'Jungle',\n  },\n  {\n    isPlaceholder: true,\n    name: 'Mid',\n  },\n  {\n    isPlaceholder: true,\n    name: 'ADC',\n  },\n  {\n    isPlaceholder: true,\n    name: 'Support',\n  },\n]"
                },
                {
                    "name": "redSideBanRounds",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/moba/draft/draft.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[2, 4, 6, 13, 15]"
                },
                {
                    "name": "redSidePickRounds",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/moba/draft/draft.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[8, 9, 12, 17, 20]"
                },
                {
                    "name": "tierValues",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/moba/draft/draft.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "defaultValue": "{\n  s: TierValue.S,\n  a: TierValue.A,\n  b: TierValue.B,\n  c: TierValue.C,\n  d: TierValue.D,\n  f: TierValue.F,\n}"
                }
            ],
            "src/app/career/player/player.utils.ts": [
                {
                    "name": "challengeFactor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/career/player/player.utils.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(leagueDifficulty: LeagueDifficulty): number => {\r\n  switch (leagueDifficulty) {\r\n    case 'hard':\r\n      return 2;\r\n    case 'mediumHard':\r\n      return 1;\r\n    case 'medium':\r\n      return -1;\r\n    case 'mediumEasy':\r\n      return -3;\r\n    case 'easy':\r\n      return -5;\r\n    default:\r\n      return 0;\r\n  }\r\n}"
                },
                {
                    "name": "checkCurrentAbility",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/career/player/player.utils.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(ability: number) => {\r\n  if (ability < 10) {\r\n    return 10;\r\n  } else if (ability > 200) {\r\n    return 200;\r\n  } else {\r\n    return ability;\r\n  }\r\n}"
                },
                {
                    "name": "consistencyFactor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/career/player/player.utils.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(ca: CareerOverview, transfer: TransferOption) => {\r\n  const currentClubApps = ca.clubStats.find(c => c.id === transfer.club.id)?.currentClubStreak || 0;\r\n\r\n  if (currentClubApps > 4) {\r\n    return 3;\r\n  } else if (currentClubApps > 2.25) {\r\n    return 2;\r\n  } else if (currentClubApps > 1.5) {\r\n    return 1;\r\n  } else if (currentClubApps > 0.4) {\r\n    return 0;\r\n  } else {\r\n    return -1;\r\n  }\r\n}"
                },
                {
                    "name": "performanceFactor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/career/player/player.utils.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(app: number, gamesInSeason: number, avgRating: number): number => {\r\n  // more games in a season provides a high floor to the ability gain while\r\n  // higher rating provides a higher ceiling of ability gain\r\n  if (app / gamesInSeason > 0.8) {\r\n    if (avgRating > 7.5) {\r\n      return getRandomInt(6, 10);\r\n    } else if (avgRating > 7.0) {\r\n      return getRandomInt(6, 8);\r\n    } else if (avgRating > 6.5) {\r\n      return getRandomInt(5, 6);\r\n    } else {\r\n      return getRandomInt(4, 5);\r\n    }\r\n  } else if (app / gamesInSeason > 0.4) {\r\n    if (avgRating > 7.5) {\r\n      return getRandomInt(3, 9);\r\n    } else if (avgRating > 7.0) {\r\n      return getRandomInt(3, 7);\r\n    } else if (avgRating > 6.5) {\r\n      return getRandomInt(3, 5);\r\n    } else {\r\n      return getRandomInt(2, 4);\r\n    }\r\n  } else if (app / gamesInSeason > 0.2) {\r\n    if (avgRating > 7.5) {\r\n      return getRandomInt(1, 6);\r\n    } else if (avgRating > 7.0) {\r\n      return getRandomInt(1, 5);\r\n    } else if (avgRating > 6.5) {\r\n      return getRandomInt(0, 4);\r\n    } else {\r\n      return getRandomInt(0, 3);\r\n    }\r\n  } else {\r\n    return getRandomInt(-8, 0);\r\n  }\r\n}"
                },
                {
                    "name": "youthFactor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/career/player/player.utils.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "({ age, potentialAbility, currentAbility }: Season): number => {\r\n  const potDiff = potentialAbility - currentAbility;\r\n  if (age < 18) {\r\n    return potDiff / 10 - 4;\r\n  } else if (age < 24) {\r\n    return potDiff / 20;\r\n  } else if (age < 32) {\r\n    return potDiff / 30;\r\n  } else {\r\n    return -potDiff / 10;\r\n  }\r\n}"
                }
            ],
            "src/app/shared/components/index.ts": [
                {
                    "name": "components",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/index.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  LineupAccordionComponent,\r\n  NavBarComponent,\r\n  PitchViewComponent,\r\n  PositionBreakdownComponent,\r\n  SquadRulesComponent,\r\n  PlayerCardComponent,\r\n  NationDialogComponent,\r\n  TournamentFormComponent,\r\n  DashboardComponent,\r\n  StarRatingComponent,\r\n]"
                }
            ],
            "src/app/models/default-coaches.model.ts": [
                {
                    "name": "defaultCoaches",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/models/default-coaches.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Person[]",
                    "defaultValue": "[\r\n  {\r\n    firstNames: ['Jesús', 'Luis'],\r\n    lastNames: ['Álvarez', 'de', 'Eulate', 'Güergue'],\r\n    firstInitial: 'J',\r\n    singleLastName: 'Álvarez',\r\n    firstNameUsage: 'Spanish',\r\n    lastNameUsage: 'Spanish',\r\n    nationality: 'Andorra',\r\n    age: 52,\r\n    nickname: 'Koldo Álvarez',\r\n    origin: 'Spain',\r\n  },\r\n  {\r\n    firstNames: ['Luc'],\r\n    lastNames: ['Holtz'],\r\n    firstInitial: 'L',\r\n    singleLastName: 'Holtz',\r\n    firstNameUsage: 'French',\r\n    lastNameUsage: 'German',\r\n    nationality: 'Luxembourg',\r\n    age: 53,\r\n    origin: 'Luxembourg',\r\n  },\r\n  {\r\n    firstNames: ['Didier', 'Claude'],\r\n    lastNames: ['Deschamps'],\r\n    firstInitial: 'D',\r\n    singleLastName: 'Deschamps',\r\n    firstNameUsage: 'French',\r\n    lastNameUsage: 'French',\r\n    nationality: 'France',\r\n    age: 54,\r\n    origin: 'France',\r\n  },\r\n  {\r\n    firstNames: ['Jan', 'Olof'],\r\n    lastNames: ['Andersson'],\r\n    firstInitial: 'J',\r\n    singleLastName: 'Andersson',\r\n    firstNameUsage: 'Swedish',\r\n    lastNameUsage: 'Swedish',\r\n    nationality: 'Sweden',\r\n    age: 60,\r\n    origin: 'Sweden',\r\n    nickname: 'Janne Andersson',\r\n  },\r\n  {\r\n    firstNames: ['Gareth'],\r\n    lastNames: ['Southgate'],\r\n    firstInitial: 'G',\r\n    singleLastName: 'Southgate',\r\n    firstNameUsage: 'English (British)',\r\n    lastNameUsage: 'English',\r\n    nationality: 'England',\r\n    age: 52,\r\n    origin: 'England',\r\n  },\r\n  {\r\n    firstNames: ['Markku', 'Tapio'],\r\n    lastNames: ['Kanerva'],\r\n    firstInitial: 'M',\r\n    singleLastName: 'Kanerva',\r\n    firstNameUsage: 'Finnish',\r\n    lastNameUsage: 'Finnish',\r\n    nationality: 'Finland',\r\n    age: 58,\r\n    origin: 'Finland',\r\n  },\r\n  {\r\n    firstNames: ['Zlatko'],\r\n    lastNames: ['Dalić'],\r\n    firstInitial: 'Z',\r\n    singleLastName: 'Dalić',\r\n    firstNameUsage: 'Croatian',\r\n    lastNameUsage: 'Croatian',\r\n    nationality: 'Croatia',\r\n    age: 56,\r\n    origin: 'Croatia',\r\n  },\r\n  {\r\n    firstNames: ['Roberto'],\r\n    lastNames: ['Mancini'],\r\n    firstInitial: 'R',\r\n    singleLastName: 'Mancini',\r\n    firstNameUsage: 'Italian',\r\n    lastNameUsage: 'Italian',\r\n    nationality: 'Italy',\r\n    age: 58,\r\n    origin: 'Italy',\r\n  },\r\n  {\r\n    firstNames: ['Marco'],\r\n    lastNames: ['Rossi'],\r\n    firstInitial: 'M',\r\n    singleLastName: 'Rossi',\r\n    firstNameUsage: 'Italian',\r\n    lastNameUsage: 'Italian',\r\n    nationality: 'Hungary',\r\n    age: 58,\r\n    origin: 'Italy',\r\n  },\r\n  {\r\n    firstNames: ['Julio', 'César'],\r\n    lastNames: ['Ribas', 'Vlacovich'],\r\n    firstInitial: 'J',\r\n    singleLastName: 'Ribas',\r\n    firstNameUsage: 'Spanish',\r\n    lastNameUsage: 'Spanish',\r\n    nationality: 'Gibraltar',\r\n    age: 66,\r\n    origin: 'Uruguay',\r\n    nickname: 'Julio César Ribas',\r\n  },\r\n  {\r\n    firstNames: ['Jaroslav'],\r\n    lastNames: ['Šilhavy'],\r\n    firstInitial: 'J',\r\n    singleLastName: 'Šilhavy',\r\n    firstNameUsage: 'Czech',\r\n    lastNameUsage: 'Czech',\r\n    nationality: 'Czech Republic',\r\n    age: 61,\r\n    origin: 'Czech Republic',\r\n  },\r\n  {\r\n    firstNames: ['Stephen'],\r\n    lastNames: ['Clarke'],\r\n    firstInitial: 'S',\r\n    singleLastName: 'Clarke',\r\n    firstNameUsage: 'English',\r\n    lastNameUsage: 'English',\r\n    nationality: 'Scotland',\r\n    age: 59,\r\n    origin: 'Scotland',\r\n    nickname: 'Steve Clarke',\r\n  },\r\n  {\r\n    firstNames: ['Håkan', 'Georg'],\r\n    lastNames: ['Ericson'],\r\n    firstInitial: 'H',\r\n    singleLastName: 'Ericson',\r\n    firstNameUsage: 'Swedish',\r\n    lastNameUsage: 'Swedish',\r\n    nationality: 'Faroe Islands',\r\n    age: 62,\r\n    origin: 'Sweden',\r\n  },\r\n  {\r\n    firstNames: ['Dainis'],\r\n    lastNames: ['Kazakevičs'],\r\n    firstInitial: 'D',\r\n    singleLastName: 'Kazakevičs',\r\n    firstNameUsage: 'Latvian',\r\n    lastNameUsage: 'Latvian',\r\n    nationality: 'Latvia',\r\n    age: 41,\r\n    origin: 'Latvia',\r\n  },\r\n  {\r\n    firstNames: ['Stephen'],\r\n    lastNames: ['Kenny'],\r\n    firstInitial: 'S',\r\n    singleLastName: 'Kenny',\r\n    firstNameUsage: 'English',\r\n    lastNameUsage: 'Irish',\r\n    nationality: 'Ireland',\r\n    age: 51,\r\n    origin: 'Ireland',\r\n  },\r\n  {\r\n    firstNames: ['Kasper'],\r\n    lastNames: ['Hjulmand'],\r\n    firstInitial: 'K',\r\n    singleLastName: 'Hjulmand',\r\n    firstNameUsage: 'Danish',\r\n    lastNameUsage: 'Danish',\r\n    nationality: 'Denmark',\r\n    age: 50,\r\n    origin: 'Denmark',\r\n  },\r\n  {\r\n    firstNames: ['Giovanni'],\r\n    lastNames: ['De Biasi'],\r\n    firstInitial: 'G',\r\n    singleLastName: 'De Biasi',\r\n    firstNameUsage: 'Italian',\r\n    lastNameUsage: 'Italian',\r\n    nationality: 'Azerbaijan',\r\n    age: 66,\r\n    origin: 'Italy',\r\n    nickname: 'Gianni De Biasi',\r\n  },\r\n  {\r\n    firstNames: ['Martin'],\r\n    lastNames: ['Stocklasa'],\r\n    firstInitial: 'M',\r\n    singleLastName: 'Stocklasa',\r\n    firstNameUsage: 'Liechtenstein',\r\n    lastNameUsage: 'Liechtenstein',\r\n    nationality: 'Liechtenstein',\r\n    age: 43,\r\n    origin: 'Liechtenstein',\r\n  },\r\n  {\r\n    firstNames: ['Ståle'],\r\n    lastNames: ['Solbakken'],\r\n    firstInitial: 'S',\r\n    singleLastName: 'Solbakken',\r\n    firstNameUsage: 'Norwegian',\r\n    lastNameUsage: 'Norwegian',\r\n    nationality: 'Norway',\r\n    age: 54,\r\n    origin: 'Norway',\r\n  },\r\n  {\r\n    firstNames: ['Arnar', 'Þór'],\r\n    lastNames: ['Viðarsson'],\r\n    firstInitial: 'A',\r\n    singleLastName: 'Viðarsson',\r\n    firstNameUsage: 'Icelandic',\r\n    lastNameUsage: 'Icelandic',\r\n    nationality: 'Iceland',\r\n    age: 44,\r\n    origin: 'Iceland',\r\n  },\r\n  {\r\n    firstNames: ['Miodrag'],\r\n    lastNames: ['Radulović'],\r\n    firstInitial: 'M',\r\n    singleLastName: 'Radulović',\r\n    firstNameUsage: 'Serbian',\r\n    lastNameUsage: 'Serbian',\r\n    nationality: 'Montenegro',\r\n    age: 55,\r\n    origin: 'Montenegro',\r\n  },\r\n  {\r\n    firstNames: ['Thomas'],\r\n    lastNames: ['Häberli'],\r\n    firstInitial: 'T',\r\n    singleLastName: 'Häberli',\r\n    firstNameUsage: 'English',\r\n    lastNameUsage: 'Swiss',\r\n    nationality: 'Estonia',\r\n    age: 48,\r\n    origin: 'Switzerland',\r\n  },\r\n  {\r\n    firstNames: ['Willy', 'David', 'Frédéric'],\r\n    lastNames: ['Sagnol'],\r\n    firstInitial: 'W',\r\n    singleLastName: 'Sagnol',\r\n    firstNameUsage: 'French',\r\n    lastNameUsage: 'French',\r\n    nationality: 'Estonia',\r\n    age: 45,\r\n    origin: 'Georgia',\r\n  },\r\n  {\r\n    firstNames: ['Dragan'],\r\n    lastNames: ['Stojković'],\r\n    firstInitial: 'D',\r\n    singleLastName: 'Stojković',\r\n    firstNameUsage: 'Serbian',\r\n    lastNameUsage: 'Serb',\r\n    nationality: 'Serbia',\r\n    age: 48,\r\n    origin: 'Serbia',\r\n  },\r\n]"
                }
            ],
            "src/app/career/player/player.model.ts": [
                {
                    "name": "defaultCompStats",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/career/player/player.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CompetitionStats",
                    "defaultValue": "{\r\n  appearances: {\r\n    starts: 0,\r\n    sub: 0,\r\n    total: 0,\r\n  },\r\n  goals: 0,\r\n  assists: 0,\r\n  avgRating: 6.0,\r\n  aggRating: 0,\r\n}"
                },
                {
                    "name": "defaultSeasonStats",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/career/player/player.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SeasonStats",
                    "defaultValue": "{\r\n  allComps: { ...defaultCompStats },\r\n  league: { ...defaultCompStats },\r\n  cup: { ...defaultCompStats },\r\n  continental: { ...defaultCompStats },\r\n}"
                }
            ],
            "src/app/shared/constants/position-boxes.ts": [
                {
                    "name": "defaultPosBox",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/constants/position-boxes.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  playerClass: 'inactive player-box',\r\n  posBoxClass: 'active pos-box',\r\n  html: '',\r\n}"
                },
                {
                    "name": "POSITION_BOXES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/constants/position-boxes.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PositionBox[]",
                    "defaultValue": "[\r\n  {\r\n    class: 'pos-box empty',\r\n    ...defaultPosBox,\r\n  },\r\n  {\r\n    class: 'pos-box empty',\r\n    ...defaultPosBox,\r\n  },\r\n  {\r\n    class: 'pos-box 23',\r\n    ...defaultPosBox,\r\n  },\r\n  {\r\n    class: 'pos-box 22',\r\n    ...defaultPosBox,\r\n  },\r\n  {\r\n    class: 'pos-box 21',\r\n    ...defaultPosBox,\r\n  },\r\n  {\r\n    class: 'pos-box empty',\r\n    ...defaultPosBox,\r\n  },\r\n  {\r\n    class: 'pos-box empty',\r\n    ...defaultPosBox,\r\n  },\r\n  {\r\n    class: 'pos-box 20',\r\n    ...defaultPosBox,\r\n  },\r\n  {\r\n    class: 'pos-box empty',\r\n    ...defaultPosBox,\r\n  },\r\n  {\r\n    class: 'pos-box 19',\r\n    ...defaultPosBox,\r\n  },\r\n  {\r\n    class: 'pos-box 18',\r\n    ...defaultPosBox,\r\n  },\r\n  {\r\n    class: 'pos-box 17',\r\n    ...defaultPosBox,\r\n  },\r\n  {\r\n    class: 'pos-box empty',\r\n    ...defaultPosBox,\r\n  },\r\n  {\r\n    class: 'pos-box 16',\r\n    ...defaultPosBox,\r\n  },\r\n  {\r\n    class: 'pos-box 15',\r\n    ...defaultPosBox,\r\n  },\r\n  {\r\n    class: 'pos-box empty',\r\n    ...defaultPosBox,\r\n  },\r\n  {\r\n    class: 'pos-box 14',\r\n    ...defaultPosBox,\r\n  },\r\n  {\r\n    class: 'pos-box 13',\r\n    ...defaultPosBox,\r\n  },\r\n  {\r\n    class: 'pos-box 12',\r\n    ...defaultPosBox,\r\n  },\r\n  {\r\n    class: 'pos-box empty',\r\n    ...defaultPosBox,\r\n  },\r\n  {\r\n    class: 'pos-box 11',\r\n    ...defaultPosBox,\r\n  },\r\n  {\r\n    class: 'pos-box 10',\r\n    ...defaultPosBox,\r\n  },\r\n  {\r\n    class: 'pos-box empty',\r\n    ...defaultPosBox,\r\n  },\r\n  {\r\n    class: 'pos-box 9',\r\n    ...defaultPosBox,\r\n  },\r\n  {\r\n    class: 'pos-box 8',\r\n    ...defaultPosBox,\r\n  },\r\n  {\r\n    class: 'pos-box 7',\r\n    ...defaultPosBox,\r\n  },\r\n  {\r\n    class: 'pos-box empty',\r\n    ...defaultPosBox,\r\n  },\r\n  {\r\n    class: 'pos-box 6',\r\n    ...defaultPosBox,\r\n  },\r\n  {\r\n    class: 'pos-box 5',\r\n    ...defaultPosBox,\r\n  },\r\n  {\r\n    class: 'pos-box empty',\r\n    ...defaultPosBox,\r\n  },\r\n  {\r\n    class: 'pos-box 4',\r\n    ...defaultPosBox,\r\n  },\r\n  {\r\n    class: 'pos-box 3',\r\n    ...defaultPosBox,\r\n  },\r\n  {\r\n    class: 'pos-box 2',\r\n    ...defaultPosBox,\r\n  },\r\n  {\r\n    class: 'pos-box empty',\r\n    ...defaultPosBox,\r\n  },\r\n  {\r\n    class: 'pos-box 1',\r\n    ...defaultPosBox,\r\n  },\r\n  {\r\n    class: 'pos-box empty',\r\n    ...defaultPosBox,\r\n  },\r\n  {\r\n    class: 'pos-box empty',\r\n    ...defaultPosBox,\r\n  },\r\n  {\r\n    class: 'pos-box empty',\r\n    ...defaultPosBox,\r\n  },\r\n  {\r\n    class: 'pos-box 0',\r\n    ...defaultPosBox,\r\n  },\r\n  {\r\n    class: 'pos-box empty',\r\n    ...defaultPosBox,\r\n  },\r\n  {\r\n    class: 'pos-box empty',\r\n    ...defaultPosBox,\r\n  },\r\n  {\r\n    class: 'pos-box empty',\r\n    ...defaultPosBox,\r\n  },\r\n]"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  production: true,\r\n  firebase: {\r\n    apiKey: \"AIzaSyC7Cxl8eSGaYlQUwXOGfOUiKsoeUXJnX2g\",\r\n    authDomain: \"national-team-generator.firebaseapp.com\",\r\n    projectId: \"national-team-generator\",\r\n    storageBucket: \"national-team-generator.appspot.com\",\r\n    messagingSenderId: \"30261669176\",\r\n    appId: \"1:30261669176:web:eca1c9103db91bab6265cd\",\r\n    measurementId: \"G-QV0DJSQSL2\"\r\n  }\r\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  production: false,\r\n  firebase: {\r\n    apiKey: \"AIzaSyC7Cxl8eSGaYlQUwXOGfOUiKsoeUXJnX2g\",\r\n    authDomain: \"national-team-generator.firebaseapp.com\",\r\n    projectId: \"national-team-generator\",\r\n    storageBucket: \"national-team-generator.appspot.com\",\r\n    messagingSenderId: \"30261669176\",\r\n    appId: \"1:30261669176:web:eca1c9103db91bab6265cd\",\r\n    measurementId: \"G-QV0DJSQSL2\"\r\n  }\r\n}"
                }
            ],
            "src/app/simulation/simulation.utils.ts": [
                {
                    "name": "getAdjustedTime",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/simulation/simulation.utils.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(time: number) => {\r\n  if (time > 120) {\r\n    return (time += 20);\r\n  }\r\n  if (time > 105) {\r\n    return (time += 15);\r\n  }\r\n  if (time > 90) {\r\n    return (time += 10);\r\n  }\r\n  if (time > 45) {\r\n    return (time += 5);\r\n  }\r\n  return time;\r\n}"
                },
                {
                    "name": "regions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/simulation/simulation.utils.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Region[]",
                    "defaultValue": "[\r\n  {\r\n    label: 'UEFA',\r\n    value: RegionName.uefa,\r\n    numOfTeams: 49,\r\n    qualifiers: {\r\n      auto: 0,\r\n      extra: 0,\r\n    },\r\n  },\r\n  {\r\n    label: 'CAF',\r\n    value: RegionName.caf,\r\n    numOfTeams: 39,\r\n    qualifiers: {\r\n      auto: 0,\r\n      extra: 0,\r\n    },\r\n  },\r\n  {\r\n    label: 'AFC',\r\n    value: RegionName.afc,\r\n    numOfTeams: 30,\r\n    qualifiers: {\r\n      auto: 0,\r\n      extra: 0,\r\n    },\r\n  },\r\n  {\r\n    label: 'CONCACAF',\r\n    value: RegionName.concacaf,\r\n    numOfTeams: 22,\r\n    qualifiers: {\r\n      auto: 0,\r\n      extra: 0,\r\n    },\r\n  },\r\n  {\r\n    label: 'CONMEBOL',\r\n    value: RegionName.conmebol,\r\n    numOfTeams: 10,\r\n    qualifiers: {\r\n      auto: 0,\r\n      extra: 0,\r\n    },\r\n  },\r\n  {\r\n    label: 'OFC',\r\n    value: RegionName.ofc,\r\n    numOfTeams: 6,\r\n    qualifiers: {\r\n      auto: 0,\r\n      extra: 0,\r\n    },\r\n  },\r\n]"
                }
            ],
            "src/app/shared/utils.ts": [
                {
                    "name": "originalOrder",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/utils.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(): number => 0"
                },
                {
                    "name": "pickSingleLastName",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/utils.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(names: string[]) => {\r\n  if (names.length > 0) {\r\n    const char = names[0].charAt(0);\r\n    const isLowerCase = char === char.toLowerCase() && char !== char.toUpperCase();\r\n    return isLowerCase ? names[1] : names[0];\r\n  }\r\n  return '';\r\n}"
                },
                {
                    "name": "probability",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/utils.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(n: number) => {\r\n  return !!n && Math.random() <= n;\r\n}"
                }
            ],
            "src/app/moba/patch-lists/msi-24.ts": [
                {
                    "name": "patchMSI24",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/moba/patch-lists/msi-24.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AllRolesTierList",
                    "defaultValue": "{\r\n  // top: [3, 5, 16, 14, 5] | sumTotal: 43\r\n  top: {\r\n    s: [1, 133, 5], // 3\r\n    a: [2, 4, 44, 45, 8], // 5\r\n    b: [3, 122, 79, 80, 76, 127, 129, 46, 0, 7, 70, 6, 47, 54, 56, 62], // 16\r\n    c: [22, 74, 124, 89, 17, 126, 128, 58, 132, 81, 43, 28, 136, 60], // 14\r\n    d: [120, 123, 114, 115, 23], // 5\r\n  },\r\n  // jungle: [2, 4, 15, 13, 1] | sumTotal: 35\r\n  jungle: {\r\n    s: [9, 133], // 2\r\n    a: [10, 8, 11, 43], // 4\r\n    b: [48, 42, 14, 0, 55, 64, 56, 68, 4, 49, 61, 72, 83, 67, 13], // 15\r\n    c: [82, 73, 75, 18, 6, 131, 74, 2, 130, 44, 84, 85, 58], // 13\r\n    d: [12], // 1\r\n  },\r\n  // mid: [2, 6, 9, 23, 2] | sumTotal: 42\r\n  mid: {\r\n    s: [16, 18],\r\n    a: [15, 19, 21, 50, 51, 52],\r\n    b: [20, 22, 86, 60, 77, 76, 17, 5, 90],\r\n    c: [87, 88, 71, 59, 93, 118, 73, 78, 74, 66, 119, 125, 121, 135, 92, 91, 137, 89, 70, 81, 27, 28, 34],\r\n    d: [134, 44],\r\n  },\r\n  // adc: [3, 1, 9, 15, 0] | sumTotal: 28\r\n  adc: {\r\n    s: [24, 26, 23],\r\n    a: [27, 32],\r\n    b: [31, 33, 94, 35, 34, 28, 30, 29],\r\n    c: [25, 96, 19, 69, 111, 97, 95, 98, 99, 21, 5, 100, 54, 62, 59],\r\n    d: [],\r\n  },\r\n  support: {\r\n    // support: [2, 2, 16, 17, 3] | sumTotal: 40\r\n    s: [25, 36],\r\n    a: [38, 37],\r\n    b: [40, 101, 65, 63, 45, 17, 102, 57, 11, 39, 41, 20, 46, 12, 26, 53],\r\n    c: [66, 104, 19, 105, 24, 107, 8, 106, 2, 43, 98, 110, 116, 117, 103, 112, 108],\r\n    d: [109, 113, 71],\r\n  },\r\n}"
                }
            ],
            "src/app/career/club/club.utils.ts": [
                {
                    "name": "possibleCupStandings",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/career/club/club.utils.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[1, 2, 4, 8, 16, 32, 64]"
                }
            ],
            "src/app/moba/region/region.model.ts": [
                {
                    "name": "regions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/moba/region/region.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MobaRegion[]",
                    "defaultValue": "[\r\n  {\r\n    regionAbbrev: 'KR',\r\n    leagueName: 'LCK',\r\n  },\r\n  {\r\n    regionAbbrev: 'CN',\r\n    leagueName: 'LPL',\r\n  },\r\n  {\r\n    regionAbbrev: 'EU',\r\n    leagueName: 'LEC',\r\n  },\r\n  {\r\n    regionAbbrev: 'NA',\r\n    leagueName: 'LCS',\r\n  },\r\n  {\r\n    regionAbbrev: 'APAC',\r\n    leagueName: 'PCS',\r\n  },\r\n  {\r\n    regionAbbrev: 'APAC',\r\n    leagueName: 'VCS',\r\n  },\r\n  {\r\n    regionAbbrev: 'BR',\r\n    leagueName: 'CBLOL',\r\n  },\r\n  {\r\n    regionAbbrev: 'LATAM',\r\n    leagueName: 'LLA',\r\n  },\r\n]"
                }
            ],
            "src/app/shared/constants/squad-rules.model.ts": [
                {
                    "name": "SQUAD_RULES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/constants/squad-rules.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SquadRule[]",
                    "defaultValue": "[\r\n  {\r\n    text: '1 starting goalkeeper',\r\n    check: '❌',\r\n  },\r\n  {\r\n    text: 'EXACTLY 3 goalkeepers in squad',\r\n    check: '❌',\r\n  },\r\n  {\r\n    text: '3-4 starting defenders',\r\n    check: '❌',\r\n  },\r\n  {\r\n    text: 'min. 6 defenders in squad',\r\n    check: '❌',\r\n  },\r\n  {\r\n    text: '2-6 starting midfielders',\r\n    check: '❌',\r\n  },\r\n  {\r\n    text: 'min. 5 midfielders in squad',\r\n    check: '❌',\r\n  },\r\n  {\r\n    text: 'Valid formation',\r\n    check: '❌',\r\n  },\r\n  {\r\n    text: 'Backup player in each position',\r\n    check: '❌',\r\n  },\r\n  {\r\n    text: '',\r\n    check: '→',\r\n  },\r\n]"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/simulation/simulation.utils.ts": [
                {
                    "name": "addRankings",
                    "file": "src/app/simulation/simulation.utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "arr",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "hasCoaches",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "arr",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "hasCoaches",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "calcScore",
                    "file": "src/app/simulation/simulation.utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "team1",
                            "type": "GroupTeam",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "team2",
                            "type": "GroupTeam",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "canHaveExtraTime",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "literal type",
                    "jsdoctags": [
                        {
                            "name": "team1",
                            "type": "GroupTeam",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "team2",
                            "type": "GroupTeam",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "canHaveExtraTime",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "extraTimeResult",
                    "file": "src/app/simulation/simulation.utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "match",
                            "type": "Match",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "match",
                            "type": "Match",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "findTeamInTournament",
                    "file": "src/app/simulation/simulation.utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "groups",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "nation",
                            "type": "GroupTeam",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "groups",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "nation",
                            "type": "GroupTeam",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDisplayRating",
                    "file": "src/app/simulation/simulation.utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "rating",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "isGrade",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "rating",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isGrade",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getGradeStyle",
                    "file": "src/app/simulation/simulation.utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "grade",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "string | \"good-grade\" | \"ok-grade\" | \"bad-grade\"",
                    "jsdoctags": [
                        {
                            "name": "grade",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getGradeSummary",
                    "file": "src/app/simulation/simulation.utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "nationName",
                            "type": "GroupTeam",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "destrucuredGroupId": "35b12807-5b4e-440d-b7a8-452532652d75",
                            "destructuredParameter": true
                        },
                        {
                            "name": "reportCard",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "destrucuredGroupId": "35b12807-5b4e-440d-b7a8-452532652d75",
                            "destructuredParameter": true
                        },
                        {
                            "name": "matchesPlayed",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "destrucuredGroupId": "35b12807-5b4e-440d-b7a8-452532652d75",
                            "destructuredParameter": true
                        },
                        {
                            "name": "groupFinish",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "destrucuredGroupId": "35b12807-5b4e-440d-b7a8-452532652d75",
                            "destructuredParameter": true
                        }
                    ],
                    "returnType": "string",
                    "jsdoctags": [
                        {
                            "name": "nationName",
                            "type": "GroupTeam",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "destrucuredGroupId": "35b12807-5b4e-440d-b7a8-452532652d75",
                            "destructuredParameter": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "reportCard",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "destrucuredGroupId": "35b12807-5b4e-440d-b7a8-452532652d75",
                            "destructuredParameter": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "matchesPlayed",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "destrucuredGroupId": "35b12807-5b4e-440d-b7a8-452532652d75",
                            "destructuredParameter": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "groupFinish",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "destrucuredGroupId": "35b12807-5b4e-440d-b7a8-452532652d75",
                            "destructuredParameter": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getHostNations",
                    "file": "src/app/simulation/simulation.utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "filteredNations",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "numOfTeams",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "GroupTeam[]",
                    "jsdoctags": [
                        {
                            "name": "filteredNations",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "numOfTeams",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getRandomCardTimes",
                    "file": "src/app/simulation/simulation.utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "events",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "time",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "MatchEvent[]",
                    "jsdoctags": [
                        {
                            "name": "events",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "time",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getRandomGoalTimes",
                    "file": "src/app/simulation/simulation.utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "forEventTimes",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "oppEventTimes",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "time",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "MatchEvent",
                    "jsdoctags": [
                        {
                            "name": "forEventTimes",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "oppEventTimes",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "time",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getRandomInjuryTimes",
                    "file": "src/app/simulation/simulation.utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "events",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "time",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "MatchEvent[]",
                    "jsdoctags": [
                        {
                            "name": "events",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "time",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTeamBuffs",
                    "file": "src/app/simulation/simulation.utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "team",
                            "type": "GroupTeam",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "otherTeam",
                            "type": "GroupTeam",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "winner",
                            "type": "GroupTeam",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "loser",
                            "type": "GroupTeam",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "forEventTimes",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "oppEventTimes",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "team",
                            "type": "GroupTeam",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "otherTeam",
                            "type": "GroupTeam",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "winner",
                            "type": "GroupTeam",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "loser",
                            "type": "GroupTeam",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "forEventTimes",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "oppEventTimes",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "groupLetters",
                    "file": "src/app/simulation/simulation.utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "matchScore",
                    "file": "src/app/simulation/simulation.utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "team",
                            "type": "GroupTeam",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "otherTeam",
                            "type": "GroupTeam",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "hasExtraTime",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "Match",
                    "jsdoctags": [
                        {
                            "name": "team",
                            "type": "GroupTeam",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "otherTeam",
                            "type": "GroupTeam",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "hasExtraTime",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "regionQualifierHelper",
                    "file": "src/app/simulation/simulation.utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "region",
                            "type": "Region",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "tournamentSize",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "hostNations",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "literal type",
                    "jsdoctags": [
                        {
                            "name": "region",
                            "type": "Region",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "tournamentSize",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "hostNations",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "regionsValidator",
                    "file": "src/app/simulation/simulation.utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [],
                    "returnType": "ValidatorFn"
                },
                {
                    "name": "roundOf32Helper",
                    "file": "src/app/simulation/simulation.utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "groups",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "literal type",
                    "jsdoctags": [
                        {
                            "name": "groups",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sortEventTimes",
                    "file": "src/app/simulation/simulation.utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "a",
                            "type": "MatchEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "b",
                            "type": "MatchEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "a",
                            "type": "MatchEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "b",
                            "type": "MatchEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validateHosts",
                    "file": "src/app/simulation/simulation.utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "control",
                            "type": "AbstractControl",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "control",
                            "type": "AbstractControl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "whoWon",
                    "file": "src/app/simulation/simulation.utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "goalsFor",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "goalsAg",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "forEvents",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "oppEvents",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "team",
                            "type": "GroupTeam",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "otherTeam",
                            "type": "GroupTeam",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "isPenaltyWin",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "literal type",
                    "jsdoctags": [
                        {
                            "name": "goalsFor",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "goalsAg",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "forEvents",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "oppEvents",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "team",
                            "type": "GroupTeam",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "otherTeam",
                            "type": "GroupTeam",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isPenaltyWin",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/career/career.utils.ts": [
                {
                    "name": "adjustClubStats",
                    "file": "src/app/career/career.utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "clubStats",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "season",
                            "type": "Season",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "ClubStats[]",
                    "jsdoctags": [
                        {
                            "name": "clubStats",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "season",
                            "type": "Season",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "calcCareerScore",
                    "file": "src/app/career/career.utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "clubs",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "career",
                            "type": "CareerOverview",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "CareerScore",
                    "jsdoctags": [
                        {
                            "name": "clubs",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "career",
                            "type": "CareerOverview",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "calcLeagueDifficulty",
                    "file": "src/app/career/career.utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "clubRating",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "leagueRating",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "ability",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "LeagueDifficulty",
                    "jsdoctags": [
                        {
                            "name": "clubRating",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "leagueRating",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "ability",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "checkHalfStar",
                    "file": "src/app/career/career.utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "rating",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "rating",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPlayingTime",
                    "file": "src/app/career/career.utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "club",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "season",
                            "type": "Season",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "PlayingTime",
                    "jsdoctags": [
                        {
                            "name": "club",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "season",
                            "type": "Season",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTransferFee",
                    "file": "src/app/career/career.utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "club",
                            "type": "Club",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "parentClub",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "hasLoanOption",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "playingTime",
                            "type": "PlayingTime",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "season",
                            "type": "Season",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "literal type",
                    "jsdoctags": [
                        {
                            "name": "club",
                            "type": "Club",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "parentClub",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "hasLoanOption",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "playingTime",
                            "type": "PlayingTime",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "season",
                            "type": "Season",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getWage",
                    "file": "src/app/career/career.utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "playingTime",
                            "type": "PlayingTime",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "parentClub",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "hasLoanOption",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "number",
                    "jsdoctags": [
                        {
                            "name": "playingTime",
                            "type": "PlayingTime",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "parentClub",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "hasLoanOption",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "newSeasonStr",
                    "file": "src/app/career/career.utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "year",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "year",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "totalSeasonsStr",
                    "file": "src/app/career/career.utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "first",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "last",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "first",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "last",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/career/player/player.utils.ts": [
                {
                    "name": "adjustCurrentAbility",
                    "file": "src/app/career/player/player.utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "season",
                            "type": "Season",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "stats",
                            "type": "SeasonStats",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "transfer",
                            "type": "TransferOption",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "career",
                            "type": "CareerOverview",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "leagueDiff",
                            "type": "LeagueDifficulty",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "number",
                    "jsdoctags": [
                        {
                            "name": "season",
                            "type": "Season",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "stats",
                            "type": "SeasonStats",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "transfer",
                            "type": "TransferOption",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "career",
                            "type": "CareerOverview",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "leagueDiff",
                            "type": "LeagueDifficulty",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "calcCareerStat",
                    "file": "src/app/career/player/player.utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "seasons",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "propPath",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "number",
                    "jsdoctags": [
                        {
                            "name": "seasons",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "propPath",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "calcTotalStats",
                    "file": "src/app/career/player/player.utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "seasons",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "career",
                            "type": "CareerOverview",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "SeasonStats",
                    "jsdoctags": [
                        {
                            "name": "seasons",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "career",
                            "type": "CareerOverview",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAppsForSeason",
                    "file": "src/app/career/player/player.utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "club",
                            "type": "TransferOption",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "literal type",
                    "jsdoctags": [
                        {
                            "name": "club",
                            "type": "TransferOption",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/career/simulation/simulation.utils.ts": [
                {
                    "name": "calcGoalsOrAssists",
                    "file": "src/app/career/simulation/simulation.utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>A computation based on probability and the # of seasons a player has been at their current club. This function is used to help calculate the # of goals and assists.</p>\n",
                    "args": [
                        {
                            "name": "a",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "b",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "seasons",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "number",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 545,
                                "end": 546,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "a"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 530,
                                "end": 535,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<ul>\n<li>The first number.</li>\n</ul>\n",
                            "typeExpression": {
                                "pos": 536,
                                "end": 544,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 316,
                                "type": {
                                    "pos": 537,
                                    "end": 543,
                                    "flags": 16777216,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 1,
                                    "kind": 150
                                }
                            }
                        },
                        {
                            "name": {
                                "pos": 587,
                                "end": 588,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "b"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 572,
                                "end": 577,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<ul>\n<li>The second number.</li>\n</ul>\n",
                            "typeExpression": {
                                "pos": 578,
                                "end": 586,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 316,
                                "type": {
                                    "pos": 579,
                                    "end": 585,
                                    "flags": 16777216,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 1,
                                    "kind": 150
                                }
                            }
                        },
                        {
                            "name": {
                                "pos": 630,
                                "end": 637,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "seasons"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 615,
                                "end": 620,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<ul>\n<li>The number of seasons</li>\n</ul>\n",
                            "typeExpression": {
                                "pos": 621,
                                "end": 629,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 316,
                                "type": {
                                    "pos": 622,
                                    "end": 628,
                                    "flags": 16777216,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 1,
                                    "kind": 150
                                }
                            }
                        },
                        {
                            "tagName": {
                                "pos": 667,
                                "end": 674,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Returns a number that helps calculate G/A statistics.</p>\n",
                            "returnType": "number"
                        }
                    ]
                },
                {
                    "name": "getSkewedAssists",
                    "file": "src/app/career/simulation/simulation.utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "diff",
                            "type": "LeagueDifficulty",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "apps",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "diff",
                            "type": "LeagueDifficulty",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "apps",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSkewedGoals",
                    "file": "src/app/career/simulation/simulation.utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "diff",
                            "type": "LeagueDifficulty",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "apps",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "diff",
                            "type": "LeagueDifficulty",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "apps",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "simulateApps",
                    "file": "src/app/career/simulation/simulation.utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "appearances",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "transfer",
                            "type": "TransferOption",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "season",
                            "type": "Season",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "career",
                            "type": "CareerOverview",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "literal type",
                    "jsdoctags": [
                        {
                            "name": "appearances",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "transfer",
                            "type": "TransferOption",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "season",
                            "type": "Season",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "career",
                            "type": "CareerOverview",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/shared/utils.ts": [
                {
                    "name": "calcSumRating",
                    "file": "src/app/shared/utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "arr",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "number",
                    "jsdoctags": [
                        {
                            "name": "arr",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "calcWeightedSumRating",
                    "file": "src/app/shared/utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "arr",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "weight",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "arr",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "weight",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "compare",
                    "file": "src/app/shared/utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "a",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "b",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "isAsc",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "a",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "b",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isAsc",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "formatDecimal",
                    "file": "src/app/shared/utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "num",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "decimals",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "num",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "decimals",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAbbrevNumber",
                    "file": "src/app/shared/utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "n",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "string",
                    "jsdoctags": [
                        {
                            "name": "n",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAbbrevString",
                    "file": "src/app/shared/utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "str",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "string",
                    "jsdoctags": [
                        {
                            "name": "str",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getRandFloat",
                    "file": "src/app/shared/utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "min",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "max",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "decimalPlaces",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "2"
                        }
                    ],
                    "returnType": "number",
                    "jsdoctags": [
                        {
                            "name": "min",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "max",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "decimalPlaces",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "2",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getRandomInt",
                    "file": "src/app/shared/utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "mn",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "mx",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "number",
                    "jsdoctags": [
                        {
                            "name": "mn",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "mx",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getRandomIntBC",
                    "file": "src/app/shared/utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "min",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "max",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "skew",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "min",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "max",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "skew",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getRandomInts",
                    "file": "src/app/shared/utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "min",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "max",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "quantity",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "Set<number>",
                    "jsdoctags": [
                        {
                            "name": "min",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "max",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "quantity",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getRandomIntsBC",
                    "file": "src/app/shared/utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "min",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "max",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "skew",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "quantity",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "min",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "max",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "skew",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "quantity",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getRandomPersonality",
                    "file": "src/app/shared/utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [],
                    "returnType": "string"
                },
                {
                    "name": "groupByProp",
                    "file": "src/app/shared/utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "arr",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "prop",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "arr",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "prop",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isArrayOfStrings",
                    "file": "src/app/shared/utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "value",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "string[]",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5535,
                                "end": 5540,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "value"
                            },
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5529,
                                "end": 5534,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>any type of value</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 5564,
                                "end": 5571,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "returns"
                            },
                            "comment": "<p>boolean</p>\n"
                        }
                    ]
                },
                {
                    "name": "isTopNumOfMap",
                    "file": "src/app/shared/utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "map",
                            "type": "Map",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "searchString",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "topBy",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "boolean",
                    "jsdoctags": [
                        {
                            "name": "map",
                            "type": "Map",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "searchString",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "topBy",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "mapRange",
                    "file": "src/app/shared/utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "fromMin",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "fromMax",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "toMin",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "toMax",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "number",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "fromMin",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "fromMax",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "toMin",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "toMax",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "median",
                    "file": "src/app/shared/utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "values",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "values",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "shuffle",
                    "file": "src/app/shared/utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "arr",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "arr",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "startsWithVowel",
                    "file": "src/app/shared/utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "word",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "boolean",
                    "jsdoctags": [
                        {
                            "name": "word",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/moba/draft/draft.utils.ts": [
                {
                    "name": "checkForAvailableRoles",
                    "file": "src/app/moba/draft/draft.utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "selectedRoles",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "Role[]",
                    "jsdoctags": [
                        {
                            "name": "selectedRoles",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAdviceTags",
                    "file": "src/app/moba/draft/draft.utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "metaStrength",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "playerMasteries",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "opponentMasteries",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "literal type",
                    "jsdoctags": [
                        {
                            "name": "metaStrength",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "playerMasteries",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "opponentMasteries",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllMasteries",
                    "file": "src/app/moba/draft/draft.utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "champ",
                            "type": "Champion",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "playerMasteries",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "champ",
                            "type": "Champion",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "playerMasteries",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getChampionMasteryBasedOnDiff",
                    "file": "src/app/moba/draft/draft.utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Calculates the TierListRankings based on the provided list of champions and the draft difficulty.</p>\n",
                    "args": [
                        {
                            "name": "allChamps",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "difficulty",
                            "type": "DraftDifficulty",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "TierListRankings",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 8664,
                                "end": 8673,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "allChamps"
                            },
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 8647,
                                "end": 8652,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<ul>\n<li>The list of all champions to consider.</li>\n</ul>\n",
                            "typeExpression": {
                                "pos": 8653,
                                "end": 8663,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 316,
                                "type": {
                                    "pos": 8654,
                                    "end": 8662,
                                    "flags": 16777216,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 1,
                                    "kind": 188,
                                    "elementType": {
                                        "pos": 8654,
                                        "end": 8660,
                                        "flags": 16777216,
                                        "modifierFlagsCache": 0,
                                        "transformFlags": 1,
                                        "kind": 150
                                    }
                                }
                            }
                        },
                        {
                            "name": {
                                "pos": 8743,
                                "end": 8753,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "difficulty"
                            },
                            "type": "DraftDifficulty",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 8719,
                                "end": 8724,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<ul>\n<li>The difficulty level of the draft (easy, medium, hard).</li>\n</ul>\n",
                            "typeExpression": {
                                "pos": 8725,
                                "end": 8742,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 316,
                                "type": {
                                    "pos": 8726,
                                    "end": 8741,
                                    "flags": 16777216,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 1,
                                    "kind": 183,
                                    "typeName": {
                                        "pos": 8726,
                                        "end": 8741,
                                        "flags": 16777216,
                                        "modifierFlagsCache": 0,
                                        "transformFlags": 0,
                                        "kind": 80,
                                        "escapedText": "DraftDifficulty"
                                    }
                                }
                            }
                        },
                        {
                            "tagName": {
                                "pos": 8816,
                                "end": 8822,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "return"
                            },
                            "comment": "<p>The TierListRankings object with champion slices for each tier (s, a, b, c, d).</p>\n",
                            "returnType": ""
                        }
                    ]
                },
                {
                    "name": "getChampMasteries",
                    "file": "src/app/moba/draft/draft.utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "champ",
                            "type": "DraftChampion",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "draftPhase",
                            "type": "DraftPhase",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "currentDraftRound",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "isRedSide",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "playerSide",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "champ",
                            "type": "DraftChampion",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "draftPhase",
                            "type": "DraftPhase",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "currentDraftRound",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isRedSide",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "playerSide",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getChampPropFromDraftPhase",
                    "file": "src/app/moba/draft/draft.utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "draftPhase",
                            "type": "DraftPhase",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "currentDraftRound",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "isRedSide",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "draftPhase",
                            "type": "DraftPhase",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "currentDraftRound",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isRedSide",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDraftChampions",
                    "file": "src/app/moba/draft/draft.utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "champions",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "patchData",
                            "type": "PatchData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "playerMasteries",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "opponentMasteries",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "DraftChampion[]",
                    "jsdoctags": [
                        {
                            "name": "champions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "patchData",
                            "type": "PatchData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "playerMasteries",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "opponentMasteries",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMasterySort",
                    "file": "src/app/moba/draft/draft.utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "draftPhase",
                            "type": "DraftPhase",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "currentDraftRound",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "isRedSide",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "\"playerMastery\" | \"opponentMastery\"",
                    "jsdoctags": [
                        {
                            "name": "draftPhase",
                            "type": "DraftPhase",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "currentDraftRound",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isRedSide",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMetaStrength",
                    "file": "src/app/moba/draft/draft.utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "champion",
                            "type": "Champion",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "patchVersion",
                            "type": "AllRolesTierList",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "champion",
                            "type": "Champion",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "patchVersion",
                            "type": "AllRolesTierList",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPatchData",
                    "file": "src/app/moba/draft/draft.utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "name",
                            "type": "PatchName",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "PatchData",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "PatchName",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getRandomMasteries",
                    "file": "src/app/moba/draft/draft.utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Generates a list of draft players with randomly assigned champion masteries based on the provided patch tier list and difficulty level.</p>\n",
                    "args": [
                        {
                            "name": "patchTierList",
                            "type": "PatchData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "destrucuredGroupId": "d1fd5d28-0eb8-4f40-9bad-bbf01f4c60b8",
                            "destructuredParameter": true
                        },
                        {
                            "name": "difficulty",
                            "type": "DraftDifficulty",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'medium'"
                        }
                    ],
                    "returnType": "DraftPlayer[]",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 9935,
                                "end": 9948,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "patchTierList"
                            },
                            "type": "PatchData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "destrucuredGroupId": "d1fd5d28-0eb8-4f40-9bad-bbf01f4c60b8",
                            "destructuredParameter": true,
                            "tagName": {
                                "pos": 9917,
                                "end": 9922,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<ul>\n<li>An object containing the patch tier list for each role.</li>\n</ul>\n",
                            "typeExpression": {
                                "pos": 9923,
                                "end": 9934,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 316,
                                "type": {
                                    "pos": 9924,
                                    "end": 9933,
                                    "flags": 16777216,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 1,
                                    "kind": 183,
                                    "typeName": {
                                        "pos": 9924,
                                        "end": 9933,
                                        "flags": 16777216,
                                        "modifierFlagsCache": 0,
                                        "transformFlags": 0,
                                        "kind": 80,
                                        "escapedText": "PatchData"
                                    }
                                }
                            }
                        },
                        {
                            "name": {
                                "pos": 10036,
                                "end": 10046,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "difficulty"
                            },
                            "type": "DraftDifficulty",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'medium'",
                            "tagName": {
                                "pos": 10011,
                                "end": 10016,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<ul>\n<li>The difficulty level for generating the champion masteries. Defaults to &#39;medium&#39;.</li>\n</ul>\n",
                            "typeExpression": {
                                "pos": 10017,
                                "end": 10034,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 316,
                                "type": {
                                    "pos": 10018,
                                    "end": 10033,
                                    "flags": 16777216,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 1,
                                    "kind": 183,
                                    "typeName": {
                                        "pos": 10018,
                                        "end": 10033,
                                        "flags": 16777216,
                                        "modifierFlagsCache": 0,
                                        "transformFlags": 0,
                                        "kind": 80,
                                        "escapedText": "DraftDifficulty"
                                    }
                                }
                            }
                        },
                        {
                            "tagName": {
                                "pos": 10145,
                                "end": 10151,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "return"
                            },
                            "comment": "<p>An array of draft players with their main role and randomly assigned champion masteries.</p>\n",
                            "returnType": "[]"
                        }
                    ]
                },
                {
                    "name": "getRoleMastery",
                    "file": "src/app/moba/draft/draft.utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "roleMasteries",
                            "type": "TierListRankings",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "roleMasteries",
                            "type": "TierListRankings",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getRoleMetaStrength",
                    "file": "src/app/moba/draft/draft.utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "roleTierList",
                            "type": "TierListRankings",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "number",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "roleTierList",
                            "type": "TierListRankings",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/pages/home/home.utils.ts": [
                {
                    "name": "checkStars",
                    "file": "src/app/pages/home/home.utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "starterRating",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "squadRating",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "starterRating",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "squadRating",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/career/club/club.utils.ts": [
                {
                    "name": "generateNewClubStandings",
                    "file": "src/app/career/club/club.utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "club",
                            "type": "Club",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "literal type",
                    "jsdoctags": [
                        {
                            "name": "club",
                            "type": "Club",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCurrentClub",
                    "file": "src/app/career/club/club.utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "clubs",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "season",
                            "type": "Season",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "parentClub",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "ClubStats | null",
                    "jsdoctags": [
                        {
                            "name": "clubs",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "season",
                            "type": "Season",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "parentClub",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCurrentClubAsTransfer",
                    "file": "src/app/career/club/club.utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "club",
                            "type": "ClubStats",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "season",
                            "type": "Season",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "parentClub",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "hasLoanOption",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "TransferOption",
                    "jsdoctags": [
                        {
                            "name": "club",
                            "type": "ClubStats",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "season",
                            "type": "Season",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "parentClub",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "hasLoanOption",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getLeagueStandings",
                    "file": "src/app/career/club/club.utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "club",
                            "type": "Club",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "number",
                    "jsdoctags": [
                        {
                            "name": "club",
                            "type": "Club",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/moba/player/player.utils.ts": [
                {
                    "name": "getAge",
                    "file": "src/app/moba/player/player.utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": []
                },
                {
                    "name": "getAttributes",
                    "file": "src/app/moba/player/player.utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "role",
                            "type": "Role",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "age",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "regionSkew",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "MobaAttributes",
                    "jsdoctags": [
                        {
                            "name": "role",
                            "type": "Role",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "age",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "regionSkew",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getChampMains",
                    "file": "src/app/moba/player/player.utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "role",
                            "type": "Role",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "gameStateStrength",
                            "type": "GameState",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "Champion[]",
                    "jsdoctags": [
                        {
                            "name": "role",
                            "type": "Role",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "gameStateStrength",
                            "type": "GameState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCurrentRoles",
                    "file": "src/app/moba/player/player.utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "players",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "Player[]",
                    "jsdoctags": [
                        {
                            "name": "players",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getGameStateStrength",
                    "file": "src/app/moba/player/player.utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "playStyle",
                            "type": "PlayStyle",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "GameState",
                    "jsdoctags": [
                        {
                            "name": "playStyle",
                            "type": "PlayStyle",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getName",
                    "file": "src/app/moba/player/player.utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "newPlayerOptions",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "region",
                            "type": "MobaRegion",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "selectedPlayers",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "returnType": "GamerTag",
                    "jsdoctags": [
                        {
                            "name": "newPlayerOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "region",
                            "type": "MobaRegion",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "selectedPlayers",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getNationality",
                    "file": "src/app/moba/player/player.utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "gamerTag",
                            "type": "GamerTag",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "Nation",
                    "jsdoctags": [
                        {
                            "name": "gamerTag",
                            "type": "GamerTag",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getOverallRating",
                    "file": "src/app/moba/player/player.utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "mechanics",
                            "type": "MobaAttributes",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "destrucuredGroupId": "7bee4031-7d3b-4523-b8a5-a423486d5fa3",
                            "destructuredParameter": true
                        },
                        {
                            "name": "intangible",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "destrucuredGroupId": "7bee4031-7d3b-4523-b8a5-a423486d5fa3",
                            "destructuredParameter": true
                        },
                        {
                            "name": "macro",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "destrucuredGroupId": "7bee4031-7d3b-4523-b8a5-a423486d5fa3",
                            "destructuredParameter": true
                        },
                        {
                            "name": "role",
                            "type": "Role",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "number",
                    "jsdoctags": [
                        {
                            "name": "mechanics",
                            "type": "MobaAttributes",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "destrucuredGroupId": "7bee4031-7d3b-4523-b8a5-a423486d5fa3",
                            "destructuredParameter": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "intangible",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "destrucuredGroupId": "7bee4031-7d3b-4523-b8a5-a423486d5fa3",
                            "destructuredParameter": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "macro",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "destrucuredGroupId": "7bee4031-7d3b-4523-b8a5-a423486d5fa3",
                            "destructuredParameter": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "role",
                            "type": "Role",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPlayerOptions",
                    "file": "src/app/moba/player/player.utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "region",
                            "type": "MobaRegion",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "selectedPlayers",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "returnType": "Player[]",
                    "jsdoctags": [
                        {
                            "name": "region",
                            "type": "MobaRegion",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "selectedPlayers",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPlayStyle",
                    "file": "src/app/moba/player/player.utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "attributes",
                            "type": "MobaAttributes",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "age",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "PlayStyle",
                    "jsdoctags": [
                        {
                            "name": "attributes",
                            "type": "MobaAttributes",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "age",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getRoleBasedAttributes",
                    "file": "src/app/moba/player/player.utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "role",
                            "type": "Role",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "attributeGroup",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "age",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "regionSkew",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "AttributeGroup",
                    "jsdoctags": [
                        {
                            "name": "role",
                            "type": "Role",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "attributeGroup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "age",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "regionSkew",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isCompatPlayStyle",
                    "file": "src/app/moba/player/player.utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "map",
                            "type": "Map",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "playStyle",
                            "type": "PlayStyle",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "boolean",
                    "jsdoctags": [
                        {
                            "name": "map",
                            "type": "Map",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "playStyle",
                            "type": "PlayStyle",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sortMapAttributes",
                    "file": "src/app/moba/player/player.utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "attributes",
                            "type": "MobaAttributes",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "attributes",
                            "type": "MobaAttributes",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/moba/draft/draft-grader.ts": [
                {
                    "name": "getCompositionAdviceAndGrade",
                    "file": "src/app/moba/draft/draft-grader.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "isBlueSide",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "blueSideChampPlaceholders",
                            "type": "WritableSignal",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "redSideChampPlaceholders",
                            "type": "WritableSignal",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "blueSideDraftScores",
                            "type": "WritableSignal",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "redSideDraftScores",
                            "type": "WritableSignal",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "isBlueSide",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "blueSideChampPlaceholders",
                            "type": "WritableSignal",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "redSideChampPlaceholders",
                            "type": "WritableSignal",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "blueSideDraftScores",
                            "type": "WritableSignal",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "redSideDraftScores",
                            "type": "WritableSignal",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTeamCompStyleScoring",
                    "file": "src/app/moba/draft/draft-grader.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Calculates the team&#39;s composition style statistics based on the selected champions.</p>\n",
                    "args": [
                        {
                            "name": "selectedTeamChamps",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "CompStyleStats",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2135,
                                "end": 2153,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "selectedTeamChamps"
                            },
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2111,
                                "end": 2116,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<ul>\n<li>The array of champions selected for the team.</li>\n</ul>\n",
                            "typeExpression": {
                                "pos": 2117,
                                "end": 2134,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 316,
                                "type": {
                                    "pos": 2118,
                                    "end": 2133,
                                    "flags": 16777216,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 1,
                                    "kind": 188,
                                    "elementType": {
                                        "pos": 2118,
                                        "end": 2131,
                                        "flags": 16777216,
                                        "modifierFlagsCache": 0,
                                        "transformFlags": 1,
                                        "kind": 183,
                                        "typeName": {
                                            "pos": 2118,
                                            "end": 2131,
                                            "flags": 16777216,
                                            "modifierFlagsCache": 0,
                                            "transformFlags": 0,
                                            "kind": 80,
                                            "escapedText": "DraftChampion"
                                        }
                                    }
                                }
                            }
                        },
                        {
                            "tagName": {
                                "pos": 2207,
                                "end": 2213,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "return"
                            },
                            "comment": "<p>The composition style statistics for the team.</p>\n",
                            "returnType": ""
                        }
                    ]
                },
                {
                    "name": "needsMoreDmgAdvice",
                    "file": "src/app/moba/draft/draft-grader.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "selectedTeamChamps",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "literal type",
                    "jsdoctags": [
                        {
                            "name": "selectedTeamChamps",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "needsMoreScalingAdvice",
                    "file": "src/app/moba/draft/draft-grader.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "selectedTeamChamps",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "literal type",
                    "jsdoctags": [
                        {
                            "name": "selectedTeamChamps",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/moba/region/region.utils.ts": [
                {
                    "name": "getNameNationality",
                    "file": "src/app/moba/region/region.utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "region",
                            "type": "MobaRegion",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "string",
                    "jsdoctags": [
                        {
                            "name": "region",
                            "type": "MobaRegion",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getRegionSkew",
                    "file": "src/app/moba/region/region.utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "region",
                            "type": "MobaRegion",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "number",
                    "jsdoctags": [
                        {
                            "name": "region",
                            "type": "MobaRegion",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/moba/draft/draft.model.ts": [
                {
                    "name": "getRoleFromFilter",
                    "file": "src/app/moba/draft/draft.model.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "role",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "Role | undefined",
                    "jsdoctags": [
                        {
                            "name": "role",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/core/services/firestore.model.ts": [
                {
                    "name": "isFirstName",
                    "file": "src/app/core/services/firestore.model.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "x",
                            "type": "FirstName",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "FirstName",
                    "jsdoctags": [
                        {
                            "name": "x",
                            "type": "FirstName",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/models/nation.model.ts": [
                {
                    "name": "isNation",
                    "file": "src/app/models/nation.model.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "value",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "Nation",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/moba/player/player.model.ts": [
                {
                    "name": "isRole",
                    "file": "src/app/moba/player/player.model.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "value",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "Role",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {
            "src/app/models/club.model.ts": [
                {
                    "name": "Region",
                    "childs": [
                        {
                            "name": "UEFA",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "uefa"
                        },
                        {
                            "name": "CONMEBOL",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "conembol"
                        },
                        {
                            "name": "CONCACAF",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "concacaf"
                        },
                        {
                            "name": "CAF",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "caf"
                        },
                        {
                            "name": "AFC",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "afc"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/models/club.model.ts"
                }
            ],
            "src/app/simulation/simulation.model.ts": [
                {
                    "name": "RegionName",
                    "childs": [
                        {
                            "name": "uefa",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "uefa"
                        },
                        {
                            "name": "afc",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "afc"
                        },
                        {
                            "name": "caf",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "caf"
                        },
                        {
                            "name": "concacaf",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "concacaf"
                        },
                        {
                            "name": "conmebol",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "conmebol"
                        },
                        {
                            "name": "ofc",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "ofc"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/simulation/simulation.model.ts"
                }
            ],
            "src/app/moba/player/player.model.ts": [
                {
                    "name": "RoleIndex",
                    "childs": [
                        {
                            "name": "TOP",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "JUNGLE",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "MID",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "ADC",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "SUPPORT",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/moba/player/player.model.ts"
                }
            ],
            "src/app/moba/draft/draft.model.ts": [
                {
                    "name": "TierValue",
                    "childs": [
                        {
                            "name": "S",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 20
                        },
                        {
                            "name": "A",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 16
                        },
                        {
                            "name": "B",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 12
                        },
                        {
                            "name": "C",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 8
                        },
                        {
                            "name": "D",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 4
                        },
                        {
                            "name": "F",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 0
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/moba/draft/draft.model.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "src/app/moba/champion/champion.model.ts": [
                {
                    "name": "Archetype",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"bruiser\" | \"tank\" | \"mage\" | \"assassin\" | \"enchanter\" | \"fighter\" | \"crit-marksman\" | \"lethality-marksman\" | \"terrainAbuser\" | \"split-pusher\" | \"immobile\" | \"mobile\" | \"lane-bully\" | \"aoe\" | \"duelist\"",
                    "file": "src/app/moba/champion/champion.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "CompRole",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"hard-engage\" | \"engage\" | \"poke\" | \"isolator\" | \"anti-engage\" | \"team-fight-burst\" | \"team-fight-sustain\" | \"carry\"",
                    "file": "src/app/moba/champion/champion.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "DamageType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"high ad\" | \"high ap\" | \"high mix\" | \"low ad\" | \"low ap\" | \"low mix\" | \"utility\"",
                    "file": "src/app/moba/champion/champion.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ],
            "src/app/moba/draft/draft.model.ts": [
                {
                    "name": "CompStyle",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"engage\" | \"pick\" | \"protect\" | \"siege\" | \"split\"",
                    "file": "src/app/moba/draft/draft.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "DraftAdviceTag",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"Counters Banned\" | \"Recommended\" | \"Counter Pick\" | \"Not Recommended\" | \"High Synergy\"",
                    "file": "src/app/moba/draft/draft.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "DraftDifficulty",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"easy\" | \"medium\" | \"hard\"",
                    "file": "src/app/moba/draft/draft.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "DraftPhase",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"Blue Ban 1\" | \"Blue Ban 2\" | \"Blue Ban 3\" | \"Blue Ban 4\" | \"Blue Ban 5\" | \"Blue Pick 1\" | \"Blue Pick 2\" | \"Blue Pick 3\" | \"Blue Pick 4\" | \"Blue Pick 5\" | \"Red Ban 1\" | \"Red Ban 2\" | \"Red Ban 3\" | \"Red Ban 4\" | \"Red Ban 5\" | \"Red Pick 1\" | \"Red Pick 2\" | \"Red Pick 3\" | \"Red Pick 4\" | \"Red Pick 5\" | \"Draft Complete\"",
                    "file": "src/app/moba/draft/draft.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "DraftSortHeader",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"name\" | \"mastery\" | \"meta\" | \"synergy\" | \"counter\"",
                    "file": "src/app/moba/draft/draft.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "LetterRank",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"S\" | \"A\" | \"B\" | \"C\" | \"D\" | \"F\" | \"N/A\" | \"S+\" | \"S-\" | \"A+\" | \"A-\" | \"B+\" | \"B-\" | \"C+\" | \"C-\" | \"D+\" | \"D-\"",
                    "file": "src/app/moba/draft/draft.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "PatchName",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "src/app/moba/draft/draft.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 201
                },
                {
                    "name": "PatchVersion",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "src/app/moba/draft/draft.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 201
                }
            ],
            "src/app/simulation/simulation.model.ts": [
                {
                    "name": "EventEmoji",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"⚽\" | \"🟨\" | \"🟥\" | \"🟨🟥\" | \"🚑\"",
                    "file": "src/app/simulation/simulation.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "KnockoutRound",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "[]",
                    "file": "src/app/simulation/simulation.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 188
                }
            ],
            "src/app/moba/player/player.model.ts": [
                {
                    "name": "FilterRole",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Role | \"all\"",
                    "file": "src/app/moba/player/player.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "GameState",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"early-game\" | \"mid-game\" | \"late-game\"",
                    "file": "src/app/moba/player/player.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "PlayStyle",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"scaler\" | \"mechanical god\" | \"split-pusher\" | \"team-fighter\" | \"closer\" | \"flex god\" | \"macro-player\" | \"leader\" | \"baron stealer\" | \"prodigy\" | \"journeyman\" | \"specialist\"",
                    "file": "src/app/moba/player/player.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "Role",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"top\" | \"jungle\" | \"mid\" | \"adc\" | \"support\"",
                    "file": "src/app/moba/player/player.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ],
            "src/app/career/club/club.model.ts": [
                {
                    "name": "LeagueDifficulty",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"easy\" | \"mediumEasy\" | \"medium\" | \"mediumHard\" | \"hard\"",
                    "file": "src/app/career/club/club.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "TransferType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"loan\" | \"transfer\" | \"stay\" | \"transfer/loan\" | \"re-sign\" | \"sign\"",
                    "file": "src/app/career/club/club.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ],
            "src/app/moba/region/region.model.ts": [
                {
                    "name": "LeagueName",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"LCS\" | \"LEC\" | \"LPL\" | \"LCK\" | \"VCS\" | \"CBLOL\" | \"PCS\" | \"LLA\"",
                    "file": "src/app/moba/region/region.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "RegionAbbrev",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"NA\" | \"EU\" | \"CN\" | \"KR\" | \"BR\" | \"APAC\" | \"LATAM\"",
                    "file": "src/app/moba/region/region.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ],
            "src/app/moba/moba.service.ts": [
                {
                    "name": "MobaDraftKey",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "src/app/moba/moba.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 201
                },
                {
                    "name": "MobaStorageKey",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"moba_region\" | \"moba_player_options\" | \"moba_selected_players\"",
                    "file": "src/app/moba/moba.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ],
            "src/app/core/services/firestore.model.ts": [
                {
                    "name": "Name",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "FirstName | LastName",
                    "file": "src/app/core/services/firestore.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ],
            "src/app/career/player/player.model.ts": [
                {
                    "name": "PlayingTime",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"breakthrough prospect\" | \"fringe player\" | \"impact sub\" | \"squad player\" | \"regular starter\" | \"important player\" | \"star player\"",
                    "file": "src/app/career/player/player.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ]
        }
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "",
                        "redirectTo": "moba",
                        "pathMatch": "full"
                    },
                    {
                        "path": "simulation",
                        "loadChildren": "./simulation/simulation.module#SimulationModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [],
                                "module": "SimulationModule"
                            }
                        ]
                    },
                    {
                        "path": "leaderboard",
                        "component": "LeaderboardComponent"
                    },
                    {
                        "path": "login",
                        "component": "LoginComponent",
                        "canActivate": [
                            "AuthGuard"
                        ]
                    },
                    {
                        "path": "career",
                        "loadChildren": "./career/career.module#CareerModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/career/career.module.ts",
                                        "module": "CareerModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "CareerComponent"
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "CareerModule"
                            }
                        ]
                    },
                    {
                        "path": "moba",
                        "loadChildren": "./moba/moba.module#MobaModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/moba/moba.module.ts",
                                        "module": "MobaModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "HomeComponent",
                                                "children": [
                                                    {
                                                        "path": "player-select",
                                                        "component": "PlayerSelectComponent"
                                                    },
                                                    {
                                                        "path": "draft",
                                                        "component": "DraftComponent"
                                                    },
                                                    {
                                                        "path": "",
                                                        "redirectTo": "draft",
                                                        "pathMatch": "full"
                                                    }
                                                ]
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "MobaModule"
                            }
                        ]
                    },
                    {
                        "path": "**",
                        "redirectTo": "/simulation/group-stage"
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 2,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/career/career.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CareerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/27",
                "status": "low"
            },
            {
                "filePath": "src/app/career/career.constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ageFactor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/career/career.constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CLUB_MULTIPLIER",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/career/career.constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "fringeRoles",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/career/career.constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "playerToClubAbility",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/career/career.constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "squadRoles",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/career/career.constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "tableHeaders",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/career/career.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CareerService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/career/career.utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "adjustClubStats",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/career/career.utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "calcCareerScore",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/career/career.utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "calcLeagueDifficulty",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/career/career.utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "checkHalfStar",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/career/career.utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getPlayingTime",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/career/career.utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getTransferFee",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/career/career.utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getWage",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/career/career.utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "newSeasonStr",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/career/career.utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "totalSeasonsStr",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/career/club/club.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ClubStats",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/career/club/club.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TransferOption",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/career/club/club.utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "generateNewClubStandings",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/career/club/club.utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getCurrentClub",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/career/club/club.utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getCurrentClubAsTransfer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/career/club/club.utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getLeagueStandings",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/career/club/club.utils.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "possibleCupStandings",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/career/custom-star-rating.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CustomStarRatingService",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/career/player/player.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AppearanceStats",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/career/player/player.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CareerOverview",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/career/player/player.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CareerScore",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/career/player/player.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CompetitionStats",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/career/player/player.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PlayerCareer",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/career/player/player.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Season",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/career/player/player.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SeasonStats",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/career/player/player.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defaultCompStats",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/career/player/player.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defaultSeasonStats",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/career/player/player.utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "adjustCurrentAbility",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/career/player/player.utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "calcCareerStat",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/career/player/player.utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "calcTotalStats",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/career/player/player.utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getAppsForSeason",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/career/player/player.utils.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "challengeFactor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/career/player/player.utils.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "checkCurrentAbility",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/career/player/player.utils.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "consistencyFactor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/career/player/player.utils.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "performanceFactor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/career/player/player.utils.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "youthFactor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/career/simulation/simulation.utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "calcGoalsOrAssists",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/app/career/simulation/simulation.utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getSkewedAssists",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/career/simulation/simulation.utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getSkewedGoals",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/career/simulation/simulation.utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "simulateApps",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/auth.guard.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthGuard",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/auth.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthService",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/create-player.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CreatePlayerService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/create-roster.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CreateRosterService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/firestore.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FirstName",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/firestore.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LastName",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/firestore.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/firestore.model.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "isFirstName",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/firestore.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "FirestoreService",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/moba/champion/champion.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Champion",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/moba/champion/champion.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GameStateAttributes",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/moba/champion/champion.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TypeAttributes",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/moba/draft/draft-grader.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getCompositionAdviceAndGrade",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/moba/draft/draft-grader.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getTeamCompStyleScoring",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/app/moba/draft/draft-grader.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "needsMoreDmgAdvice",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/moba/draft/draft-grader.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "needsMoreScalingAdvice",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/moba/draft/draft.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DraftComponent",
                "coveragePercent": 0,
                "coverageCount": "0/67",
                "status": "low"
            },
            {
                "filePath": "src/app/moba/draft/draft.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AllRolesTierList",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/moba/draft/draft.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ChampionAdvice",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/moba/draft/draft.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CompStyleData",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/moba/draft/draft.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CompStyleStats",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/moba/draft/draft.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DraftChampion",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/moba/draft/draft.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DraftFormData",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/moba/draft/draft.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DraftPlayer",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/moba/draft/draft.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PatchData",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/moba/draft/draft.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TierListRankings",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/moba/draft/draft.model.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getRoleFromFilter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/moba/draft/draft.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "blueSideBanRounds",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/moba/draft/draft.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "blueSidePickRounds",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/moba/draft/draft.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "compStyleReqs",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/moba/draft/draft.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defaultOpponentMasteries",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/moba/draft/draft.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defaultPlayerMasteries",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/moba/draft/draft.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "emptyDraftBans",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/moba/draft/draft.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "emptyDraftPicks",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/moba/draft/draft.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "redSideBanRounds",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/moba/draft/draft.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "redSidePickRounds",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/moba/draft/draft.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "tierValues",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/moba/draft/draft.utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "checkForAvailableRoles",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/moba/draft/draft.utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getAdviceTags",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/moba/draft/draft.utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getAllMasteries",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/moba/draft/draft.utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getChampionMasteryBasedOnDiff",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/app/moba/draft/draft.utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getChampMasteries",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/moba/draft/draft.utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getChampPropFromDraftPhase",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/moba/draft/draft.utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getDraftChampions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/moba/draft/draft.utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getMasterySort",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/moba/draft/draft.utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getMetaStrength",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/moba/draft/draft.utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getPatchData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/moba/draft/draft.utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getRandomMasteries",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/app/moba/draft/draft.utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getRoleMastery",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/moba/draft/draft.utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getRoleMetaStrength",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/moba/home/home.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HomeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/moba/moba.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MobaService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/moba/patch-lists/msi-24.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "patchMSI24",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/moba/player-select/player-select.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PlayerSelectComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/moba/player/player.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GamerTag",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/moba/player/player.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IntangibleAttributes",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/moba/player/player.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MacroAttributes",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/moba/player/player.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MechanicAttributes",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/moba/player/player.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MobaAttributes",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/moba/player/player.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Player",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/moba/player/player.model.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "isRole",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/moba/player/player.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AllGameStates",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/moba/player/player.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AllRoles",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/moba/player/player.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AllUniquePlayStyles",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/moba/player/player.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "positionFilters",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/moba/player/player.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "positions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/moba/player/player.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "rolePriority",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/moba/player/player.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "sortByMainRole",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/moba/player/player.utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getAge",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/moba/player/player.utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getAttributes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/moba/player/player.utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getChampMains",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/moba/player/player.utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getCurrentRoles",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/moba/player/player.utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getGameStateStrength",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/moba/player/player.utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getName",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/moba/player/player.utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getNationality",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/moba/player/player.utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getOverallRating",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/moba/player/player.utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getPlayerOptions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/moba/player/player.utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getPlayStyle",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/moba/player/player.utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getRoleBasedAttributes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/moba/player/player.utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "isCompatPlayStyle",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/moba/player/player.utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "sortMapAttributes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/moba/region/region.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MobaRegion",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/moba/region/region.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "regions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/moba/region/region.utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getNameNationality",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/moba/region/region.utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getRegionSkew",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/models/club.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Club",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/models/default-coaches.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defaultCoaches",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/models/nation.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Buff",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/models/nation.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GroupTeam",
                "coveragePercent": 0,
                "coverageCount": "0/35",
                "status": "low"
            },
            {
                "filePath": "src/app/models/nation.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Nation",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "src/app/models/nation.model.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "isNation",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/models/nation.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "allNations",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/models/nation.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "baseTeam",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/models/nation.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defaultHost32",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/models/nation.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defaultHosts48",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/models/player-attributes.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GkAttributes",
                "coveragePercent": 0,
                "coverageCount": "0/39",
                "status": "low"
            },
            {
                "filePath": "src/app/models/player-attributes.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "OutfieldAttributes",
                "coveragePercent": 0,
                "coverageCount": "0/37",
                "status": "low"
            },
            {
                "filePath": "src/app/models/player.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Person",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/models/player.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Player",
                "coveragePercent": 0,
                "coverageCount": "0/32",
                "status": "low"
            },
            {
                "filePath": "src/app/models/position-box.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PositionBox",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/models/roster.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Roster",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/models/roster.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RosterData",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/build-roster/build-roster.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BuildRosterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/home/home.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HomeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/23",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/home/home.utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "checkStars",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/leaderboard/leaderboard.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LeaderboardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/22",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/leaderboard/leaderboard.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LeaderboardService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/leaderboard/leaderboard.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LeaderboardItem",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/lineup/lineup.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LineupComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/login/login.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/roster/roster.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RosterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/dashboard/dashboard.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DashboardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "components",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/lineup-accordion/lineup-accordion.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LineupAccordionComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/nation-dialog/nation-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NationDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/nav-bar/nav-bar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NavBarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/pitch-view/pitch-view.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PitchViewComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/player-card/player-card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PlayerCardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/position-breakdown/position-breakdown.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PositionBreakdownComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/squad-rules/squad-rules.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SquadRulesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/star-rating/star-rating.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StarRatingComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/tournament-form/tournament-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TournamentFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/38",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/constants/position-boxes.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defaultPosBox",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/constants/position-boxes.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "POSITION_BOXES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/constants/squad-rules.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SquadRule",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/constants/squad-rules.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SQUAD_RULES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/directives/click-stop-propagation.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "ClickStopPropagationDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/pipes/memoizer.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "MemoizerPipe",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/app/shared/utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "calcSumRating",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "calcWeightedSumRating",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "compare",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "formatDecimal",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getAbbrevNumber",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getAbbrevString",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getRandFloat",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getRandomInt",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getRandomIntBC",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getRandomInts",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getRandomIntsBC",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getRandomPersonality",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "groupByProp",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "isArrayOfStrings",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "isTopNumOfMap",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "mapRange",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "median",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "shuffle",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "startsWithVowel",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utils.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "originalOrder",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utils.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pickSingleLastName",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utils.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "probability",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/simulation/group-draw.utils.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "backupDraw",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/simulation/group-draw.utils.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "compareFn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/simulation/group-draw.utils.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "draw",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/simulation/group-draw.utils.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "drawAndSort",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/simulation/group-draw.utils.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "sortGroups",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/simulation/group-stage/group-stage.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "GroupStageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/simulation/knockout-stage/knockout-stage.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "KnockoutStageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/simulation/simulation-qualifiers.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SimulationQualifiersService",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/simulation/simulation.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SimulationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/simulation/simulation.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Match",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/simulation/simulation.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MatchEvent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/simulation/simulation.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Region",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/simulation/simulation.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TeamsByRegion",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/simulation/simulation.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Tournament",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/simulation/simulation.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SimulationService",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/simulation/simulation.utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "addRankings",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/simulation/simulation.utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "calcScore",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/simulation/simulation.utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "extraTimeResult",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/simulation/simulation.utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "findTeamInTournament",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/simulation/simulation.utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getDisplayRating",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/simulation/simulation.utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getGradeStyle",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/simulation/simulation.utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getGradeSummary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/simulation/simulation.utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getHostNations",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/simulation/simulation.utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getRandomCardTimes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/simulation/simulation.utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getRandomGoalTimes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/simulation/simulation.utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getRandomInjuryTimes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/simulation/simulation.utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getTeamBuffs",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/simulation/simulation.utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "groupLetters",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/simulation/simulation.utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "matchScore",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/simulation/simulation.utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "regionQualifierHelper",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/simulation/simulation.utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "regionsValidator",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/simulation/simulation.utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "roundOf32Helper",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/simulation/simulation.utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "sortEventTimes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/simulation/simulation.utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "validateHosts",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/simulation/simulation.utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "whoWon",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/simulation/simulation.utils.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getAdjustedTime",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/simulation/simulation.utils.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "regions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/simulation/stats-overview/stats-overview.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StatsOverviewComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/simulation/stats-overview/stats-overview.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RankingsRow",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/user.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            }
        ]
    }
}